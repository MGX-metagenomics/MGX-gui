/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.mgx.referenceview;

import de.cebitec.vamp.view.dataVisualisation.BoundsInfo;
import de.cebitec.vamp.view.dataVisualisation.BoundsInfoManager;
import de.cebitec.vamp.view.dataVisualisation.MousePositionListener;
import de.cebitec.vamp.view.dataVisualisation.basePanel.AdjustmentPanel;
import de.cebitec.vamp.view.dataVisualisation.basePanel.BasePanel;
import de.cebitec.vamp.view.dataVisualisation.referenceViewer.ReferenceViewer;
import excluded.BasePanelFactory;
import excluded.PersistantReference;
import excluded.ViewController;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.sql.Timestamp;
import java.util.Date;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.mgx.referenceview//ReferenceView//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "ReferenceViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.mgx.referenceview.ReferenceViewTopComponent")
@ActionReference(path = "Menu/Window" , position = 333 )
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ReferenceViewAction",
preferredID = "ReferenceViewTopComponent")
@Messages({
   "CTL_ReferenceViewAction=ReferenceView",
   "CTL_ReferenceViewTopComponent=ReferenceView Window",
   "HINT_ReferenceViewTopComponent=This is a ReferenceView window"
})
public final class ReferenceViewTopComponent extends TopComponent {

   public ReferenceViewTopComponent() {
	initMyComponents();
	setName(Bundle.CTL_ReferenceViewTopComponent());
	setToolTipText(Bundle.HINT_ReferenceViewTopComponent());

   }


   public void initMyComponents(){
   	PersistantReference reference = new PersistantReference(10, "name", "descriptionnew Timestamp(new Date().getTime()));
	BoundsInfoManager manager = new BoundsInfoManager(reference);

	MousePositionListener listener = new MousePositionListener() {
	   @Override
	   public void setCurrentMousePosition(int logPos) {
//		throw new UnsupportedOperationException("Not supported yet.");
	   }

	   @Override
	   public void setMouseOverPaintingRequested(boolean requested) {
//		throw new UnsupportedOperationException("Not supported yet.");
	   }
	};
	BasePanel basepanel = new BasePanel(manager, listener);
	ViewController viewController = new ViewController();
	viewController.addMousePositionListener(basepanel);
	ReferenceViewer genomeViewer = new ReferenceViewer(manager, basepanel, reference);
	int maxSliderValue = 500;
	basepanel.setViewer(genomeViewer);
	basepanel.setHorizontalAdjustmentPanel(this.createAdjustmentPanel(true, true, maxSliderValue,manager,reference));

	BasePanelFactory factory = new BasePanelFactory(manager, viewController);
	this.setLayout(new BorderLayout());
	this.add(factory.getGenomeViewerBasePanel(reference));
   }


private AdjustmentPanel createAdjustmentPanel(boolean hasScrollbar, boolean hasSlider, int sliderMax, BoundsInfoManager boundsManager,PersistantReference refGenome) {
        // create control panel
        BoundsInfo bounds = boundsManager.getUpdatedBoundsInfo(new Dimension(10, 10));
        AdjustmentPanel control = new AdjustmentPanel(1, refGenome.getRefLength(),
                bounds.getCurrentLogPos(), bounds.getZoomValue(), sliderMax, hasScrollbar, hasSlider);
        control.addAdjustmentListener(boundsManager);
        boundsManager.addSynchronousNavigator(control);
        return control;
    }


   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
	// TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
	// TODO add custom code on component closing
   }

   void writeProperties(java.util.Properties p) {
	// better to version settings since initial version as advocated at
	// http://wiki.apidesign.org/wiki/PropertyFiles
	p.setProperty("version", "1.0");
	// TODO store your settings
   }

   void readProperties(java.util.Properties p) {
	String version = p.getProperty("version");
	// TODO read your settings according to their version
   }
}
