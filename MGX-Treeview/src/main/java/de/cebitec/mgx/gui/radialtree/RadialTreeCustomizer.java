/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.gui.radialtree;

import de.cebitec.mgx.api.groups.FileType;
import de.cebitec.mgx.api.model.tree.TreeI;
import de.cebitec.mgx.gui.newickwriter.NewickWriter;
import de.cebitec.mgx.gui.swingutils.util.FileChooserUtils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serial;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author sj
 */
public class RadialTreeCustomizer extends javax.swing.JPanel {

    @Serial
    private static final long serialVersionUID = 1L;

    private TreeI<Long> tree = null;

    /**
     * Creates new form RadialTreeCustomizer
     */
    public RadialTreeCustomizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        jButton1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RadialTreeCustomizer.class, "RadialTreeCustomizer.jButton1.text")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(RadialTreeCustomizer.class, "RadialTreeCustomizer.jCheckBox1.text")); // NOI18N
        jCheckBox1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fName = FileChooserUtils.selectNewFilename(new FileType[]{FileType.NWK}, "MGX_export");
        if (fName != null) {
            File f = new File(fName);

            try {
                if (f.exists()) {
                    throw new IOException(f.getName() + " already exists.");
                }

                try ( BufferedWriter w = new BufferedWriter(new FileWriter(f))) {
                    NewickWriter.toNewick(w, tree, jCheckBox1.isEnabled());
                }

                // report success
                NotifyDescriptor nd = new NotifyDescriptor.Message("Data exported to " + f.getName());
                DialogDisplayer.getDefault().notify(nd);
            } catch (IOException ex) {
                // some error occured, notify user
                NotifyDescriptor nd = new NotifyDescriptor("Export failed: " + ex.getMessage(), "Error",
                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);
                DialogDisplayer.getDefault().notify(nd);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables

    void setTree(TreeI<Long> mgxTree) {
        this.tree = mgxTree;
        jButton1.setEnabled(tree != null);
        jCheckBox1.setEnabled(tree != null);
    }
}
