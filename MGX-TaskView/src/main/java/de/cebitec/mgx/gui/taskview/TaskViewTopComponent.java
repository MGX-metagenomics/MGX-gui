package de.cebitec.mgx.gui.taskview;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.ServiceProvider;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.mgx.gui.taskview//TaskView//EN",
autostore = false)
@TopComponent.Description(preferredID = "TaskViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.mgx.gui.taskview.TaskViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TaskViewAction",
preferredID = "TaskViewTopComponent")
@ServiceProvider(service = TaskViewTopComponent.class)
public final class TaskViewTopComponent extends TopComponent implements PropertyChangeListener {

    public TaskViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TaskViewTopComponent.class, "CTL_TaskViewTopComponent"));
        setToolTipText(NbBundle.getMessage(TaskViewTopComponent.class, "HINT_TaskViewTopComponent"));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        // FIXME: add mouse listener to clear finished/failed tasks
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollpane = new javax.swing.JScrollPane();
        tasklistpanel = new javax.swing.JPanel();

        scrollpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tasklistpanel.setLayout(new java.awt.GridLayout(1, 1));
        scrollpane.setViewportView(tasklistpanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel tasklistpanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        TaskManager.getInstance().addPropertyChangeListener(this);
        refreshList();
    }

    @Override
    public void componentClosed() {
        TaskManager.getInstance().removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(TaskManager.TASKMANAGER_CHANGE)) {
            refreshList();
        }
    }

    private void refreshList() {
        if (EventQueue.isDispatchThread()) {
            System.err.println("refreshList() in EDT");
        }
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                tasklistpanel.removeAll();
                List<TaskDescriptor> activeTasks = TaskManager.getInstance().getActiveTasks();
                tasklistpanel.setLayout(new GridLayout(1, activeTasks.size() < 10 ? 10 : activeTasks.size()));
                for (TaskDescriptor td : activeTasks) {
                    tasklistpanel.add(td.getTaskEntry());
                }
            }
        });

    }
}