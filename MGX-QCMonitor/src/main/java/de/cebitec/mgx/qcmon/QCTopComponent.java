/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.qcmon;

import de.cebitec.mgx.api.exception.MGXException;
import de.cebitec.mgx.api.model.SeqRunI;
import de.cebitec.mgx.api.model.qc.DataRowI;
import de.cebitec.mgx.api.model.qc.QCResultI;
import java.awt.Color;
import java.awt.Component;
import java.util.Collection;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYSeries;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.cebitec.mgx.qcmon//QC//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "QCTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "satellite", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.mgx.qcmon.QCTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_QCAction",
        preferredID = "QCTopComponent"
)
@Messages({
    "CTL_QCAction=QC",
    "CTL_QCTopComponent=QC Window",
    "HINT_QCTopComponent=This is a QC window"
})
public final class QCTopComponent extends TopComponent implements LookupListener {

    private final Lookup.Result<SeqRunI> resultSeqRun;
    private SeqRunI currentSeqRun = null;

    public QCTopComponent() {
        initComponents();
        setName(Bundle.CTL_QCTopComponent());
        setToolTipText(Bundle.HINT_QCTopComponent());
        resultSeqRun = Utilities.actionsGlobalContext().lookupResult(SeqRunI.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        resultSeqRun.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        resultSeqRun.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        update();

    }

    private void update() {
        Collection<? extends SeqRunI> runs = resultSeqRun.allInstances();
        for (SeqRunI run : runs) {
            if (currentSeqRun == null || !run.equals(currentSeqRun)) {
                currentSeqRun = run;
            }
        }
        if (currentSeqRun == null) {
            return;
        }
        try {
            List<QCResultI> qc = currentSeqRun.getMaster().SeqRun().getQC(currentSeqRun);
            if (qc.isEmpty()) {
                tabbedPane.removeAll();
            } else {
                for (QCResultI qcr : qc) {
                    Component chart = createChart(qcr);
                    tabbedPane.add(qcr.getName(), chart);
                }
            }
        } catch (MGXException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private Component createChart(QCResultI qcr) {
        DefaultTableXYDataset dataset = new DefaultTableXYDataset();
        for (DataRowI dr : qcr.getData()) {
            XYSeries series = new XYSeries(dr.getName(), true, false);
            int x = 1;
            for (float f : dr.getData()) {
                series.add(x++, f);
            }
            dataset.addSeries(series);
        }
        JFreeChart chart = ChartFactory.createStackedXYAreaChart(null, null, null, dataset, PlotOrientation.VERTICAL, true, true, false);

        chart.setBorderPaint(Color.WHITE);
        chart.setBackgroundPaint(Color.WHITE);
        ChartPanel cPanel = new ChartPanel(chart);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        return cPanel;
    }
}
