package de.cebitec.mgx.gui.biodiversity;

import de.cebitec.mgx.api.groups.VisualizationGroupI;
import de.cebitec.mgx.api.misc.DistributionI;
import de.cebitec.mgx.gui.biodiversity.statistic.Statistic;
import de.cebitec.mgx.gui.biodiversity.statistic.impl.ACE;
import de.cebitec.mgx.gui.biodiversity.statistic.impl.Chao1;
import de.cebitec.mgx.gui.biodiversity.statistic.impl.Shannon;
import de.cebitec.mgx.gui.biodiversity.statistic.impl.Simpson;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.cebitec.mgx.gui.biodiversity//Biodiversity//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "BiodiversityTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "satellite", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.mgx.gui.biodiversity.BiodiversityTopComponent")
@ActionReference(path = "Menu/Window", position = 338)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_BiodiversityAction",
        preferredID = "BiodiversityTopComponent"
)
@Messages({
    "CTL_BiodiversityAction=Biodiversity",
    "CTL_BiodiversityTopComponent=Biodiversity Window",
    "HINT_BiodiversityTopComponent=This is a Biodiversity window"
})
public final class BiodiversityTopComponent extends TopComponent implements LookupListener, PropertyChangeListener {

    private final Lookup.Result<VisualizationGroupI> result;
    private VisualizationGroupI curGroup = null;
    private final List<Statistic<DistributionI>> stats = new ArrayList<>();

    public BiodiversityTopComponent() {
        initComponents();
        setName(Bundle.CTL_BiodiversityTopComponent());
        setToolTipText(Bundle.HINT_BiodiversityTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        result = Utilities.actionsGlobalContext().lookupResult(VisualizationGroupI.class);

        stats.add(new Shannon());
        stats.add(new ACE());
        stats.add(new Chao1());
        stats.add(new Simpson());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        groupName = new javax.swing.JLabel();
        attrType = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(BiodiversityTopComponent.class, "BiodiversityTopComponent.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(BiodiversityTopComponent.class, "BiodiversityTopComponent.jLabel7.text")); // NOI18N

        groupName.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        groupName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(groupName, org.openide.util.NbBundle.getMessage(BiodiversityTopComponent.class, "BiodiversityTopComponent.groupName.text")); // NOI18N

        attrType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        attrType.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(attrType, org.openide.util.NbBundle.getMessage(BiodiversityTopComponent.class, "BiodiversityTopComponent.attrType.text")); // NOI18N

        panel.setLayout(new java.awt.GridLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(groupName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(attrType, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(groupName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(attrType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attrType;
    private javax.swing.JLabel groupName;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    private void update() {
        groupName.setText(curGroup.getName());

        if (curGroup.getSelectedAttributeType() == null) {
            attrType.setText("n/a");
            return;
        } else {
            attrType.setText(curGroup.getSelectedAttributeType());
        }

        DistributionI dist = getDistribution();
        if (dist == null) {
            return;
        }

        panel.removeAll();
        panel.setLayout(new GridLayout(stats.size(), 1));
        for (Statistic<DistributionI> s : stats) {
            panel.add(new StatisticsPanel(s, dist));
        }
    }

    private DistributionI getDistribution() {

        SwingWorker<DistributionI, Void> worker = new SwingWorker<DistributionI, Void>() {

            @Override
            protected DistributionI doInBackground() throws Exception {
                return curGroup.getDistribution();
            }

        };
        worker.execute();
        try {
            return worker.get();
        } catch (InterruptedException | ExecutionException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends VisualizationGroupI> groups = result.allInstances();
        if (groups.isEmpty()) {
            return;
        }

        VisualizationGroupI newGroup = null;
        for (VisualizationGroupI vg : groups) {
            newGroup = vg;
        }

        if (newGroup != null && newGroup != curGroup) {
            if (curGroup != null) {
                curGroup.removePropertyChangeListener(this);
            }
            newGroup.addPropertyChangeListener(this);
            curGroup = newGroup;
            update();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        //       System.err.println("BioDiversityTC got " + evt.getPropertyName());
        switch (evt.getPropertyName()) {
            case VisualizationGroupI.VISGROUP_RENAMED:
                groupName.setText(curGroup.getName());
                break;
            case VisualizationGroupI.VISGROUP_DEACTIVATED:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_HAS_DIST:
                update();
                break;
            case VisualizationGroupI.VISGROUP_ATTRTYPE_CHANGED:
                update();
                break;
            default:
                System.err.println("BioDiversityTopComponent got unhandled " + evt.getPropertyName());
        }

    }
}
