/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.gui.biodiversity;

import de.cebitec.mgx.api.groups.FileType;
import de.cebitec.mgx.gui.swingutils.util.FileChooserUtils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.swing.table.AbstractTableModel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author sj
 */
public class BiodiversityCustomizer extends javax.swing.JPanel {

    /**
     * Creates new form BiodiversityCustomizer
     */
    public BiodiversityCustomizer() {
        initComponents();
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        includeHeaders.setEnabled(enabled);
    }

    private boolean includeHeaders() {
        return includeHeaders.isSelected();
    }

    private AbstractTableModel model = null;

    void setModel(AbstractTableModel m) {
        model = m;
        export.setEnabled(m != null && m.getColumnCount() > 0 && m.getRowCount() > 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        includeHeaders = new javax.swing.JCheckBox();
        export = new javax.swing.JButton();

        includeHeaders.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        includeHeaders.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(includeHeaders, org.openide.util.NbBundle.getMessage(BiodiversityCustomizer.class, "BiodiversityCustomizer.includeHeaders.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(export, org.openide.util.NbBundle.getMessage(BiodiversityCustomizer.class, "BiodiversityCustomizer.export.text")); // NOI18N
        export.setEnabled(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(includeHeaders)
                    .addComponent(export))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(includeHeaders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(export)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed

        String fName = FileChooserUtils.selectNewFilename(new FileType[]{FileType.TSV}, "MGX_export");
        if (fName != null) {
            File f = new File(fName);
        
            try {
                if (f.exists()) {
                    throw new IOException(f.getName() + " already exists.");
                }
                BufferedWriter w = new BufferedWriter(new FileWriter(f));

                if (includeHeaders()) {
                    for (int col = 0; col < model.getColumnCount() - 1; col++) {
                        w.write(model.getColumnName(col));
                        w.write("\t");
                    }
                    w.write(model.getColumnName(model.getColumnCount() - 1));
                    w.newLine();
                    w.newLine();
                }

                DecimalFormat FMT = new DecimalFormat("#.######");

                // export data
                for (int row = 0; row < model.getRowCount(); row++) {
                    for (int col = 0; col <= model.getColumnCount() - 1; col++) {
                        Object value = model.getValueAt(row, col);
                        if (value != null) {
                            if (value instanceof Double) {
                                value = FMT.format((Double) value);
                            }
                            w.write(value.toString());
                        }
                        if (col <= model.getColumnCount() - 2 && model.getValueAt(row, col + 1) != null) {
                            w.write("\t");
                        }
                    }
                    w.write(System.lineSeparator());
                }
                w.flush();
                w.close();

                // report success
                NotifyDescriptor nd = new NotifyDescriptor.Message("Data exported to " + f.getName());
                DialogDisplayer.getDefault().notify(nd);
            } catch (IOException ex) {
                // some error occured, notify user
                NotifyDescriptor nd = new NotifyDescriptor("Export failed: " + ex.getMessage(), "Error",
                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);
                DialogDisplayer.getDefault().notify(nd);
            }
        }
    }//GEN-LAST:event_exportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton export;
    private javax.swing.JCheckBox includeHeaders;
    // End of variables declaration//GEN-END:variables
}
