package de.cebitec.mgx.gui.login.configuration;

import de.cebitec.gpms.rest.GPMSClientI;
import de.cebitec.gpms.server.ServerFactory;
import de.cebitec.mgx.restgpms.GPMSClient;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbPreferences;

public class MGXserverPanel extends javax.swing.JPanel implements DocumentListener {

    @Serial
    private static final long serialVersionUID = 1L;

    private final MGXserverOptionsPanelController controller;

    MGXserverPanel(MGXserverOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        site.getDocument().addDocumentListener(this);
        server.getDocument().addDocumentListener(this);

        serverList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                GPMSClientI cur = serverList.getSelectedValue();
                site.setText(cur.getServerName());
                server.setText(cur.getBaseURI());
            }
        });

        serverList.setCellRenderer(new ServerListCellRenderer());
        final ServerListModel serverListModel = new ServerListModel();
        List<GPMSClientI> servers = ServerFactory.getDefault().getServers();
        for (GPMSClientI c : servers) {
            serverListModel.add(c);
        }
        serverList.setModel(serverListModel);

        if (servers.size() > 0) {
            serverList.setSelectedIndex(0);
        }

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GPMSClientI cli = new GPMSClient(site.getText().trim(), server.getText().trim());
                try {
                    ServerFactory.getDefault().addServer(cli);
                    serverListModel.add(cli);
                } catch (RuntimeException rte) {
                    NotifyDescriptor.Message msg = new NotifyDescriptor.Message(rte.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
                    DialogDisplayer.getDefault().notify(msg);
                }
            }
        });

        delButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int idx = serverList.getSelectedIndex();
                ServerFactory.getDefault().removeServer(site.getText().trim());
                List<GPMSClientI> servers = ServerFactory.getDefault().getServers();
                serverListModel.clear();
                for (GPMSClientI c : servers) {
                    serverListModel.add(c);
                }
                if (serverListModel.getSize() > 0) {
                    serverList.setSelectedIndex(idx);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        server = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        site = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverList = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.jLabel1.text")); // NOI18N

        server.setText(org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.server.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.jLabel2.text")); // NOI18N

        site.setText(org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.site.text")); // NOI18N

        serverList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(serverList);

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.addButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(delButton, org.openide.util.NbBundle.getMessage(MGXserverPanel.class, "MGXserverPanel.delButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(delButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(site, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(server)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(site, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(delButton))
                .addContainerGap(142, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        GPMSClientI cur = serverList.getSelectedValue();
        if (cur != null) {
            site.setText(cur.getServerName());
            server.setText(cur.getBaseURI());
        }
    }

    void store() {
        if (!server.getText().equals("")) {
            NbPreferences.forModule(MGXserverPanel.class).put("servername", site.getText());
            NbPreferences.forModule(MGXserverPanel.class).put("serveruri", server.getText());
        }
    }

    boolean valid() {
        if (site.getText().isEmpty()) {
            return false;
        }

        String content = server.getText();
        boolean ret = false;
        if (content.startsWith("http://") || content.startsWith("https://")) {
            //
            // remove protocol and extract fqdn
            //
            content = content.replaceFirst("http://", "");
            content = content.replaceFirst("https://", "");
            if (content.contains("/")) {
                content = content.split("/")[0];
            }
            if (content.length() == 0) {
                return false;
            }

            //
            // remove port
            //
            if (content.contains(":")) {
                content = content.split(":")[0];
            }

            //
            // try to resolve server name
            //
            try {
                InetAddress.getByName(content).getAddress();
                ret = true;
            } catch (UnknownHostException ex) {
            }
        }
        return ret;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton delButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField server;
    private javax.swing.JList<GPMSClientI> serverList;
    private javax.swing.JTextField site;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent de) {
        controller.changed();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        controller.changed();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        controller.changed();
    }

    private final class ServerListModel extends AbstractListModel<GPMSClientI> {

        @Serial
        private static final long serialVersionUID = 1L;

        java.util.List<GPMSClientI> data = new ArrayList<>();

        public void add(GPMSClientI c) {
            data.add(c);
            fireContentsChanged();
        }

        @Override
        public int getSize() {
            return data.size();
        }

        @Override
        public GPMSClientI getElementAt(int index) {
            return data.get(index);
        }

        public void clear() {
            data.clear();
            fireContentsChanged();
        }

        protected void fireContentsChanged() {
            ListDataEvent e = new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, -1, -1);
            fireContentsChanged(e, -1, -1);
        }

    }

    private final class ServerListCellRenderer extends DefaultListCellRenderer {

        @Serial
        private static final long serialVersionUID = 1L;

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            return super.getListCellRendererComponent(list, ((GPMSClientI) value).getServerName(), index, isSelected, cellHasFocus);
        }
    }
}
