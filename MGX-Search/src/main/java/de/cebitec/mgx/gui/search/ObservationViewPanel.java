package de.cebitec.mgx.gui.search;

import de.cebitec.mgx.gui.controller.MGXMaster;
import de.cebitec.mgx.gui.datamodel.Observation;
import de.cebitec.mgx.gui.datamodel.Sequence;
import java.lang.ref.WeakReference;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.openide.util.RequestProcessor;
import org.openide.util.RequestProcessor.Task;

/**
 *
 * @author sj
 */
public class ObservationViewPanel extends javax.swing.JPanel {

    private Task myTask;
    private Sequence seq;
    private static Map<Sequence, WeakReference<Observation[]>> cache = Collections.<Sequence, WeakReference<Observation[]>>synchronizedMap(new HashMap<Sequence, WeakReference<Observation[]>>());

    /**
     * Creates new form ObservationViewPanel
     */
    public ObservationViewPanel() {
        super();
        initComponents();
    }

    @Override
    public int getHeight() {
        return 200;
    }

    public void setCurrentData(MGXMaster m, Sequence seq, RequestProcessor proc) {
        this.seq = seq;
        readName.setText(seq.getName() + " (" + seq.getLength() + "bp)");
        if (!cache.containsKey(seq)) {
            // submit observation fetcher task
            fetchFromServer(m, seq, proc);
        }
    }

    private Observation[] getObservations(MGXMaster m, Sequence seq, RequestProcessor proc) {
        // if task is still running, wait for it to finish
        if (myTask != null) {
            myTask.waitFinished();
            myTask = null;
        }
        
        if (cache.containsKey(seq)) {
            Observation[] obs = cache.get(seq).get(); // create strong reference
            if (obs == null) {
                // weak ref expired, start new fetcher and invoke self
                fetchFromServer(m, seq, proc);
                return getObservations(m, seq, proc);
            } else {
                // weak ref alive, return value
                return obs;
            }
        }
        
        assert false;
        return null;
    }

    private void fetchFromServer(MGXMaster m, Sequence seq, RequestProcessor proc) {
        myTask = proc.post(new ObsFetcher(m, seq));
    }

    private class ObsFetcher implements Runnable { //, Future<Collection<Observation>> {

        private final MGXMaster master;
        private final Sequence seq;

        public ObsFetcher(MGXMaster master, Sequence seq) {
            this.master = master;
            this.seq = seq;
        }

        @Override
        public void run() {
            Observation[] obs = master.Observation().ByRead(seq).toArray(new Observation[]{});
            cache.put(seq, new WeakReference(obs));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        readName = new javax.swing.JLabel();
        obsview = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.openide.awt.Mnemonics.setLocalizedText(readName, org.openide.util.NbBundle.getMessage(ObservationViewPanel.class, "ObservationViewPanel.readName.text")); // NOI18N

        javax.swing.GroupLayout obsviewLayout = new javax.swing.GroupLayout(obsview);
        obsview.setLayout(obsviewLayout);
        obsviewLayout.setHorizontalGroup(
            obsviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 432, Short.MAX_VALUE)
        );
        obsviewLayout.setVerticalGroup(
            obsviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(obsview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(readName)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(readName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(obsview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel obsview;
    private javax.swing.JLabel readName;
    // End of variables declaration//GEN-END:variables
}
