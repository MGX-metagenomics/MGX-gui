/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.gui.rarefaction.plot;

import de.cebitec.mgx.api.groups.FileType;
import de.cebitec.mgx.api.misc.Point;
import de.cebitec.mgx.gui.swingutils.util.FileChooserUtils;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author sj
 */
public class RarefactionCustomizer extends javax.swing.JPanel {

    private Map<String, List<Point>> data = null;

    /**
     * Creates new form RarefactionCustomizer
     */
    public RarefactionCustomizer() {
        initComponents();
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        numPoints.setEnabled(enabled);
        numIterations.setEnabled(enabled);
        hideTitle.setEnabled(enabled);
    }

    int getNumberRepetitions() {
        int ret = numIterations.getValue();
        return ret == 0 ? 1 : ret; //at least one round required
    }

    int getNumberOfPoints() {
        return numPoints.getValue();
    }

    boolean hideTitle() {
        return hideTitle.isSelected();
    }

    boolean hideLegend() {
        return hideLegend.isSelected();
    }

    int getLineThickness() {
        return lineThickness.getValue();
    }

    void setData(Map<String, List<Point>> allDataPoints) {
        exportTSV.setEnabled(allDataPoints != null && !allDataPoints.isEmpty());
        data = allDataPoints;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numPoints = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        hideTitle = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        numIterations = new javax.swing.JSlider();
        hideLegend = new javax.swing.JCheckBox();
        lineThickness = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        exportTSV = new javax.swing.JButton();

        numPoints.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        numPoints.setMajorTickSpacing(50);
        numPoints.setMaximum(250);
        numPoints.setMinorTickSpacing(5);
        numPoints.setPaintLabels(true);
        numPoints.setPaintTicks(true);
        numPoints.setSnapToTicks(true);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.jLabel1.text")); // NOI18N

        hideTitle.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(hideTitle, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.hideTitle.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.jLabel2.text")); // NOI18N

        numIterations.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        numIterations.setMajorTickSpacing(100);
        numIterations.setMaximum(500);
        numIterations.setMinorTickSpacing(10);
        numIterations.setPaintLabels(true);
        numIterations.setPaintTicks(true);
        numIterations.setSnapToTicks(true);

        hideLegend.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(hideLegend, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.hideLegend.text")); // NOI18N

        lineThickness.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lineThickness.setMajorTickSpacing(1);
        lineThickness.setMaximum(5);
        lineThickness.setMinimum(1);
        lineThickness.setPaintLabels(true);
        lineThickness.setPaintTicks(true);
        lineThickness.setToolTipText(org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.toolTipText")); // NOI18N
        lineThickness.setValue(1);
        lineThickness.setName(""); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.jLabel3.text")); // NOI18N

        exportTSV.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(exportTSV, org.openide.util.NbBundle.getMessage(RarefactionCustomizer.class, "RarefactionCustomizer.exportTSV.text")); // NOI18N
        exportTSV.setEnabled(false);
        exportTSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lineThickness, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hideTitle)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(hideLegend)
                            .addComponent(exportTSV))
                        .addGap(0, 92, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(numIterations, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(numPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(52, 52, 52)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineThickness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hideTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hideLegend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(exportTSV)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(104, 104, 104)
                    .addComponent(numIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(196, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportTSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTSVActionPerformed
        if (data == null || data.isEmpty()) {
            return;
        }
        String fname = FileChooserUtils.selectNewFilename(new FileType[]{FileType.TSV}, "MGX_rarefaction");
        if (fname == null) {
            return;
        }

        List<String> names = new ArrayList<>(data.keySet());
        Collections.sort(names);

        int maxLen = -1;
        for (List<Point> pts : data.values()) {
            if (pts.size() > maxLen) {
                maxLen = pts.size();
            }
        }

        try (BufferedWriter w = new BufferedWriter(new FileWriter(fname))) {

            // write header
            for (int col = 0; col < names.size() - 1; col++) {
                w.write(names.get(col));
                w.write("\t\t");
            }
            w.write(names.get(names.size() - 1));
            w.newLine();
            w.newLine();

            for (int idx = 0; idx < maxLen; idx++) {

                // write column data for all but last column
                for (int col = 0; col < names.size() - 1; col++) {

                    List<Point> pts = data.get(names.get(col));

                    if (pts.size() > idx) {
                        Point p = pts.get(idx);
                        w.write(Double.toString(p.getX()));
                        w.write("\t");
                        w.write(Double.toString(p.getY()));
                        w.write("\t");
                    } else {
                        w.write("\t\t");
                    }
                }

                // last column
                List<Point> pts = data.get(names.get(names.size() - 1));
                if (pts.size() > idx) {
                    Point p = pts.get(idx);
                    w.write(Double.toString(p.getX()));
                    w.write("\t");
                    w.write(Double.toString(p.getY()));
                }
                w.newLine();
            }
            // report success
            NotifyDescriptor nd = new NotifyDescriptor.Message("Data exported to " + fname);
            DialogDisplayer.getDefault().notify(nd);

        } catch (IOException ex) {
            NotifyDescriptor nd = new NotifyDescriptor("Export failed: " + ex.getMessage(), "Error",
                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);
            DialogDisplayer.getDefault().notify(nd);
        }

    }//GEN-LAST:event_exportTSVActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportTSV;
    private javax.swing.JCheckBox hideLegend;
    private javax.swing.JCheckBox hideTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSlider lineThickness;
    private javax.swing.JSlider numIterations;
    private javax.swing.JSlider numPoints;
    // End of variables declaration//GEN-END:variables

}
