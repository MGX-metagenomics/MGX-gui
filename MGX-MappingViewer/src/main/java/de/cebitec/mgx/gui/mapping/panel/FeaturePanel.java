/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.gui.mapping.panel;

import de.cebitec.mgx.gui.datamodel.Region;
import de.cebitec.mgx.gui.mapping.ViewController;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;
import org.openide.util.Exceptions;

/**
 *
 * @author sjaenick
 */
public class FeaturePanel extends javax.swing.JPanel implements PropertyChangeListener {

    private final ViewController vc;
    private final RegionSort sort = new RegionSort();

    /**
     * Creates new form FeaturePanel
     */
    public FeaturePanel(ViewController vc) {
        this.vc = vc;
        initComponents();
        setBackground(Color.LIGHT_GRAY);
        setForeground(Color.DARK_GRAY);
        setMaximumSize(new Dimension(5000, 150));
        vc.addPropertyChangeListener(this);
        fetchRegions();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g;
        RenderingHints rh = new RenderingHints(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHints(rh);
        int midY = getHeight() / 2;
        g.drawLine(0, midY, getWidth(), midY); // midline

        g.setFont(new Font(g.getFont().getFontName(), Font.PLAIN, 10));

        int[] bounds = vc.getBounds();
        //int[] scaledBounds = getScaledValues(bounds);

        for (Region r : regs) {
            int[] pos = getScaledValues(r.getStart(), r.getStop());
            int frameOffset = -1 * 3 * r.getFrame();
            g.drawLine(pos[0], midY + frameOffset, pos[1], midY + frameOffset);
        }
    }

    private int[] getScaledValues(int i, int j) {
        int[] ret = new int[2];
        int[] bounds = vc.getBounds();
        int interValLen = bounds[1] - bounds[0] + 1;
        float scale = 1f * interValLen / getWidth();
        ret[0] = (int) (i * 1f / scale);
        ret[1] = (int) (j * 1f / scale);
        return ret;
    }

    private int[] getScaledValues(int[] in) {
        int[] ret = new int[2];
        int[] bounds = vc.getBounds();
        int interValLen = bounds[1] - bounds[0] + 1;
        float scale = 1f * interValLen / getWidth();
        ret[0] = (int) (in[0] * 1f / scale);
        ret[1] = (int) (in[1] * 1f / scale);
        return ret;
    }

    private Region[] regs = null;

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        fetchRegions();
        repaint();
    }

    private void fetchRegions() {
        final int[] bounds = vc.getBounds();
        Set<Region> regions = null;
        
        System.err.print("fetching regions "+ bounds[0] + " to "+ bounds[1] + "... ");

        if (!EventQueue.isDispatchThread()) {
            try {
                regions = vc.getRegions(bounds[0], bounds[1]);
            } catch (ExecutionException ex) {
                Exceptions.printStackTrace(ex);
            }
        } else {
            SwingWorker<Set<Region>, Void> sw = new SwingWorker<Set<Region>, Void>() {

                @Override
                protected Set<Region> doInBackground() throws Exception {
                    return vc.getRegions(bounds[0], bounds[1]);
                }

            };
            sw.execute();
            try {
                regions = sw.get();
            } catch (InterruptedException | ExecutionException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        if (regions != null) {
            System.err.println("done.");
            regs = regions.toArray(new Region[]{});
            Arrays.sort(regs, sort);
        }
    }

    private final class RegionSort implements Comparator<Region> {

        @Override
        public int compare(Region r1, Region r2) {
            int min1 = Math.min(r1.getStart(), r1.getStop());
            int min2 = Math.min(r2.getStart(), r2.getStop());
            return Integer.compare(min2, min2);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 852, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
