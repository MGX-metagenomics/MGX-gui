/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cebitec.mgx.gui.mapping.viewer;

import de.cebitec.mgx.api.model.ModelBase;
import de.cebitec.mgx.gui.mapping.MappingCtx;
import de.cebitec.mgx.gui.mapping.ViewController;
import de.cebitec.mgx.gui.mapping.panel.FeaturePanel;
import de.cebitec.mgx.gui.mapping.panel.MappingPanel;
import de.cebitec.mgx.gui.mapping.panel.NavigationPanel;
import de.cebitec.mgx.gui.mapping.panel.RecruitmentIdentityPanel;
import de.cebitec.mgx.gui.mapping.panel.RecruitmentPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@TopComponent.Description(
        preferredID = "TopComponentViewer",
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "de.cebitec.mgx.gui.mapping.viewer")
@ActionReference(path = "Menu/Window", position = 334)
@Messages({
    "CTL_MappingAction=ReferenceView",
    "CTL_TopComponentViewer=Mapping Window",})
public final class TopComponentViewer extends TopComponent implements PropertyChangeListener {

    private final MappingCtx ctx;

    enum DisplayMode {

        ALIGNMENT,
        RECRUITMENT;
    };

    private DisplayMode currentMode = DisplayMode.ALIGNMENT;
    private MappingPanel mp;
    private JPanel bottom;
    private final ViewController vc;

    public TopComponentViewer(MappingCtx ctx) {
        this.ctx = ctx;
        vc = new ViewController(ctx);
        setName(Bundle.CTL_TopComponentViewer());
        createView();
    }

    private void createView() {
        ctx.addPropertyChangeListener(this);
        removeAll();
        setLayout(new BorderLayout());

        // top panel: navigation and features
        JPanel top = new JPanel(new BorderLayout(), true);
        NavigationPanel np = new NavigationPanel(vc);
        top.add(np, BorderLayout.PAGE_START);
        FeaturePanel fp = new FeaturePanel(vc);
        top.add(fp, BorderLayout.CENTER);
        top.setPreferredSize(new Dimension(500, 205));
        add(top, BorderLayout.PAGE_START);

//        // precache regions
//        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
//
//            @Override
//            protected Void doInBackground() throws Exception {
//                vc.getRegions(0, vc.getReference().getLength() - 1);
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                super.done();
//                try {
//                    get();
//                } catch (InterruptedException | ExecutionException ex) {
//                    Exceptions.printStackTrace(ex);
//                }
//            }
//
//        };
//        sw.execute();
        SwitchMode sm = new SwitchMode(this);

        mp = new MappingPanel(vc, sm);
        mp.setEnabled(true);
        add(mp, BorderLayout.CENTER);

        // bottom panel for fragment recruitments
        final RecruitmentIdentityPanel rip = new RecruitmentIdentityPanel(vc, sm);
        final RecruitmentPanel rp = new RecruitmentPanel(vc, sm);

        bottom = new JPanel(new BorderLayout(), true) {

            @Override
            public void setEnabled(boolean enable) {
                super.setEnabled(enable);
                rip.setEnabled(enable);
                rp.setEnabled(enable);
            }

        };
        bottom.add(rip, BorderLayout.NORTH);
        bottom.add(rp, BorderLayout.CENTER);
        bottom.setEnabled(false);

    }

    void switchMode() {
        switch (currentMode) {
            case ALIGNMENT:
                remove(mp);
                mp.setEnabled(false);
                bottom.setEnabled(true);
                add(bottom, BorderLayout.CENTER);
                currentMode = DisplayMode.RECRUITMENT;
                break;
            case RECRUITMENT:
                remove(bottom);
                mp.setEnabled(true);
                bottom.setEnabled(false);
                add(mp, BorderLayout.CENTER);
                currentMode = DisplayMode.ALIGNMENT;
                break;
        }
        revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        //createView(ctx);
    }

    @Override
    public void componentClosed() {
        //ctx.removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(ModelBase.OBJECT_DELETED)) {
            ctx.removePropertyChangeListener(this);
            //ctx = null;
            removeAll();
        }
    }
}
