package de.cebitec.mgx.gui.attributevisualization.ui;

import de.cebitec.mgx.api.groups.VGroupManagerI;
import de.cebitec.mgx.api.groups.VisualizationGroupI;
import de.cebitec.mgx.common.VGroupManager;
import de.cebitec.mgx.gui.attributevisualization.GroupFrame;
import de.cebitec.mgx.gui.attributevisualization.ReplicateGroupFrame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.cebitec.mgx.gui.attributevisualization.ui//VisualizationGroup//EN",
        autostore = false)
@TopComponent.Description(preferredID = "VisualizationGroupTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "output", openAtStartup = false, position = 1)
@ActionID(category = "Window", id = "de.cebitec.mgx.gui.attributevisualization.ui.VisualizationGroupTopComponent")
@ActionReference(path = "Menu/Window", position = 335)
@TopComponent.OpenActionRegistration(displayName = "#CTL_VisualizationGroupAction",
        preferredID = "VisualizationGroupTopComponent")
@Messages({
    "CTL_VisualizationGroupAction=VisualizationGroup",
    "CTL_VisualizationGroupTopComponent=Visualization groups",
    "HINT_VisualizationGroupTopComponent=Group window"
})
@ServiceProvider(service = VisualizationGroupTopComponent.class)
public final class VisualizationGroupTopComponent extends TopComponent implements ExplorerManager.Provider, ActionListener, PropertyChangeListener { // , ExplorerManager.Provider {

    private final VGroupManagerI groupmgr = VGroupManager.getInstance();
    private final ExplorerManager exmngr = new ExplorerManager();
    private final InstanceContent content = new InstanceContent();
    private final Lookup lookup;
    //
    //
    //
    private final static String ADD_VGROUP = "CMD_ADD_VGROUP";
    private final static String ADD_REPL_GROUP = "CMD_ADD_REPLGROUP";

    public VisualizationGroupTopComponent() {
        initComponents();
        addGroupButton.addActionListener(this);
        addGroupButton.setActionCommand(ADD_VGROUP);

        addReplGroupButton.addActionListener(this);
        addReplGroupButton.setActionCommand(ADD_REPL_GROUP);

        groupmgr.addPropertyChangeListener(this);

        setName(Bundle.CTL_VisualizationGroupTopComponent());
        setToolTipText(Bundle.HINT_VisualizationGroupTopComponent());
        lookup = new AbstractLookup(content);
        
        // combined lookup
        associateLookup(new ProxyLookup(new Lookup[]{
            ExplorerUtils.createLookup(exmngr, getActionMap()),
            lookup
        }));

        // create initial group, if necessary
        if (groupmgr.getAllVizGroups().isEmpty()) {
            actionPerformed(new ActionEvent(this, 1, ADD_VGROUP));
        }
    }

    public Collection<VisualizationGroupI> getVisualizationGroups() {
        return groupmgr.getActiveVizGroups();
    }

    void removeGroup(VisualizationGroupI group) {
        groupmgr.removeVizGroup(group);
    }

//    @Override
//    public String getToolTipText() {
//        Point mousePos = getMousePosition();
//        if (mousePos != null) {
//            Component c = getComponentAt(mousePos);
//            if (c != null) {
//                System.err.println("mouse is over component of type "+ c.getClass().getName());
//            }
//        }
//        return super.getToolTipText();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        addGroupButton = new javax.swing.JButton();
        addReplGroupButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(150, 50));
        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        addGroupButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addGroupButton, org.openide.util.NbBundle.getMessage(VisualizationGroupTopComponent.class, "VisualizationGroupTopComponent.addGroupButton.text")); // NOI18N
        addGroupButton.setToolTipText(org.openide.util.NbBundle.getMessage(VisualizationGroupTopComponent.class, "VisualizationGroupTopComponent.addGroupButton.toolTipText")); // NOI18N
        addGroupButton.setFocusable(false);
        addGroupButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addGroupButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(addGroupButton);

        addReplGroupButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addReplGroupButton, org.openide.util.NbBundle.getMessage(VisualizationGroupTopComponent.class, "VisualizationGroupTopComponent.addReplGroupButton.text")); // NOI18N
        addReplGroupButton.setEnabled(false);
        addReplGroupButton.setFocusable(false);
        addReplGroupButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addReplGroupButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(addReplGroupButton);

        add(jToolBar1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jScrollPane1.setViewportView(panel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroupButton;
    private javax.swing.JButton addReplGroupButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void componentActivated() {
        ExplorerUtils.activateActions(exmngr, true);
    }

    @Override
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(exmngr, false);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        Collection<VisualizationGroupI> groups = groupmgr.getAllVizGroups();
        p.setProperty("numGroups", String.valueOf(groups.size()));
        int num = 0;
        for (VisualizationGroupI vg : groups) {
            p.setProperty("vGroup" + num + "_active", String.valueOf(vg.isActive()));
        }
    }

    void readProperties(java.util.Properties p) {
        //String version = p.getProperty("version");
        //System.err.println(p.getProperty("numGroups"));
    }

    @Override
    public final void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case ADD_VGROUP:
                GroupFrame gf = new GroupFrame(VGroupManager.getInstance().createVizGroup());
                panel.add(gf);
                break;
            case ADD_REPL_GROUP:
                ReplicateGroupFrame rgf = new ReplicateGroupFrame(VGroupManager.getInstance().createReplicateGroup());
                panel.add(rgf);
                break;
            default:
                assert false;
        }

    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case VGroupManagerI.VISGROUP_SELECTION_CHANGED:
                content.set(Collections.emptyList(), null); // clear content
                content.add(evt.getNewValue());

                break;
            case VisualizationGroupI.VISGROUP_ATTRTYPE_CHANGED:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_CHANGED:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_HAS_DIST:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_DEACTIVATED:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_ACTIVATED:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_RENAMED:
                // ignore
                break;
            default:
                System.err.println("VGTopComponent got unhandled event " + evt.getPropertyName());
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return exmngr;
    }
}
