package de.cebitec.mgx.gui.attributevisualization.exportwizard;

import de.cebitec.mgx.gui.groups.VisualizationGroup;
import java.io.File;
import java.lang.reflect.Field;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FileChooserUI;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

public final class ExportSeqVisualPanel2 extends JPanel implements DocumentListener {

    /**
     * Creates new form ExportSeqVisualPanel2
     */
    public ExportSeqVisualPanel2() {
        initComponents();
        // try to restore last directory selection
        String last = NbPreferences.forModule(JFileChooser.class).get("lastDirectory", null);
        if (last != null) {
            File f = new File(last);
            if (f.exists() && f.isDirectory() && f.canWrite()) {
                jFileChooser1.setCurrentDirectory(f);
            }
        }

        try {
            FileChooserUI ui2 = jFileChooser1.getUI();
            Class c = ui2.getClass();
            Field f = null;
            try {
                f = c.getDeclaredField("filenameTextField");
            } catch (NoSuchFieldException | SecurityException x) {
            }
            if (f == null) {
                f = c.getDeclaredField("fileNameTextField");
            }
            f.setAccessible(true);
            fileNameField = (JTextField) f.get(ui2);
            fileNameField.setEditable(true);
            fileNameField.getDocument().addDocumentListener(this);
        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException x) {
            Exceptions.printStackTrace(x);
        }
    }
    private JTextField fileNameField;

    public void setVisualizationGroup(VisualizationGroup vg) {
        // suggest a file name
        File suggestedName = new File(jFileChooser1.getCurrentDirectory(), cleanupName(vg.getName()) + ".fas");
        int cnt = 1;
        while (suggestedName.exists()) {
            String newName = new StringBuilder(cleanupName(vg.getName()))
                    .append(" (")
                    .append(cnt++)
                    .append(").fas")
                    .toString();
            suggestedName = new File(jFileChooser1.getCurrentDirectory(), newName);
        }
        jFileChooser1.setSelectedFile(suggestedName);
        fileNameField.setText(suggestedName.getName());
    }

    public File getSelectedFile() {

        String tmp = fileNameField.getText();
        if (tmp != null && !"".equals(tmp)) {
            File ret = new File(jFileChooser1.getCurrentDirectory(), tmp);
            if (ret.exists()) {
                return null; // prevent overwriting
            }
            return ret;
        }
        return null;
    }

    @Override
    public String getName() {
        return "Select target file";
    }

    private String cleanupName(String runName) {
        if (runName.contains(File.separator)) {
            runName = runName.replace(File.separator, "_");
        }
        return runName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setControlButtonsAreShown(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        validateInput();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        validateInput();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        validateInput();
    }

    private void validateInput() {
        firePropertyChange("REVALIDATE", 0, 1);
    }
}
