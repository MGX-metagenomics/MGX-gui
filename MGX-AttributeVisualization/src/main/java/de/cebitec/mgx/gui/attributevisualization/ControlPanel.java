/*
 * ControlPanel.java
 *
 * Created on 06.01.2012, 14:12:52
 */
package de.cebitec.mgx.gui.attributevisualization;

import de.cebitec.mgx.gui.attributevisualization.data.VGroupManager;
import de.cebitec.mgx.gui.attributevisualization.data.VisualizationGroup;
import de.cebitec.mgx.gui.attributevisualization.filter.SortOrder;
import de.cebitec.mgx.gui.attributevisualization.filter.ToFractionFilter;
import de.cebitec.mgx.gui.attributevisualization.filter.VisFilterI;
import de.cebitec.mgx.gui.attributevisualization.filter.VisFilterSupport;
import de.cebitec.mgx.gui.attributevisualization.viewer.ViewerI;
import de.cebitec.mgx.gui.datamodel.AttributeType;
import de.cebitec.mgx.gui.datamodel.Distribution;
import de.cebitec.mgx.gui.datamodel.Pair;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.*;
import javax.swing.SwingWorker;
import org.openide.util.Lookup;

/**
 *
 * @author sjaenick
 */
public class ControlPanel extends javax.swing.JPanel implements PropertyChangeListener, ActionListener {

    private VGroupManager vgmgr = VGroupManager.getInstance();
    private AttributeVisualizationTopComponent topComponent;
    //
    //private AttributeType currentAttributeType = null;
    private List<Pair<VisualizationGroup, Distribution>> currentDistributions = null;
    //
    private AttributeTypeListModel attrListModel = new AttributeTypeListModel();
    private VisualizationTypeListModel vizListModel = new VisualizationTypeListModel();
    private SortTypeListModel sortListModel = new SortTypeListModel();

    /**
     * Creates new form ControlPanel
     */
    public ControlPanel() {
        initComponents();
        attributeTypeList.addActionListener(attrListModel);
        visualizationTypeList.addActionListener(vizListModel);
        updateButton.addActionListener(this);
    }

    public final void setTopComponent(AttributeVisualizationTopComponent tc) {
        this.topComponent = tc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortOrderGroup = new javax.swing.ButtonGroup();
        attributeTypeList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        visualizationTypeList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        fractions = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        sortCriteria = new javax.swing.JComboBox();
        sortAscending = new javax.swing.JRadioButton();
        sortDescending = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(300, 32767));
        setPreferredSize(new java.awt.Dimension(300, 504));

        attributeTypeList.setModel(attrListModel);
        attributeTypeList.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel1.text")); // NOI18N

        visualizationTypeList.setModel(vizListModel);
        visualizationTypeList.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel2.text")); // NOI18N

        updateButton.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.updateButton.text")); // NOI18N
        updateButton.setEnabled(false);

        fractions.setFont(new java.awt.Font("Dialog", 0, 10));
        fractions.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.fractions.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel3.text")); // NOI18N

        sortCriteria.setModel(sortListModel);

        sortOrderGroup.add(sortAscending);
        sortAscending.setFont(new java.awt.Font("Dialog", 0, 10));
        sortAscending.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.sortAscending.text")); // NOI18N

        sortOrderGroup.add(sortDescending);
        sortDescending.setFont(new java.awt.Font("Dialog", 0, 10));
        sortDescending.setSelected(true);
        sortDescending.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.sortDescending.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortDescending)
                    .addComponent(fractions)
                    .addComponent(sortAscending)
                    .addComponent(attributeTypeList, 0, 276, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(visualizationTypeList, 0, 276, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(sortCriteria, 0, 276, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attributeTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizationTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortAscending)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortDescending)
                .addGap(52, 52, 52)
                .addComponent(fractions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox attributeTypeList;
    private javax.swing.JCheckBox fractions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton sortAscending;
    private javax.swing.JComboBox sortCriteria;
    private javax.swing.JRadioButton sortDescending;
    private javax.swing.ButtonGroup sortOrderGroup;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox visualizationTypeList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName() != null) {
            System.err.println("control received event " + evt.getPropertyName() + " " + evt.getOldValue() + " " + evt.getNewValue());
        }

        String propName = evt.getPropertyName();

        if (propName.equals(VisualizationGroup.VISGROUP_CHANGED) || propName.equals(VGroupManager.VISGROUP_NUM_CHANGED)
                || propName.equals(VisualizationGroup.VISGROUP_ACTIVATED) || propName.equals(VisualizationGroup.VISGROUP_DEACTIVATED)) {
            // update attribute list model
            ((AttributeTypeListModel) attributeTypeList.getModel()).update();
        } else if (propName.equals(VisualizationGroup.VISGROUP_RENAMED)) {
            firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
        }
    }

    private final class AttributeTypeListModel extends BaseModel implements ActionListener {

        @Override
        public void update() {
            System.err.println("attrtypelist updating");
            // disable all downstream elements, including self
            attributeTypeList.setEnabled(false);
            visualizationTypeList.setEnabled(false);
            sortCriteria.setEnabled(false);
            updateButton.setEnabled(false);

            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    System.err.println(" - doInBackground()");
                    // remember selected attribute type
                    Object currentAttributeType = attributeTypeList.getSelectedItem();

                    System.err.println(" - doInBackground()  1  ");
                    // refresh the model
                    SortedSet<AttributeType> types = new TreeSet<AttributeType>();
                    System.err.println(" - doInBackground()  2  ");
                    System.err.println("getting vgroups..");
                    for (VisualizationGroup vg : vgmgr.getGroups()) {
                        System.err.println("querying vgroup " + vg.getName());
                        types.addAll(vg.getAttributeTypes());
                    }
                    System.err.println(" - doInBackground()  3  ");
                    content.clear();
                    for (AttributeType at : types) {
                        System.err.println(" - " + at);
                    }
                    content.addAll(types);
                    System.err.println(" - doInBackground()  4  ");

                    // if previously selected attribute type still exists, restore selection
                    if (currentAttributeType != null && content.contains(currentAttributeType)) {
                        setSelectedItem(currentAttributeType);
                    } else {
                        attributeTypeList.setSelectedIndex(0);
                    }
                    attributeTypeList.setEnabled(true);
                    System.err.println(" - doInBackground()  5  ");
                    return null;
                }

                @Override
                protected void done() {
                    System.err.println(" - done");
                    attributeTypeList.setEnabled(true);
                    fireContentsChanged();
                    System.err.println("attrtypelist updated");
                    super.done();
                }
            };
            worker.execute();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            // disable all downstream elements, excluding self
            visualizationTypeList.setEnabled(false);
            sortCriteria.setEnabled(false);
            updateButton.setEnabled(false);

            final AttributeType currentAttributeType = (AttributeType) attributeTypeList.getSelectedItem();

            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    currentDistributions = vgmgr.getDistributions(currentAttributeType.getName());
                    return null;
                }

                @Override
                protected void done() {
                    // we have the distribution, trigger update of viewer list
                    ((VisualizationTypeListModel) visualizationTypeList.getModel()).update();
                    super.done();

//                    // Check available viewers
//                    ViewerI lastSelectedViewer = (ViewerI) getSelectedItem();
//                    VisTypeListModel vtm = new VisTypeListModel();
//                    vtm.update();
//                    visualizationTypeList.setModel(vtm);
//                    visualizationTypeList.setSelectedIndex(0);
//
//                    if (vtm.getSize() > 0) {
//                        if (vtm.content.contains(lastSelectedViewer)) {
//                            visualizationTypeList.setSelectedItem(lastSelectedViewer);
//                        }
//                        visualizationTypeList.setEnabled(true);
//                        updateButton.setEnabled(true);
//                    } else {
//                        visualizationTypeList.setEnabled(false);
//                        updateButton.setEnabled(false);
//                    }
//
//                    // check available sort orders here
//                    String lastSelectedSortType = (String) sortCriteria.getSelectedItem();
//                    SortTypeListModel stm = new SortTypeListModel();
//                    stm.update();
//                    sortCriteria.setModel(stm);
//                    sortCriteria.setSelectedIndex(0);
//                    if (stm.getSize() > 0) {
//                        if (stm.content.contains(lastSelectedSortType)) {
//                            visualizationTypeList.setSelectedItem(lastSelectedSortType);
//                        }
//                        sortCriteria.setEnabled(true);
//                        updateButton.setEnabled(true);
//                    } else {
//                        sortCriteria.setEnabled(false);
//                        updateButton.setEnabled(false);
//                    }
                }
            };
            worker.execute();
        }
    }

    private final class VisualizationTypeListModel extends BaseModel implements ActionListener {

        @Override
        public void update() {
            System.err.println("viztypelist updating");
            // disable all downstream elements
            visualizationTypeList.setEnabled(false);
            sortCriteria.setEnabled(false);
            updateButton.setEnabled(false);

            // remember selected viewer
            final ViewerI lastSelectedViewer = (ViewerI) visualizationTypeList.getSelectedItem();

            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    AttributeType currentAttributeType = (AttributeType) attributeTypeList.getSelectedItem();

                    SortedSet<ViewerI> tmp = new TreeSet<ViewerI>();
                    for (ViewerI viewer : Lookup.getDefault().lookupAll(ViewerI.class)) {
                        if (viewer.canHandle(currentAttributeType)) {
                            tmp.add(viewer);
                        }
                    }
                    content.clear();
                    content.addAll(tmp);

                    // if previously selected attribute type still exists, restore selection
                    if (lastSelectedViewer != null && content.contains(lastSelectedViewer)) {
                        setSelectedItem(lastSelectedViewer);
                    } else {
                        visualizationTypeList.setSelectedIndex(0);
                    }

                    return null;
                }

                @Override
                protected void done() {
                    visualizationTypeList.setEnabled(true);
                    fireContentsChanged();
                    ((SortTypeListModel) sortCriteria.getModel()).update();
                    System.err.println("viztypelist updated");
                    super.done();
                }
            };
            worker.execute();
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private final class SortTypeListModel extends BaseModel {

        @Override
        public void update() {
            System.err.println("sortypelist updating");
            final Object lastSortOrder = visualizationTypeList.getSelectedItem();

            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    AttributeType currentAttributeType = (AttributeType) attributeTypeList.getSelectedItem();

                    SortedSet<String> tmp = new TreeSet<String>();
                    tmp.add(SortOrder.BY_VALUE);

                    if (currentAttributeType.getValueType() == AttributeType.VALUE_NUMERIC) {
                        tmp.add(SortOrder.BY_TYPE);
                    }

                    content.clear();
                    content.addAll(tmp);

                    // if previously selected element still exists, restore selection
                    if (lastSortOrder != null && content.contains(lastSortOrder)) {
                        setSelectedItem(lastSortOrder);
                    } else {
                        visualizationTypeList.setSelectedIndex(0);
                    }

                    return null;
                }

                @Override
                protected void done() {
                    sortCriteria.setEnabled(true);
                    updateButton.setEnabled(true);
                    fireContentsChanged();
                    System.err.println("sortypelist updated");
                    super.done();
                }
            };
            worker.execute(); 
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        final ViewerI viewer = (ViewerI) visualizationTypeList.getSelectedItem();
        viewer.setTitle("Distribution of " + (AttributeType) attributeTypeList.getSelectedItem());

        SwingWorker worker = new SwingWorker<Void, Void>() {

            private VisFilterI filterChain;

            @Override
            protected Void doInBackground() throws Exception {

                filterChain = viewer;

                if (fractions.isSelected()) {
                    VisFilterI fracFilter = new ToFractionFilter();
                    filterChain = VisFilterSupport.append(fracFilter, filterChain);
                }

                // sort filter
                SortOrder sorter = new SortOrder();
                sorter.setSortCriteria((String) sortCriteria.getSelectedItem());
                //sorter.setSortOrder(sortAscending.isSelected() ? SortOrder.ASCENDING : SortOrder.DESCENDING);

                viewer.sortAscending(sortAscending.isSelected());

                filterChain = VisFilterSupport.append(sorter, filterChain);

                return null;
            }

            @Override
            protected void done() {
                filterChain.filter(currentDistributions);
                topComponent.setVisualization(viewer.getComponent());
                super.done();
            }
        };

        worker.execute();
    }
}
