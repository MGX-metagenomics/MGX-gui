/*
 * ControlPanel.java
 *
 * Created on 06.01.2012, 14:12:52
 */
package de.cebitec.mgx.gui.attributevisualization;

import de.cebitec.mgx.gui.attributevisualization.data.VGroupManager;
import de.cebitec.mgx.gui.attributevisualization.data.VisualizationGroup;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EventListener;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author sjaenick
 */
public class ControlPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private VGroupManager vgmgr = VGroupManager.getInstance();
    private AttributeListModel attributeModel = new AttributeListModel();

    /** Creates new form ControlPanel */
    public ControlPanel() {
        initComponents();
        attributeList.setModel(attributeModel);
        attributeList.add
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attributeList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        visTypeList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();

        attributeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel1.text")); // NOI18N

        visTypeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel2.text")); // NOI18N

        updateButton.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.updateButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attributeList, 0, 129, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(visTypeList, 0, 129, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attributeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(updateButton)
                .addContainerGap(331, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox attributeList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox visTypeList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName() != null) {
            System.err.println("control received event " + evt.getPropertyName() + " " + evt.getOldValue() + " " + evt.getNewValue());
        }
        String propName = evt.getPropertyName();
        
        if (propName.equals(VisualizationGroup.VISGROUP_CHANGED) || propName.equals(VGroupManager.VISGROUP_NUM_CHANGED)
                || propName.equals(VisualizationGroup.VISGROUP_ACTIVATED) || propName.equals(VisualizationGroup.VISGROUP_DEACTIVATED)) {
            attributeModel.updateAttributes();
        } else if (propName.equals(VisualizationGroup.VISGROUP_RENAMED)) {
            // TODO
            firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
        }
    }

    private final class AttributeListModel extends AbstractListModel implements ComboBoxModel {

        private List<String> attributes = new ArrayList<String>();
        // index of selected entry
        int index = -1;

        @Override
        public void setSelectedItem(Object anItem) {
            for (int i = 0; i < attributes.size(); i++) {
                if (attributes.get(i) == anItem) {
                    index = i;
                    break;
                }
            }
        }

        @Override
        public Object getSelectedItem() {
            if (index >= 0) {
                return attributes.get(index);
            } else {
                return "";
            }
        }

        @Override
        public int getSize() {
            return attributes.size();
        }

        @Override
        public Object getElementAt(int index) {
            return attributes.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            listenerList.add(ListDataListener.class, l);
        }

        protected void fireContentsChanged() {
            ListDataEvent e = new ListDataEvent(this,
                    ListDataEvent.CONTENTS_CHANGED, -1, -1);
            EventListener[] listeners = getListeners(
                    ListDataListener.class);
            for (int i = 0; i > listeners.length; i++) {
                ((ListDataListener) listeners[i]).contentsChanged(e);
            }
        }

        public void updateAttributes() {
            Set<String> ret = new HashSet<String>();
            for (VisualizationGroup vg : vgmgr.getGroups()) {
                ret.addAll(vg.getAttributes());
            }
            List<String> tmp = new ArrayList<String>(ret);
            Collections.sort(tmp);
            attributes.clear();
            attributes.addAll(tmp);
            fireContentsChanged();
        }
    }
}
