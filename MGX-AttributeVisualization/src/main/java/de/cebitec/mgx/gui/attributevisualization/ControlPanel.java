/*
 * ControlPanel.java
 *
 * Created on 06.01.2012, 14:12:52
 */
package de.cebitec.mgx.gui.attributevisualization;

import de.cebitec.mgx.gui.attributevisualization.data.Distribution;
import de.cebitec.mgx.gui.attributevisualization.viewer.BarChartViewer;
import de.cebitec.mgx.gui.attributevisualization.data.VGroupManager;
import de.cebitec.mgx.gui.attributevisualization.viewer.ViewerI;
import de.cebitec.mgx.gui.attributevisualization.data.VisualizationGroup;
import de.cebitec.mgx.gui.attributevisualization.filter.*;
import de.cebitec.mgx.gui.datamodel.Attribute;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.*;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.openide.util.Lookup;

/**
 *
 * @author sjaenick
 */
public class ControlPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private VGroupManager vgmgr = VGroupManager.getInstance();
    private AttributeListListener attrListener = new AttributeListListener();
    private UpdateListener vCreator = new UpdateListener();
    private AttributeVisualizationTopComponent topComponent;
    //
    private String currentAttribute = null;
    private List<Pair<VisualizationGroup, Distribution>> currentDistributions = null;

    /**
     * Creates new form ControlPanel
     */
    public ControlPanel() {
        initComponents();
        attributeList.addActionListener(attrListener);
        updateButton.addActionListener(vCreator);
    }

    public void setTopComponent(AttributeVisualizationTopComponent tc) {
        this.topComponent = tc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attributeList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        visTypeList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        fractions = new javax.swing.JCheckBox();

        attributeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Loading attributes" }));
        attributeList.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel1.text")); // NOI18N

        visTypeList.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.jLabel2.text")); // NOI18N

        updateButton.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.updateButton.text")); // NOI18N
        updateButton.setEnabled(false);

        fractions.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        fractions.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "ControlPanel.fractions.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attributeList, 0, 129, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(visTypeList, 0, 129, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fractions))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attributeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fractions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox attributeList;
    private javax.swing.JCheckBox fractions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox visTypeList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName() != null) {
            System.err.println("control received event " + evt.getPropertyName() + " " + evt.getOldValue() + " " + evt.getNewValue());
        }
        String propName = evt.getPropertyName();

        if (propName.equals(VisualizationGroup.VISGROUP_CHANGED) || propName.equals(VGroupManager.VISGROUP_NUM_CHANGED)
                || propName.equals(VisualizationGroup.VISGROUP_ACTIVATED) || propName.equals(VisualizationGroup.VISGROUP_DEACTIVATED)) {
            AttributeListModel aModel = new AttributeListModel();
            aModel.updateAttributes();
            String lastSelectedAttribute = currentAttribute;
            attributeList.setModel(aModel);
            if (aModel.getSize() > 0) {
                attributeList.setSelectedIndex(0);

                // if possible, keep the last selected entry
                if (lastSelectedAttribute != null && aModel.attributes.contains(lastSelectedAttribute)) {
                    attributeList.setSelectedItem(lastSelectedAttribute);
                }
                attributeList.setEnabled(true);
            } else {
                attributeList.setEnabled(false);
                updateButton.setEnabled(false);
            }
        } else if (propName.equals(VisualizationGroup.VISGROUP_RENAMED)) {
            firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
        }
    }

    private final class AttributeListModel extends AbstractListModel implements ComboBoxModel {

        private List<String> attributes = new ArrayList<String>();
        // index of selected entry
        int index = -1;

        @Override
        public void setSelectedItem(Object anItem) {
            for (int i = 0; i < attributes.size(); i++) {
                if (attributes.get(i) == anItem) {
                    index = i;
                    break;
                }
            }
        }

        @Override
        public Object getSelectedItem() {
            if (index >= 0) {
                return attributes.get(index);
            } else {
                return "";
            }
        }

        @Override
        public int getSize() {
            return attributes.size();
        }

        @Override
        public Object getElementAt(int index) {
            return attributes.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            listenerList.add(ListDataListener.class, l);
        }

        protected void fireContentsChanged() {
            ListDataEvent e = new ListDataEvent(this,
                    ListDataEvent.CONTENTS_CHANGED, -1, -1);
            EventListener[] listeners = getListeners(
                    ListDataListener.class);
            for (int i = 0; i > listeners.length; i++) {
                ((ListDataListener) listeners[i]).contentsChanged(e);
            }
        }

        public void updateAttributes() {
            Set<String> ret = new HashSet<String>();
            for (VisualizationGroup vg : vgmgr.getGroups()) {
                ret.addAll(vg.getAttributes());
            }
            List<String> tmp = new ArrayList<String>(ret);
            Collections.sort(tmp);
            attributes.clear();
            attributes.addAll(tmp);
            fireContentsChanged();
        }
    }

    private final class VisTypeListModel extends AbstractListModel implements ComboBoxModel {

        private List<String> visTypes = new ArrayList<String>();
        // index of selected entry
        int index = -1;

        @Override
        public void setSelectedItem(Object anItem) {
            for (int i = 0; i < visTypes.size(); i++) {
                if (visTypes.get(i) == anItem) {
                    index = i;
                    break;
                }
            }
        }

        @Override
        public Object getSelectedItem() {
            if (index >= 0) {
                return visTypes.get(index);
            } else {
                return "";
            }
        }

        @Override
        public int getSize() {
            return visTypes.size();
        }

        @Override
        public Object getElementAt(int index) {
            return visTypes.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            listenerList.add(ListDataListener.class, l);
        }

        protected void fireContentsChanged() {
            ListDataEvent e = new ListDataEvent(this,
                    ListDataEvent.CONTENTS_CHANGED, -1, -1);
            EventListener[] listeners = getListeners(
                    ListDataListener.class);
            for (int i = 0; i > listeners.length; i++) {
                ((ListDataListener) listeners[i]).contentsChanged(e);
            }
        }

        public void update() {
            List<String> tmp = new ArrayList<String>();
            for (ViewerI viewer : Lookup.getDefault().lookupAll(ViewerI.class)) {
                tmp.add(viewer.getName());
            }
            Collections.sort(tmp);
            visTypes.clear();
            visTypes.addAll(tmp);
            fireContentsChanged();
        }
    }

    private final class AttributeListListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            currentAttribute = (String) attributeList.getSelectedItem();
            System.err.println("fetching dist for " + currentAttribute);
            currentDistributions = vgmgr.getDistributions(currentAttribute);

            // Check available viewers here

            String lastSelectedVisType = (String) visTypeList.getSelectedItem();
            VisTypeListModel vtm = new VisTypeListModel();
            vtm.update();
            visTypeList.setModel(vtm);
            visTypeList.setSelectedIndex(0);

            if (vtm.getSize() > 0) {
                if (vtm.visTypes.contains(lastSelectedVisType)) {
                    visTypeList.setSelectedItem(lastSelectedVisType);
                }
                visTypeList.setEnabled(true);
                updateButton.setEnabled(true);
            } else {
                visTypeList.setEnabled(false);
                updateButton.setEnabled(false);
            }
        }
    }

    private final class UpdateListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String vizType = (String) visTypeList.getSelectedItem();



            ViewerI view = new BarChartViewer();
            view.setTitle("Distribution of " + currentAttribute);


            VisFilter filterChain = view;


            if (fractions.isSelected()) {
                VisFilter fracFilter = new ToFractionFilter();
                filterChain = VisFilterSupport.append(fracFilter, filterChain);
            }

            // sort by abundance
            VisFilter abSorter = new AbundanceSortFilter();
            filterChain = VisFilterSupport.append(abSorter, filterChain);


            filterChain.filter(currentDistributions);
            topComponent.setVisualization(view.getComponent());
        }
    }
}
