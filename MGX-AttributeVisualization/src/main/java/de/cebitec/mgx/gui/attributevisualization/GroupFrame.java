/*
 * GroupFrame.java
 *
 * Created on Dec 28, 2011, 2:52:00 PM
 */
package de.cebitec.mgx.gui.attributevisualization;

import de.cebitec.mgx.gui.datamodel.ModelBase;
import de.cebitec.mgx.gui.datamodel.SeqRun;
import de.cebitec.mgx.gui.groups.VisualizationGroup;
import de.cebitec.mgx.gui.nodefactory.VisualizationGroupNodeFactory;
import java.awt.Color;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;

/**
 *
 * @author sj
 */
public class GroupFrame extends javax.swing.JInternalFrame implements ExplorerManager.Provider, ItemListener, ActionListener, DocumentListener {

    private VisualizationGroup vGroup = null;
    private ExplorerManager exmngr = new ExplorerManager();
    private VisualizationGroupNodeFactory vgnf;

    public GroupFrame(VisualizationGroup group) {
        this();
        this.vGroup = group;
        //
        // set initial properties
        //
        setTitle(vGroup.getName());
        displayName.setText(vGroup.getName());
        color.setBackground(vGroup.getColor());
        //
        // add listeners _after_ setting initial values
        //
        displayName.getDocument().addDocumentListener(this);
        color.addActionListener(this);
        active.addItemListener(this);
        //
        vgnf = new VisualizationGroupNodeFactory(vGroup);
        final AbstractNode root = new AbstractNode(Children.create(vgnf, true));
        exmngr.setRootContext(root);
        
        setDropTarget();
        setVisible(true);
    }

    /**
     * Creates new form GroupFrame
     */
    private GroupFrame() {
        initComponents();
    }

    @Override
    public void dispose() {
        VGroupManager.getInstance().removeGroup(vGroup);
        super.dispose();
    }

    private void setDropTarget() {
        DropTarget dt = new DropTarget(this, new DropTargetAdapter() {

            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                if (!dtde.isDataFlavorSupported(ModelBase.getNodeFlavor())) {
                    dtde.rejectDrag();
                } else {
                    try {
                        SeqRun sr = (SeqRun) dtde.getTransferable().getTransferData(ModelBase.getNodeFlavor());
                        if (sr == null || vGroup.getSeqRuns().contains(sr)) {
                            dtde.rejectDrag();
                        }
                    } catch (UnsupportedFlavorException | IOException ex) {
                        dtde.rejectDrag();
                    }
                }
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                try {
                    SeqRun sr = (SeqRun) dtde.getTransferable().getTransferData(ModelBase.getNodeFlavor());
                    if (vGroup.getSeqRuns().contains(sr)) {
                        dtde.rejectDrop();
                        return;
                    }
                    vGroup.addSeqRun(sr);
                    vgnf.refreshChildren();
                } catch (UnsupportedFlavorException | IOException ex) {
                    dtde.rejectDrop();
                }
            }
        });
        setDropTarget(dt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        active = new javax.swing.JCheckBox();
        displayName = new javax.swing.JTextField();
        color = new javax.swing.JButton();
        listView = new org.openide.explorer.view.ListView();

        setClosable(true);
        setMinimumSize(new java.awt.Dimension(160, 180));
        setPreferredSize(new java.awt.Dimension(160, 180));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        active.setSelected(true);
        active.setToolTipText("Show group?");
        jPanel2.add(active, java.awt.BorderLayout.WEST);

        displayName.setText("jTextField1");
        displayName.setToolTipText("Group name");
        jPanel2.add(displayName, java.awt.BorderLayout.CENTER);

        color.setToolTipText("Choose color");
        color.setMaximumSize(new java.awt.Dimension(16, 16));
        color.setMinimumSize(new java.awt.Dimension(16, 16));
        color.setPreferredSize(new java.awt.Dimension(16, 16));
        jPanel2.add(color, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);
        jPanel1.add(listView, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox active;
    private javax.swing.JButton color;
    private javax.swing.JTextField displayName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private org.openide.explorer.view.ListView listView;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return exmngr;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        vGroup.setActive(active.isSelected());
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    private void handleUpdate(DocumentEvent e) {
        Document d = e.getDocument();
        if (displayName.getDocument() == d) {
            setTitle(displayName.getText());
            vGroup.setName(displayName.getText());
            displayName.setBackground(Color.WHITE);
        }
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        final JColorChooser jcc = new JColorChooser(vGroup.getColor());
        //jcc.setChooserPanels(new AbstractColorChooserPanel[]{});
        JDialog dialog = JColorChooser.createDialog(new JFrame(), "Choose color", false, jcc, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                Color newColor = jcc.getColor();
                if (newColor != null) {
                    color.setBackground(newColor);
                    vGroup.setColor(newColor);
                }
            }
        }, null);
        dialog.setVisible(true);
    }
}
