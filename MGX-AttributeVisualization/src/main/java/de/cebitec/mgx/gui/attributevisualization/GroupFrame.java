/*
 * GroupFrame.java
 *
 * Created on Dec 28, 2011, 2:52:00 PM
 */
package de.cebitec.mgx.gui.attributevisualization;

import de.cebitec.mgx.api.groups.VGroupManagerI;
import de.cebitec.mgx.api.groups.VisualizationGroupI;
import de.cebitec.mgx.api.model.ModelBase;
import de.cebitec.mgx.api.model.SeqRunI;
import de.cebitec.mgx.gui.nodefactory.VisualizationGroupNodeFactory;
import de.cebitec.mgx.gui.nodes.SeqRunNode;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.text.Document;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.TreeTableView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.datatransfer.ExTransferable;
import org.openide.util.datatransfer.MultiTransferObject;

/**
 *
 * @author sj
 */
public class GroupFrame extends javax.swing.JInternalFrame implements ExplorerManager.Provider, ItemListener, ActionListener, DocumentListener, PropertyChangeListener {

    private final VisualizationGroupI vGroup;
    private final VGroupManagerI vgrpMgr;
    private final ExplorerManager exmngr = new ExplorerManager();
    private final VisualizationGroupNodeFactory vgnf;
    private final MyListView listView;

    public GroupFrame(VisualizationGroupI group, VGroupManagerI mgr) {
        initComponents();
        vGroup = group;
        vGroup.addPropertyChangeListener(this);
        //
        // needed to receive selectionChange events
        vgrpMgr = mgr;
        vgrpMgr.addPropertyChangeListener(this);
        //
        // set initial properties
        //
        setTitle(vGroup.getName() + " (" + vGroup.getNumSequences() + " sequences)");
        displayName.setText(vGroup.getName());
        color.setBackground(vGroup.getColor());
        //
        // add listeners _after_ setting initial values
        //
        displayName.getDocument().addDocumentListener(this);
        color.addActionListener(this);
        active.addItemListener(this);
        //
        addInternalFrameListener(new SelectionHandler());
        //
        vgnf = new VisualizationGroupNodeFactory(vGroup);

        final InvisibleRoot root = new InvisibleRoot(Children.create(vgnf, true));
        exmngr.setRootContext(root);

        listView = new MyListView();
        panel.add(listView, BorderLayout.CENTER);

        setVisible(true);
    }

    @Override
    public void doDefaultCloseAction() {
        super.doDefaultCloseAction();
    }

    public VisualizationGroupI getGroup() {
        return vGroup;
    }

//    /**
//     * Creates new form GroupFrame
//     */
//    private GroupFrame() {
//        initComponents();
//    }
    @Override
    public final void setTitle(String title) {
        setToolTipText(title);
        super.setTitle(title);
    }

    @Override
    public void dispose() {
        vGroup.removePropertyChangeListener(this);
        vgrpMgr.removePropertyChangeListener(this);
        vgrpMgr.removeGroup(vGroup);
        super.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        active = new javax.swing.JCheckBox();
        displayName = new javax.swing.JTextField();
        color = new javax.swing.JButton();

        setClosable(true);
        setResizable(true);
        setMinimumSize(new java.awt.Dimension(180, 200));
        setPreferredSize(new java.awt.Dimension(180, 200));

        panel.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        active.setSelected(true);
        active.setToolTipText("Show group?");
        jPanel2.add(active, java.awt.BorderLayout.WEST);

        displayName.setText("jTextField1");
        displayName.setToolTipText("Group name");
        jPanel2.add(displayName, java.awt.BorderLayout.CENTER);

        color.setToolTipText("Choose color");
        color.setMaximumSize(new java.awt.Dimension(16, 16));
        color.setMinimumSize(new java.awt.Dimension(16, 16));
        color.setPreferredSize(new java.awt.Dimension(16, 16));
        jPanel2.add(color, java.awt.BorderLayout.EAST);

        panel.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(panel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox active;
    private javax.swing.JButton color;
    private javax.swing.JTextField displayName;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return exmngr;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        vGroup.setActive(active.isSelected());
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        handleUpdate(e);
    }

    private void handleUpdate(DocumentEvent e) {
        Document d = e.getDocument();
        if (displayName.getDocument() == d) {
            vGroup.setName(displayName.getText());
//            DecimalFormat df = new DecimalFormat(",###"); // FIXME
//            setTitle(vGroup.getName() + " (" + df.format(vGroup.getNumSequences()) + " sequences)");
//            displayName.setBackground(Color.WHITE);
        }
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        final JColorChooser jcc = new JColorChooser(vGroup.getColor());
        //jcc.setChooserPanels(new AbstractColorChooserPanel[]{});
        JDialog dialog = JColorChooser.createDialog(new JFrame(), "Choose color", false, jcc, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                Color newColor = jcc.getColor();
                if (newColor != null) {
                    color.setBackground(newColor);
                    vGroup.setColor(newColor);
                }
            }
        }, null);
        dialog.setVisible(true);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case VisualizationGroupI.VISGROUP_RENAMED:
                DecimalFormat df = new DecimalFormat(",###");
                setTitle(vGroup.getName() + " (" + df.format(vGroup.getNumSequences()) + " sequences)");
                displayName.setBackground(Color.WHITE);
                break;
            case VisualizationGroupI.VISGROUP_ACTIVATED:
                //ignore
                break;
            case VisualizationGroupI.VISGROUP_DEACTIVATED:
                //ignore
                break;
            case VisualizationGroupI.VISGROUP_ATTRTYPE_CHANGED:
                break; //ignore
            case VisualizationGroupI.VISGROUP_HAS_DIST:
                // ignore
                break;
            case VisualizationGroupI.VISGROUP_CHANGED:
                setTitle(vGroup.getName() + " (" + vGroup.getNumSequences() + " sequences)");
                break;
            case VGroupManagerI.VISGROUP_SELECTION_CHANGED:
                try {
                    setSelected(vGroup == evt.getNewValue());
                } catch (PropertyVetoException ex) {
                    Exceptions.printStackTrace(ex);
                }
                break;
            case ModelBase.OBJECT_MODIFIED:
                repaint();
                break;
            default:
                System.err.println("GroupFrame for " + vGroup.getName() + " got event " + evt.getPropertyName());
        }
    }

    private final class SelectionHandler implements InternalFrameListener {

        @Override
        public void internalFrameOpened(InternalFrameEvent e) {
        }

        @Override
        public void internalFrameClosing(InternalFrameEvent e) {
        }

        @Override
        public void internalFrameClosed(InternalFrameEvent e) {
        }

        @Override
        public void internalFrameIconified(InternalFrameEvent e) {
        }

        @Override
        public void internalFrameDeiconified(InternalFrameEvent e) {
        }

        @Override
        public void internalFrameActivated(InternalFrameEvent e) {
            vgrpMgr.setSelectedGroup(vGroup);
        }

        @Override
        public void internalFrameDeactivated(InternalFrameEvent e) {
        }
    }

    private final class MyListView extends TreeTableView implements PropertyChangeListener {

        public MyListView() {
            super();
            setRootVisible(false);
            setDropTarget(true);
            //setShowParentNode(true);
            setAllowedDropActions(DnDConstants.ACTION_COPY + DnDConstants.ACTION_REFERENCE);
            setDropTarget();
            vGroup.addPropertyChangeListener(this);
        }

        private void setDropTarget() {
            DropTarget dt = new DropTarget(this, new DropTargetAdapter() {
                @Override
                public void dragEnter(DropTargetDragEvent dtde) {
                    Transferable t = dtde.getTransferable();
                    if (t.isDataFlavorSupported(ExTransferable.multiFlavor)) {
                        try {
                            final MultiTransferObject mto = (MultiTransferObject) t.getTransferData(ExTransferable.multiFlavor);
                            if (mto.areDataFlavorsSupported(new DataFlavor[]{SeqRunI.DATA_FLAVOR})) {
                                int elems = mto.getCount();
                                for (int i = 0; i < elems; i++) {
                                    SeqRunI run = (SeqRunI) mto.getTransferData(i, SeqRunI.DATA_FLAVOR);
                                    if (vGroup.getSeqRuns().contains(run)) {
                                        dtde.rejectDrag();
                                        return;
                                    }
                                }
                                dtde.acceptDrag(DnDConstants.ACTION_COPY);
                                return;
                            }
                        } catch (UnsupportedFlavorException | IOException e) {
                        }
                    }

                    if (dtde.isDataFlavorSupported(SeqRunI.DATA_FLAVOR)) {
                        try {
                            SeqRunI run = (SeqRunI) dtde.getTransferable().getTransferData(SeqRunI.DATA_FLAVOR);
                            if (run != null && !vGroup.getSeqRuns().contains(run)) {
                                dtde.acceptDrag(DnDConstants.ACTION_COPY);
                                return;
                            }
                        } catch (UnsupportedFlavorException | IOException ex) {
                        }
                    }

                    dtde.rejectDrag();
                }

                @Override
                public void drop(DropTargetDropEvent dtde) {
                    Transferable t = dtde.getTransferable();
                    if (t.isDataFlavorSupported(ExTransferable.multiFlavor)) {
                        try {
                            final MultiTransferObject mto = (MultiTransferObject) t.getTransferData(ExTransferable.multiFlavor);
                            if (mto.areDataFlavorsSupported(new DataFlavor[]{SeqRunI.DATA_FLAVOR})) {
                                int elems = mto.getCount();
                                for (int i = 0; i < elems; i++) {
                                    SeqRunI run = (SeqRunI) mto.getTransferData(i, SeqRunI.DATA_FLAVOR);
                                    if (vGroup.getSeqRuns().contains(run)) {
                                        dtde.rejectDrop();
                                        return;
                                    }
                                }

                                try {
                                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                    Set<SeqRunNode> newRuns = new HashSet<>();
                                    for (int i = 0; i < elems; i++) {
                                        SeqRunI run = (SeqRunI) mto.getTransferData(i, SeqRunI.DATA_FLAVOR);
                                        SeqRunNode srn = new SeqRunNode(run.getMaster(), run, Children.LEAF);
                                        newRuns.add(srn);
                                        
                                    }
                                    vgnf.addNodes(newRuns);
                                } finally {
                                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                                }
                                dtde.dropComplete(true);
                                return;
                            }
                        } catch (UnsupportedFlavorException | IOException e) {
                        }
                    }

                    if (dtde.isDataFlavorSupported(SeqRunI.DATA_FLAVOR)) {
                        try {
                            SeqRunI run = (SeqRunI) dtde.getTransferable().getTransferData(SeqRunI.DATA_FLAVOR);
                            if (run != null && !vGroup.getSeqRuns().contains(run)) {
                                SeqRunNode srn = new SeqRunNode(run.getMaster(), run, Children.LEAF);
                                vgnf.addNode(srn);
                                dtde.dropComplete(true);
                                return;
                            }
                        } catch (UnsupportedFlavorException | IOException ex) {
                        }
                    }

                    dtde.rejectDrop();
                }
            });
            setDropTarget(dt);

        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            //System.err.println("ListView got "+evt.getPropertyName());
        }
    }

    private final class InvisibleRoot extends AbstractNode {

        public InvisibleRoot(Children children, Lookup lookup) {
            super(children, lookup);
        }

        public InvisibleRoot(Children children) {
            super(children);
        }
    }
}
