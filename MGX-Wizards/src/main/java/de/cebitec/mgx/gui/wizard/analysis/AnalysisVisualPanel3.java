package de.cebitec.mgx.gui.wizard.analysis;

import de.cebitec.mgx.api.model.JobParameterI;
import de.cebitec.mgx.api.model.MGXFileI;
import de.cebitec.mgx.api.model.MGXReferenceI;
import de.cebitec.mgx.gui.wizard.analysis.misc.ParameterPanel;
import java.awt.Component;
import java.io.File;
import java.io.Serial;
import java.util.List;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

public final class AnalysisVisualPanel3 extends JPanel {

    @Serial
    private static final long serialVersionUID = 1L;
    
    private final List<MGXReferenceI> references;

    /**
     * Creates new form AnalysisVisualPanel3
     */
    public AnalysisVisualPanel3(List<MGXReferenceI> refs) {
        initComponents();
        references = refs;
        paramlist.setCellRenderer(new JobParameterRenderer());
    }

    @Override
    public String getName() {
        return "Confirm selection";
    }

    public void setToolName(String name) {
        toolname.setText(name);
    }

    public void setParameters(List<JobParameterI> jps) {
        paramlist.setListData(jps.toArray(new JobParameterI[]{}));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        toolname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        paramlist = new javax.swing.JList<JobParameterI>();

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AnalysisVisualPanel3.class, "AnalysisVisualPanel3.jLabel1.text")); // NOI18N

        toolname.setEditable(false);
        toolname.setText(org.openide.util.NbBundle.getMessage(AnalysisVisualPanel3.class, "AnalysisVisualPanel3.toolname.text")); // NOI18N

        jScrollPane1.setViewportView(paramlist);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toolname, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(toolname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<JobParameterI> paramlist;
    private javax.swing.JTextField toolname;
    // End of variables declaration//GEN-END:variables

    private final class JobParameterRenderer implements ListCellRenderer<JobParameterI> {

        private final ParameterPanel panel = new ParameterPanel();
        protected Border noFocusBorder = LineBorder.createGrayLineBorder();
        protected Border focusBorder = LineBorder.createBlackLineBorder();

        @Override
        public Component getListCellRendererComponent(JList<? extends JobParameterI> list, JobParameterI jp, int index, boolean isSelected, boolean cellHasFocus) {
            panel.setParameterName(jp.getParameterName());
            panel.setValue(jp.getParameterValue());

            // different handling for reference genomes..
            if (jp.getType().equals("ConfigMGXReference")) {
                MGXReferenceI r = null;
                if (references != null) {
                    for (MGXReferenceI ref : references) {
                        if (String.valueOf(ref.getId()).equals(jp.getParameterValue())) {
                            r = ref;
                            break;
                        }
                    }
                }
                assert r != null;
                panel.setValue(r.getName());
            }

            if (jp.getType().equals("ConfigFile")) {
                String displayName = jp.getParameterValue();
                if (displayName.startsWith(MGXFileI.ROOT_PATH + MGXFileI.separator)) {
                    displayName = displayName.substring(2);
                }
                displayName = displayName.replace(MGXFileI.separator, File.separator);
                panel.setValue(displayName);
            }

            panel.setDescription(jp.getUserDescription());
            panel.setBorder(isSelected ? focusBorder : noFocusBorder);
            return panel;
        }
    }
}
