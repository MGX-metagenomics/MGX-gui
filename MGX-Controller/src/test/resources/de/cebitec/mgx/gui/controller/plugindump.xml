<?xml version="1.0"?>
<plugins xmlns="http://biograph.cebitec.uni-bielefeld.de/definition">
  <plugin name="Conveyor.Alignment" version="" description="Nodes and data types for generic alignments, mostly produced by external tools" company="">
    <datatypes>
      <datatype name="Conveyor.Alignment.Alignment`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.AnnotatableAlignment`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.SimpleAlignment`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.EmptyAlignment`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.SimpleAlignment`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Alignment.AlignmentMembers`1" displayname="AlignmentMembers" description="converts an alignment to a list of its member sequences" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.ConcatAAAlignment`4" displayname="ConcatAAAlignment" description="concatenates the sequences of two alignments and returns the resulting alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="linker" type="ConfigString" description="linker sequence to put into the alignment" optional="1"/>
        </configurations>
        <links>
          <link name="first" description="first alignment" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Alignment.Alignment`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="second" description="second alignment" is_input="1">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Alignment.Alignment`1">
                <typeParameters>
                  <type position="3" name="W">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="result" description="resulting alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.ConcatDNAAlignment`4" displayname="ConcatDNAAlignment" description="concatenates the sequences of two alignments and returns the resulting alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="linker" type="ConfigString" description="linker sequence to put into the alignment" optional="1"/>
        </configurations>
        <links>
          <link name="first" description="first alignment" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Alignment.Alignment`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="second" description="second alignment" is_input="1">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Alignment.Alignment`1">
                <typeParameters>
                  <type position="3" name="W">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="result" description="resulting alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.CreateAlignment`1" displayname="CreateAlignment" description="converts a list of sequences to an alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.CreateEmptyAAAlignment" displayname="CreateEmptyAAAlignment" description="creates an empty amino acid alignment" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Alignment.EmptyAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.CreateEmptyDNAAlignment" displayname="CreateEmptyDNAAlignment" description="creates an empty nucleotide alignment" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Alignment.EmptyAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.DifferentSites`1" displayname="DifferentDNASites" description="calculates the number of different sites (S) in the alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="ignoreUnknown" type="ConfigBoolean" description="ignores columns with unknown bases" default="True" optional="0"/>
        </configurations>
        <links>
          <link name="alignment" description="alignment to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="sites" description="the number of different sites" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.GetNthMember`1" displayname="GetNthMember" description="extracts the Nth member of an alignments" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="memberIndex" type="ConfigInteger" description="index of the member to extract, e.g. 0 for first sequence, 1 for second" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.MeanPairWiseDifferenSites`1" displayname="MeanPairWiseDifferentSites" description="calculates the average number of different sites between to two sequences (Pi)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="ignoreUnknown" type="ConfigBoolean" description="ignore columns with unknown bases" default="True" optional="0"/>
        </configurations>
        <links>
          <link name="alignment" description="alignment to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="pi" description="the average number of different sites" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.OrderAlignment`1" displayname="OrderAlignment" description="reorders the sequences of an alignment to have a certain sequences as first" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="checkBlastNames" type="ConfigBoolean" description="also checks additionally for blast-compliant names (lcl|XYZ and XYZ)" optional="0"/>
        </configurations>
        <links>
          <link name="alignmentIn" description="alignment to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="sequenceName" description="name of sequence to put as first in the result" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="alignmentOut" description="resulting alignment" is_input="0">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Alignment`1.AlignmentLength" displayname="Alignment`1.AlignmentLength" description="returns the number of columns of the alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Alignment`1.NumberOfSequences" displayname="Alignment`1.NumberOfSequences" description="returns the number of sequences in the alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Alignment.Applications" version="" description="Wrappers for external application for generating sequence alignments" company="CeBiTec, Bielefeld University">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.Alignment.Applications.ClustalWAA`1" displayname="ClustalWAA" description="creates a DNA alignment with ClustalW" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="the aligned sequences" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaAASequence"/>
              </typeParameters>
            </type>
          </link>
          <link name="seqList" description="sequences to align" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags>
          <tag>alignment</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.ClustalWDNA`1" displayname="ClustalWDNA" description="creates a DNA using ClustalW" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="the aligned sequences" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaDNASequence"/>
              </typeParameters>
            </type>
          </link>
          <link name="seqList" description="sequences to align" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags>
          <tag>alignment</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.GBlocksAA`1" displayname="GBlockAA" description="processes AA alignments with Gblocks" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignmentIn" description="alignment to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="alignmentOut" description="alignment with masked positions" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaAASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.GBlocksDNA`1" displayname="GBlockDNA" description="processes DNA alignments with Gblocks" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignmentIn" description="alignment to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="alignmentOut" description="alignment with masked positions" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.MuscleAA`1" displayname="MuscleAA" description="calculates a AA alignment based on muscle" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="findDiags" type="ConfigBoolean" description="Optimize speed for similar sequences by finding diagonals" optional="1"/>
          <config_item name="maxIters" type="ConfigInteger" description="Maximum number of iterations" default="16" optional="1"/>
        </configurations>
        <links>
          <link name="alignment" description="the generated alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaAASequence"/>
              </typeParameters>
            </type>
          </link>
          <link name="seqList" description="sequences to align" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags>
          <tag>alignment</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.MuscleDNA`1" displayname="MuscleDNA" description="calculates a DNA alignment using muscle" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="findDiags" type="ConfigBoolean" description="Optimize speed for similar sequences by finding diagonals" optional="1"/>
          <config_item name="maxIters" type="ConfigInteger" description="Maximum number of iterations" default="16" optional="1"/>
        </configurations>
        <links>
          <link name="alignment" description="the generated alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaDNASequence"/>
              </typeParameters>
            </type>
          </link>
          <link name="seqList" description="sequences to align" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags>
          <tag>alignment</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.RevTrans`2" displayname="RevTrans" description="converts a protein alignment to a codon-based DNA alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="dnaSequences" description="the dna sequences used to generate the protein alignments" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="proteinAlignment" description="the protein alignment" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="dnaAlignment" description="the resulting codon-based DNA alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioIO.FastaDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Applications.RevTransDB`2" displayname="RevTransDB" description="converts a protein alignment to a codon-based DNA alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            <restrictedTo name="Conveyor.BioIO.ParseableSequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="dnaDB" description="the dna sequence database" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  <restrictedTo name="Conveyor.BioIO.ParseableSequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="proteinAlignment" description="the protein alignment" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="dnaAlignment" description="the resulting codon-based DNA alignment" is_input="0">
            <type name="Conveyor.Alignment.SimpleAlignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  <restrictedTo name="Conveyor.BioIO.ParseableSequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Alignment.IO" version="" description="IO-related classes for alignment file formats" company="CeBiTec, Bielefeld University">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.Alignment.IO.ReadAAPhylipFile" displayname="ReadAAPhylipFile" description="reads AA sequence alignments in phylip format from a file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="alignmentOut" description="the read alignment" is_input="0">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.IO.ReadDNAPhylipFile" displayname="ReadDNAPhylipFile" description="reads DNA sequence alignments in phylip format from a file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="alignmentOut" description="the read alignment" is_input="0">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.IO.WritePhylipFile`1" displayname="WritePhylipFile" description="creates a phylip formatted file for storing (multiple) alignments" section="output">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="the alignments to write to the file" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.IO.ReadAAStockholmFile" displayname="ReadAAStockholmFile" description="Reads amino acid alignments from a Stockholm formatted file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="alignmentOut" description="the read alignment" is_input="0">
            <type name="Conveyor.Alignment.AnnotatableAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.IO.ReadDNAStockholmFile" displayname="ReadDNAStockholmFile" description="Reads DNA alignments from a Stockholm formatted file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="alignmentOut" description="the read alignment" is_input="0">
            <type name="Conveyor.Alignment.AnnotatableAlignment`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Alignment.Pairwise" version="" description="Method and data classes for generating pairwise alignments within Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Alignment.Pairwise.AlignedAASequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Pairwise.AlignedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.Pairwise.AlignedDNASequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Pairwise.AlignedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.Pairwise.AlignedSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.Pairwise.AlignmentScoring`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.Pairwise.PairwiseAAAlignment`2">
        <typeParameters>
          <type position="0" name="S">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
          <type position="1" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
            <typeParameters>
              <type name="Conveyor.Alignment.Pairwise.AlignedAASequence`1">
                <typeParameters>
                  <type position="0" name="S">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                  </type>
                </typeParameters>
              </type>
              <type name="Conveyor.Alignment.Pairwise.AlignedAASequence`1">
                <typeParameters>
                  <type position="1" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                  </type>
                </typeParameters>
              </type>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
        <typeParameters>
          <type position="0" name="S">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            <restrictedTo position="2" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="1" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            <restrictedTo position="2" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type position="2" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Alignment.Pairwise.PairwiseDNAAlignment`2">
        <typeParameters>
          <type position="0" name="S">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
            <typeParameters>
              <type name="Conveyor.Alignment.Pairwise.AlignedDNASequence`1">
                <typeParameters>
                  <type position="0" name="S">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </type>
              <type name="Conveyor.Alignment.Pairwise.AlignedDNASequence`1">
                <typeParameters>
                  <type position="1" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </type>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="An alignment scoring scheme with one uniform score for matching and mismatching" name="Conveyor.Alignment.Pairwise.UniformScoring`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Pairwise.AlignmentScoring`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Alignment.Pairwise.BlastDNAScoringSchema" displayname="Conveyor.Alignment.Pairwise.BlastDNAScoringSchema" description="BLAST-like scoring schema for DNA sequence: match 1, mismatch -3, gap open -5, gap extend -2" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="An alignment scoring scheme with one uniform score for matching and mismatching" name="Conveyor.Alignment.Pairwise.UniformScoring`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Pairwise.GetMatchingRange`4" displayname="Conveyor.Alignment.Pairwise.GetMatchingRange`4" description="returns the maximum range of matches of a pairwise alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            <restrictedTo position="3" name="W">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            <restrictedTo position="3" name="W">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  <restrictedTo position="3" name="W">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </restrictedTo>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  <restrictedTo position="3" name="W">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="alignment to process; " is_input="1">
            <type position="2" name="V">
              <restrictedTo description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    <restrictedTo position="3" name="W">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </restrictedTo>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    <restrictedTo position="3" name="W">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </restrictedTo>
                  </type>
                  <type position="3" name="W">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="start" description="start position (1-based) of the matching part" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="stop" description="stop position (1-based) of the matching part" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Pairwise.GlobalDNAAlignment`3" displayname="Conveyor.Alignment.Pairwise.GlobalDNAAlignment`3" description="Creates a global alignment of two sequence" section="processing">
        <typeParameters>
          <type position="0" name="S">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Pairwise.AlignmentScoring`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="freeEndGaps" type="ConfigBoolean" description="allows overhanging bases at the ends of the sequence" optional="0"/>
        </configurations>
        <links>
          <link name="first" description="first sequence" is_input="1">
            <type position="0" name="S">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="second" description="second sequence" is_input="1">
            <type position="1" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="scoring" description="scoring schema for alignment" is_input="1">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Alignment.Pairwise.AlignmentScoring`1">
                <typeParameters>
                  <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="alignment" description="alignment of both sequences" is_input="0">
            <type name="Conveyor.Alignment.Pairwise.PairwiseDNAAlignment`2">
              <typeParameters>
                <type position="0" name="S">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Pairwise.MatchingPositions`1" displayname="Conveyor.Alignment.Pairwise.MatchingPositions`1" description="calculates the number of matching positions in an alignment" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="alignments to process" is_input="1">
            <type name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="matches" description="number of matches" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Pairwise.NumberOfMatches`3" displayname="Conveyor.Alignment.Pairwise.NumberOfMatches`3" description="calculates the number of matching positions in the alignment" section="processing">
        <typeParameters>
          <type position="0" name="S">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            <restrictedTo position="2" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="1" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            <restrictedTo position="2" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="alignment" description="alignment to process" is_input="1">
            <type description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
              <typeParameters>
                <type position="0" name="S">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  <restrictedTo position="2" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="1" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  <restrictedTo position="2" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="matchingPositions" description="number of matching positions" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Alignment.Pairwise.UniformDNAScoringSchema" displayname="Conveyor.Alignment.Pairwise.UniformDNAScoringSchema" description="DNA scoring scheme using uniform scores for matches/mismatches" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="matchScore" type="ConfigDouble" description="score for match" optional="0"/>
          <config_item name="mismatchScore" type="ConfigDouble" description="score for mismatch" optional="0"/>
          <config_item name="gapOpenScore" type="ConfigDouble" description="score for opening a gap" optional="0"/>
          <config_item name="gapExtendScore" type="ConfigDouble" description="score for extending a gap" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="An alignment scoring scheme with one uniform score for matching and mismatching" name="Conveyor.Alignment.Pairwise.UniformScoring`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Annotation" version="" description="Definition of annotatable objects" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Annotation.Annotatable">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Annotation.CopyAnnotationField`3" displayname="CopyAnnotationField" description="copies the content of a given annotation field from a template to the input sequence, or the default value if the field is not set in the template" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="the sequence to add the annotation to" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="output" description="the sequence after adding the annotation" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="template" description="the template sequence to get the annotation value from" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="field" description="the annotation field to copy" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
          <link name="defaultValue" description="the default value if the annotation field is not set in the template" is_input="1">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.DeleteAnnotationField`1" displayname="DeleteAnnotationField" description="removes the given annotation field if it exists" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.GetAnnotationField`1" displayname="GetAnnotationField" description="returns the current value of an annotation field or results in an error if no such field exists" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="annotatable" description="annotatable object to examine" is_input="1">
            <type name="Conveyor.Annotation.Annotatable"/>
          </link>
          <link name="fieldName" description="field to retrieve" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
          <link name="value" description="the value of the field" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.HasAnnotationField" displayname="HasAnnotationField" description="Returns true if the annotatable object contains an annotation with the given name" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="annotation" description="annotatable object to examine" is_input="1">
            <type name="Conveyor.Annotation.Annotatable"/>
          </link>
          <link name="fieldName" description="field to check" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
          <link name="hasAnnotation" description="flag to indicate whether the annotation contains the field" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.SelectAnnotationField" displayname="SelectAnnotationField" description="selects one of the available annotation fields" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="field" type="ConfigSelection`2" description="the field to use" optional="0">
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.description" description="description: free text description of a sequence"/>
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.function" description="function: free text description of the function of a sequence"/>
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.taxName" description="tax name: the taxonomic name of the species a sequence is taken from"/>
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.geneNameField" description="gene name: the short gene name like gyrB, dnaA"/>
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.productField" description="product: the protein resulting from translating a coding sequence"/>
            <choice value="Conveyor.BioinformaticsTypes.SequenceAnnotationFields.ecNumberField" description="ec number: the definition of a function by a enzyme classification number"/>
            <choice value="Conveyor.Database.DatabaseFields.ecNumberField" description="ec numbers: list of enzyme classes/enzymes annotated for the sequence"/>
            <choice value="Conveyor.Database.DatabaseFields.accessionNumbers" description="accession numbers: list of accession numbers (strings), may be empty"/>
            <choice value="Conveyor.Database.DatabaseFields.ecNumberField" description="ec numbers: list of enzyme classes/enzymes annotated for the sequence"/>
            <choice value="Conveyor.Database.DatabaseFields.accessionNumbers" description="accession numbers: list of accession numbers (strings), may be empty"/>
            <choice value="Conveyor.Database.UniProt.UniProtEntry.proteinExistence" description="proteinExistence: confidence in the existence of a protein as described by the entry"/>
            <choice value="Conveyor.Database.UniProt.UniProtEntry.proteinExistence" description="proteinExistence: confidence in the existence of a protein as described by the entry"/>
            <choice value="Conveyor.Geneprediction.Configuration.glimmerScore" description="glimmer score: the score of the gene prediction tool glimmer3"/>
            <choice value="Conveyor.Geneprediction.Configuration.criticaScore" description="critica score: the score of the gene prediction tool critica"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.SetAnnotationField`2" displayname="SetAnnotationField" description="sets an annotation field in a annotatable object. Old values are discarded if existing." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="the annotatable object to add a value to" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="fieldName" description="the name of the field to set" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
          <link name="value" description="the value to set" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="the annotatable object after adding the value" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Annotation.CopyAnnotationFieldIfExistent`2" displayname="CopyAnnotationFieldIfExistent" description="copies the content of a given annotation field from a template to the input sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="the sequence to add the annotation to" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="output" description="the sequence after adding the annotation" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="template" description="the template sequence to get the annotation value from" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Annotation.Annotatable"/>
            </type>
          </link>
          <link name="field" description="the annotation field to copy" is_input="1">
            <type description="a definition of a field of an annotation" name="Conveyor.Annotation.AnnotationField"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.BioinformaticsTypes" version="" description="Base type definitions for bioinformatic data objects like sequences etc." company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.BioinformaticsTypes.AASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="A sequence composed of two sub sequence" name="Conveyor.BioinformaticsTypes.ConcatenatedSequence`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.DNASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.Homology">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A DNA sequence created by inserting one sequence into another at a given position" name="Conveyor.BioinformaticsTypes.InsertedSequence`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="Reverse complement of a DNA sequence" name="Conveyor.BioinformaticsTypes.ReverseComplementedSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="Reversed sequence of a given DNA sequence" name="Conveyor.BioinformaticsTypes.ReversedSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.Sequence">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SequenceBase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SimpleAASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SimpleDNASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleTranslatedAASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SimpleTranslatableSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            <restrictedTo name="Conveyor.Annotation.Annotatable"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Translatable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="DNA sequence with a part spliced out" name="Conveyor.BioinformaticsTypes.SplicedSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.Translatable`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.BackTranslatable`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.SimpleTranslatedAASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioinformaticsTypes.TranslatedAASequenceBase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.BioinformaticsTypes.ConcatenateSequences`2" displayname="ConcatenateSequences" description="creates a new sequence by concatenating two given ones" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="name" description="name of the concatenated sequence" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="first" description="first sequence" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="second" description="second sequence" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="concatenated" description="result of concatenation" is_input="0">
            <type description="A sequence composed of two sub sequence" name="Conveyor.BioinformaticsTypes.ConcatenatedSequence`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.CreateAASequence" displayname="CreateAASequence" description="creates a AA sequence data object from a name and a sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="name" description="name of sequence" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="seq" description="the sequence itself as string" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="sequence" description="the created sequence object" is_input="0">
            <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.CreateDNASequence" displayname="CreateDNASequence" description="creates a DNA sequence data object from a name and a sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="name" description="name of sequence" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="seq" description="the sequence itself as string" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="sequence" description="the created sequence object" is_input="0">
            <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.CreateTranslatableSequence" displayname="CreateTranslatableSequence" description="creates a translatable DNA sequence data object from a name and a sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="name" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="seq" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="sequence" description="" is_input="0">
            <type name="Conveyor.BioinformaticsTypes.SimpleTranslatableSequence`1">
              <typeParameters>
                <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.ExtractSequence" displayname="ExtractSequence" description="returns the plain textual sequence of a sequence data object" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.GetSubSequence`2" displayname="GetSubSequence" description="returns a part of the given sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="from" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="to" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="subSequence" description="" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.InsertSequence`2" displayname="Conveyor.BioinformaticsTypes.InsertSequence`2" description="Inserts a sequence into another sequence at a given position" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to insert into" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="insert" description="sequence to be inserted" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="position" description="position to insert sequence at" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="result of the insert" is_input="0">
            <type description="A DNA sequence created by inserting one sequence into another at a given position" name="Conveyor.BioinformaticsTypes.InsertedSequence`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.MaskStopCodons" displayname="MaskStopCodons" description="replaces stop codon in the sequence by three 'N's" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.ReverseComplementSequence`1" displayname="Conveyor.BioinformaticsTypes.ReverseComplementSequence`1" description="Creates a new DNA sequence using the reversed complemented input sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="Reverse complement of a DNA sequence" name="Conveyor.BioinformaticsTypes.ReverseComplementedSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.ReverseSequence`1" displayname="Conveyor.BioinformaticsTypes.ReverseSequence`1" description="Creates a new DNA sequence using the reversed input sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="Reversed sequence of a given DNA sequence" name="Conveyor.BioinformaticsTypes.ReversedSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.SpliceSequence`1" displayname="SpliceSequence" description="Returns a DNA sequence with a given parts spliced out" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to process" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="from" description="start of spliced range" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="to" description="end of spliced range" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="splicedSequence" description="sequence after splicing" is_input="0">
            <type description="DNA sequence with a part spliced out" name="Conveyor.BioinformaticsTypes.SplicedSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.TranslateSequence`1" displayname="TranslateSequence" description="translates a DNA sequence to amino acids" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Translatable`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.SixFrameTranslate`3" displayname="SixFrameTranslate" description="six-frame-translate a nucleotide sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="Nucleotide sequence" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
                      <typeParameters>
                        <type position="2" name="V">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                        </type>
                      </typeParameters>
                    </restrictedTo>
                  </type>
                  <type position="2" name="V">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="amino-acid translations" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.BackTranslate`1" displayname="Conveyor.BioinformaticsTypes.BackTranslate`1" description="Translates the relative position on the AA sequence back to the DNA sequence sequence it is based on." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.BackTranslatable`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticsTypes.GetTranslationSource`2" displayname="GetTranslationSource" description="six-frame-translate a nucleotide sequence" section="processing">
        <typeParameters>
          <type position="0" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
              <typeParameters>
                <type position="1" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="V">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="aa sequence" is_input="1">
            <type position="0" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
                <typeParameters>
                  <type position="1" name="V">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="source sequence" is_input="0">
            <type position="1" name="V">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticTypes.SortByEValue`1" displayname="SortByEValue" description="sort list of homology results" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="sortAscending" type="ConfigBoolean" description="sort order" default="True" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="unsorted list" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="sorted list" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioinformaticTypes.FilterByEValue`1" displayname="FilterByEValue" description="filter list of homology results" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="cutoff" type="ConfigDouble" description="E-Value cutoff" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="unfiltered list" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="filtered list" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Homology.GetEValue" displayname="Homology.GetEValue" description="returns the expectation value of the homology or NaN if no evalue is available" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Homology"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Homology.GetQueryRange" displayname="Homology.GetQueryRange" description="returns the start and stop position the homologue query part, e.g. of the alignment for blast HSPs" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Homology"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type name="Conveyor.Math.Integer"/>
                <type name="Conveyor.Math.Integer"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Homology.GetSubjectRange" displayname="Homology.GetSubjectRange" description="returns the start and stop position the homologue subject part, e.g. of the alignment for blast HSPs" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Homology"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type name="Conveyor.Math.Integer"/>
                <type name="Conveyor.Math.Integer"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Homology.GetIdentical" displayname="Homology.GetIdentical" description="returns the number of identical residues, e.g. identical bases or amino acids in blast alignments" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Homology"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Homology.GetScore" displayname="Homology.GetScore" description="returns the native score of the homology, e.g. the bit score of blast HSPs" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Homology"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Sequence.GetID" displayname="Sequence.GetID" description="returns the identifier of the sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Sequence.GetSequence" displayname="Sequence.GetSequence" description="returns the text representation of the complete sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Sequence.GetDescription" displayname="Sequence.GetDescription" description="returns the description of the sequence (if any)" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Sequence.GetLength" displayname="Sequence.GetLength" description="returns the length of the sequence in bases or amino acids" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.BioIO" version="" description="IO-related classes for bioinformatics file formats" company="">
    <datatypes>
      <datatype name="Conveyor.BioIO.FastaAASequence">
        <superclasses>
          <type name="Conveyor.BioIO.FastaSequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.BioIO.ParseableSequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.FastaDNASequence">
        <superclasses>
          <type name="Conveyor.BioIO.FastaSequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
            <typeParameters>
              <type name="Conveyor.BioIO.FastaTranslatedAASequence"/>
              <type name="Conveyor.BioIO.FastaDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioIO.ParseableSequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.FastaSequenceBase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.BioIO.ParseableSequence"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.ParseableSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.FastaTranslatedAASequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioIO.FastaDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
            <typeParameters>
              <type name="Conveyor.BioIO.FastaDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.BioIO.FastaWriter" displayname="FastaWriter" description="dumps sequences in fasta format" section="output">
        <typeParameters/>
        <configurations>
          <config_item name="outputWidth" type="ConfigInteger" description="width of output" optional="1"/>
        </configurations>
        <links>
          <link name="input" description="sequences to write to output" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Fasta.ReadAAFastaFile" displayname="ReadAAFastaFile" description="reads AA sequences from a given fasta file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.BioIO.FastaAASequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Fasta.ReadDNAFastaFile" displayname="ReadDNAFastaFile" description="reads DNA sequences from the given fasta file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="the file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.BioIO.FastaDNASequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.ReadFastaQualFiles" displayname="ReadFastaQualFiles" description="Reads the fasta and quality file for DNA sequences" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="seqFile" type="ConfigFile" description="file containing the sequence in fasta format" optional="0"/>
          <config_item name="qualFile" type="ConfigFile" description="file containing the quality values in fasta format" optional="0"/>
        </configurations>
        <links>
          <link name="seq" description="the read sequences" is_input="0">
            <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.WriteQualFile`1" displayname="WriteQualFile" description="exports the quality information of quality sequences to an external file" section="output">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="seq" description="Sequence to export" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.FastQ.ReadFastQFile" displayname="ReadFastQFile" description="read the given FastQ file and produces sequences with quality information" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="file to read as input" optional="0"/>
          <config_item name="qualityEncoding" type="ConfigEnumeration`1" description="Encoding of quality values in FastQ quality line" optional="0">
            <choice value="SANGER" description="Sanger quality values (0 to 93 using ASCII 33 to 126)"/>
            <choice value="SOLEXA" description="Old Solexa format (-5 to 62 using ASCII 59 to 126)"/>
            <choice value="ILLUMINA" description="New Illumina/Solexa format with Sanger compatible values (0 to 62 using ASCII 64 to 126)"/>
          </config_item>
          <config_item name="zippedFile" type="ConfigBoolean" description="deflate compressed FastQ input file" default="false" optional="1"/>
        </configurations>
        <links>
          <link name="sequence" description="a read sequence with quality information" is_input="0">
            <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.FastQ.WriteFastQFile`1" displayname="WriteFastQFile" description="writes sequences with quality information as FastQ files" section="output">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="encoding" type="ConfigEnumeration`1" description="the encoding to use for the quality values" optional="0">
            <choice value="SANGER" description="Sanger quality values (0 to 93 using ASCII 33 to 126)"/>
            <choice value="SOLEXA" description="Old Solexa format (-5 to 62 using ASCII 59 to 126)"/>
            <choice value="ILLUMINA" description="New Illumina/Solexa format with Sanger compatible values (0 to 62 using ASCII 64 to 126)"/>
          </config_item>
          <config_item name="zipped" type="ConfigBoolean" description="compress output" optional="1"/>
        </configurations>
        <links>
          <link name="sequence" description="the sequences to be written" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.BioIO.SFF" version="" description="Conveyor plugin for reading and writing SFF files" company="">
    <datatypes>
      <datatype name="Conveyor.BioIO.SFF.ClippedSFFSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.SFF.FlowgramSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.BioIO.SFF.SFFSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioIO.SFF.FlowgramSequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.BioIO.SFF.ClipSFFSequence" displayname="Conveyor.BioIO.SFF.ClipSFFSequence" description="clips adapter sequences and parts with low quality from an SFF sequence (based on information in sequence header" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioIO.SFF.SFFSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.BioIO.SFF.ClippedSFFSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.SFF.ReadSFFFile" displayname="Conveyor.BioIO.SFF.ReadSFFFile" description="parses the given SFF file and iterates over the sequence in that file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="sffFile" type="ConfigFile" description="The SFF file to parse" optional="0"/>
        </configurations>
        <links>
          <link name="sequence" description="a sequence read from the SFF file" is_input="0">
            <type name="Conveyor.BioIO.SFF.SFFSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.SFF.WriteSFFFile" displayname="WriteSFFFile" description="creates a SFF file from sequences" section="output">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to write to SFF file" is_input="1">
            <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.SFF.SplitSFFPairedEndRead`2" displayname="Conveyor.BioIO.SFF.SplitSFFPairedEndRead`2" description="Detects that paired end linker sequence in a SFF read, and splits it into the forward and reverse parts" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            <restrictedTo name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="technology" type="ConfigEnumeration`1" description="the linker to use (either FLX or TITANIUM)" optional="0">
            <choice value="FLX" description="the (older) FLX sequencing chemistry"/>
            <choice value="TITANIUM" description="the (newer) TITANIUM sequence chemistry"/>
          </config_item>
          <config_item name="allowedMismatched" type="ConfigInteger" description="number of allowed mismatches" optional="0"/>
        </configurations>
        <links>
          <link name="sffRead" description="the SFF read to split" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              <restrictedTo name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="forward" description="the first part of a paired end read" is_input="0">
            <type position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="reverse" description="the second part of a paired end read" is_input="0">
            <type position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="detectedSingle" description="the complete input read in case of no detected linker sequence" is_input="0">
            <type position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.BioIO.Solexa" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.BioIO.Solexa.SolexaRead">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.BioIO.Solexa.GetClipPosition" displayname="Conveyor.BioIO.Solexa.GetClipPosition" description="returns the position of the first 'B' in the quality scores (indicating low quality until end of read" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Solexa.GetQualityCheckFlag" displayname="Conveyor.BioIO.Solexa.GetQualityCheckFlag" description="returns the quality check flag parsed from the Solexa read" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Solexa.IndexSequence" displayname="Conveyor.BioIO.Solexa.IndexSequence" description="Generates string of Solexa default index sequences used for multiplex sequencing" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="index" type="ConfigEnumeration`1" description="Index sequence" optional="0">
            <choice value="ATCACG" description="Index 01 (ATCACG)"/>
            <choice value="CGATGT" description="Index 02 (CGATGT"/>
            <choice value="TTAGGC" description="Index 03 (TTAGGC"/>
            <choice value="TGACCA" description="Index 04 (TGACCA"/>
            <choice value="ACAGTG" description="Index 05 (ACAGTG"/>
            <choice value="GCCAAT" description="Index 06 (GCCAAT"/>
            <choice value="CAGATC" description="Index 07 (CAGATC"/>
            <choice value="ACTTGA" description="Index 08 (ACTTGA"/>
            <choice value="GATCAG" description="Index 09 (GATCAG"/>
            <choice value="TAGCTT" description="Index 10 (TAGCTT"/>
            <choice value="GGCTAC" description="Index 11 (GGCTAC"/>
            <choice value="CTTGTA" description="Index 12 (CTTGTA"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Solexa.IsUsableRead" displayname="Conveyor.BioIO.Solexa.IsUsableRead" description="checks whether the read is usable (does not contain a stretch of B in the quality values of certain length" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="maxBStretchLength" type="ConfigULong" description="maximum length of B stretch at end of quality values to accept a read" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Solexa.PairedEndLinkerSequence" displayname="Conveyor.BioIO.Solexa.PairedEndLinkerSequence" description="Generates string of Solexa default paired end linker sequence (5'-3')" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="useLinker1" type="ConfigBoolean" description="Return linker sequence 1" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.BioIO.Solexa.ParseSolexaQSeqFile" displayname="ParseSolexaQSeqFile" description="Parses the files for all single read of a given lane in a given directory" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="lane" type="ConfigInteger" description="Lane (1-8) to read" optional="0"/>
          <config_item name="basecallDirectory" type="ConfigString" description="Directory containing the Solexa basecalls" optional="0"/>
          <config_item name="readIndex" type="ConfigInteger" description="Index of sub read to parse (e.q. 1-3 for indexed paired end reads)" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="A read from the given lane" is_input="0">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Blast" version="" description="Conveyor data and node types related to NCBI Blast" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Blast.BlastDB`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.BlastDBFile`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                    </type>
                  </typeParameters>
                </restrictedTo>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.GenericSequenceDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.AABlastDatabaseSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type name="Conveyor.Blast.AABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.DNABlastDatabaseSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type name="Conveyor.Blast.DNABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.DNABlastDBFile">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type name="Conveyor.Blast.DNABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type name="Conveyor.Blast.DNABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.AABlastDBFile">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type name="Conveyor.Blast.AABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type name="Conveyor.Blast.AABlastDatabaseSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.GenericBlastResult`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastResult`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.List.List`1">
            <typeParameters>
              <type name="Conveyor.Blast.BlastHit`2">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.BlastHit`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.BlastResult`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.List.List`1">
            <typeParameters>
              <type name="Conveyor.Blast.BlastHit`2">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Blast.BlastvsDB`2" displayname="BlastvsDB" description="executes blast vs. a given database" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="useComplexityFilter" type="ConfigBoolean" description="activate the complexity filter (default yes)" default="True" optional="0"/>
          <config_item name="blastType" type="ConfigEnumeration`1" description="blast sub type" optional="0">
            <choice value="blastn" description="dna sequence vs. dna database (blastn)"/>
            <choice value="blastp" description="protein sequence vs. protein database (blastp)"/>
            <choice value="blastx" description="6-frame translation of dna sequence vs. protein database (blastx)"/>
            <choice value="tblastn" description="protein sequence vs. 6-frame translation of dna database"/>
            <choice value="tblastx" description="6-frame translated dna sequence vs. 6-frame translated dna database"/>
          </config_item>
          <config_item name="chunkSize" type="ConfigInteger" description="number of sequences to process in a single blast instance; use 1 for large databases, and larger values for small databases" default="1" optional="0"/>
          <config_item name="threads" type="ConfigInteger" description="number of thread per blast instance" default="1" optional="0"/>
          <config_item name="wordSize" type="ConfigInteger" description="word size of initial seed kmers (blastp: 3, blastn: 11, megablast: 28)" optional="1"/>
          <config_item name="maxAlignments" type="ConfigInteger" description="max. number of alignments per query sequence" optional="1"/>
          <config_item name="evalueCutoff" type="ConfigDouble" description="evalue cut off" optional="1"/>
        </configurations>
        <links>
          <link name="query" description="query sequence to blast vs. the database" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="result" description="blast result" is_input="0">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="database" description="database to blast against" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.CreateBlastDB`1" displayname="CreateBlastDB" description="collects sequences and creates a temporary blastable sequence database" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to put into the database" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="db" description="collection of all input sequences as blastable database" is_input="0">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetDBEntry`1" displayname="GetDBEntry" description="returns a sequence from a database identified by its name" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="blastDatabase" description="blast database to extract sequence from" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="seqID" description="name or ID of sequence to be retrieved" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="sequence" description="sequence from database entry" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.PublicAADB" displayname="PublicAADB" description="Loads public blastable protein sequence databases from configured locations" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="protein sequence databases available" optional="0">
            <choice value="nr.pal" description="All non-redundant GenBank CDS translations+PDB+SwissProt+PIR+PRF excluding environmental samples from WGS projects&#10;"/>
            <choice value="refseq_protein.pal" description="NCBI Protein Reference Sequences&#10;"/>
            <choice value="swissprot.pal" description="Non-redundant UniProtKB/SwissProt sequences&#10;"/>
            <choice value="AR-polypeptides.fa.pin" description="The Comprehensive Antibiotic Resistance Database&#10;"/>
            <choice value="arg-annot.pin" description="ARG-Annot&#10;"/>
            <choice value="bacmet.pin" description="BacMet: antibacterial biocide and metal resistance genes database&#10;"/>
            <choice value="ardb.pin" description="ARDB&#10;"/>
          </config_item>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type name="Conveyor.Blast.AABlastDBFile"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.PublicDNADB" displayname="PublicDNADB" description="Loads public blastable DNA sequence databases from configured locations" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="nucleotide sequence databases available" optional="0">
            <choice value="16SMicrobial.nin" description="16S Microbial Sequences&#10;"/>
            <choice value="nt.nal" description="Nucleotide collection (nt)&#10;"/>
            <choice value="vector.nin" description="vector&#10;"/>
            <choice value="rdp.nin" description="rdp&#10;"/>
            <choice value="LSURef_115_tax_silva_trunc_DNA.fasta.nin" description="ARB-Silva LSU rRNA database (Release 115)&#10;"/>
            <choice value="GtRNAdb-all-tRNAs.fa.nin" description="GtRNAdb tRNA gene database&#10;"/>
            <choice value="5S_rRNA.fas.nin" description="NCBI genomes collection annotated 5S rRNA genes&#10;"/>
          </config_item>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type name="Conveyor.Blast.DNABlastDBFile"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetNCBITaxonsForEntry`1" displayname="Conveyor.Blast.GetNCBITaxonsForEntry`1" description="" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="unknownNodeBehaviour" type="ConfigEnumeration`1" description="control how this node behaves if a taxon node is not found or has been deleted in the taxonomy" default="ROOT_NODE" optional="1">
            <choice value="EXCEPTION" description="throw exception for unknown or deleted taxon nodes"/>
            <choice value="ROOT_NODE" description="use root node for unknown or deleted taxon nodes"/>
          </config_item>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="database" description="database entries are taken from" is_input="1">
            <type name="Conveyor.Blast.BlastDBFile`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                    <typeParameters>
                      <type position="0" name="T">
                        <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="entry" description="entry in database" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="taxons" description="NCBI taxons for the database entry, or single element list containing root taoxn only if no taxon information is available" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.FillBlastDBSequences`1" displayname="Conveyor.Blast.FillBlastDBSequences`1" description="extracts sequence information from the blast database sequence proxies for speeding up upstream sequence processing" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigInteger" description="number of sequences to put into a single retrieve operation (for faster retrieval of subjects from ASN1 databases" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="sequence proxies to fill" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="proxies after filling in sequence information" is_input="0">
            <type position="0" name="T">
              <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.LocalAADatabase" displayname="Conveyor.Blast.LocalAADatabase" description="" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="databasePath" type="ConfigString" description="Pathname of the database to use" optional="0"/>
        </configurations>
        <links>
          <link name="database" description="The configured database" is_input="0">
            <type name="Conveyor.Blast.AABlastDBFile"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.LocalDNADatabase" displayname="Conveyor.Blast.LocalDNADatabase" description="" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="databasePath" type="ConfigString" description="Pathname of the database to use" optional="0"/>
        </configurations>
        <links>
          <link name="database" description="The configured database" is_input="0">
            <type name="Conveyor.Blast.DNABlastDBFile"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.FilterSecondaryHits`3" displayname="Conveyor.Blast.FilterSecondaryHits`3" description="removes hits from a list of blast results with an insignificant score compared to the best hit" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Blast.BlastHit`2">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="scoreCutOff" type="ConfigDouble" description="bitscore cutoff to consider a hit as secondary (0.0 - 1.0)" default="0.9" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Blast.BlastHit`2">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Blast.BlastHit`2">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.Blast2Seq`2" displayname="Blast2Seq" description="Run blast to compare two sequences" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="useComplexityFilter" type="ConfigBoolean" description="activate the complexity filter (default yes)" default="True" optional="0"/>
          <config_item name="blastType" type="ConfigEnumeration`1" description="blast sub type" optional="0">
            <choice value="blastn" description="dna sequence vs. dna database (blastn)"/>
            <choice value="blastp" description="protein sequence vs. protein database (blastp)"/>
            <choice value="blastx" description="6-frame translation of dna sequence vs. protein database (blastx)"/>
            <choice value="tblastn" description="protein sequence vs. 6-frame translation of dna database"/>
            <choice value="tblastx" description="6-frame translated dna sequence vs. 6-frame translated dna database"/>
          </config_item>
          <config_item name="wordSize" type="ConfigInteger" description="word size of initial seed kmers (blastp: 3, blastn: 11, megablast: 28)" optional="1"/>
          <config_item name="evalueCutoff" type="ConfigDouble" description="evalue cut off" optional="1"/>
        </configurations>
        <links>
          <link name="query" description="first sequence (query)" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="subject" description="second sequence (subject)" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="result" description="blast result" is_input="0">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.Blast`2" displayname="Conveyor.Blast.Blast`2" description="Generic BLAST node using the BLAST-like framework" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigInteger" description="Number of queries to be processed in a single job" default="50" optional="0"/>
          <config_item name="useComplexityFilter" type="ConfigBoolean" description="activate the complexity filter if suspported (default yes)" default="True" optional="0"/>
          <config_item name="blastType" type="ConfigEnumeration`1" description="blast sub type" optional="0">
            <choice value="blastn" description="dna sequence vs. dna database (blastn)"/>
            <choice value="blastp" description="protein sequence vs. protein database (blastp)"/>
            <choice value="blastx" description="6-frame translation of dna sequence vs. protein database (blastx)"/>
            <choice value="tblastn" description="protein sequence vs. 6-frame translation of dna database"/>
            <choice value="tblastx" description="6-frame translated dna sequence vs. 6-frame translated dna database"/>
          </config_item>
          <config_item name="threads" type="ConfigInteger" description="number of thread per blast instance" default="1" optional="0"/>
          <config_item name="evalueCutoff" type="ConfigDouble" description="evalue cut off" optional="1"/>
          <config_item name="method" type="ConfigSelection`2" description="select blast method to use (default: automatic detection)" optional="1">
            <choice value="ncbi" description="NCBIBlast`2"/>
            <choice value="terablast" description="TeraBlastMethod`2"/>
            <choice value="ghostx" description="GhostXMethod`2"/>
            <choice value="ncbi" description="NCBIBlast`2"/>
            <choice value="terablast" description="TeraBlastMethod`2"/>
            <choice value="ghostx" description="GhostXMethod`2"/>
          </config_item>
        </configurations>
        <links>
          <link name="query" description="query to blast against a database" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="database" description="A blastable database" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="result of blast search" is_input="0">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.FilterBlastHits`2" displayname="FilterBlastHits" description="returns a list of all blast hits of a blast result with an evalue better than a given threshold" section="processing">
        <typeParameters>
          <type description="type of query seuqence" position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="type of database sequence" position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="evalueCutoff" type="ConfigDouble" description="evalue cut off" optional="1"/>
          <config_item name="identityCutoff" type="ConfigDouble" description="identity cut off, in relation to the length of the complete query" optional="1"/>
          <config_item name="lengthCutoff" type="ConfigDouble" description="lengths cut off, in relation to the length of the complete query" optional="1"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type description="type of query seuqence" position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database sequence" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Blast.BlastHit`2">
                  <typeParameters>
                    <type description="type of query seuqence" position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type description="type of database sequence" position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetQueryFromBlastHit`2" displayname="GetQueryFromBlastHit" description="extracts the query sequence from a blast hit" section="processing">
        <typeParameters>
          <type description="type of query sequence in the blast hit" position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="type of database entry" position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Blast.BlastHit`2">
              <typeParameters>
                <type description="type of query sequence in the blast hit" position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database entry" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="type of query sequence in the blast hit" position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetQueryFromBlastResult`2" displayname="GetQueryFromBlastResult" description="extracts the query sequence from a blast result" section="processing">
        <typeParameters>
          <type description="type of query sequence in the blast result" position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="type of database entry" position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type description="type of query sequence in the blast result" position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database entry" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="type of query sequence in the blast result" position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetSubject`2" displayname="GetSubject" description="returns the database entry the blast hit refers to" section="processing">
        <typeParameters>
          <type description="type of query sequence in the blast hit" position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="type of database entry" position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Blast.BlastHit`2">
              <typeParameters>
                <type description="type of query sequence in the blast hit" position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database entry" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="type of database entry" position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GetSubjects`2" displayname="GetSubjects" description="returns the database entry the blast hit refers to, collecting several entries in a single lookup for speed reasons" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigInteger" description="number of hits to process as a chunk" default="1000" optional="0"/>
        </configurations>
        <links>
          <link name="hit" description="blast hit to extract subject from" is_input="1">
            <type name="Conveyor.Blast.BlastHit`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="subject" description="subject of blast hit" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Blast.ClusterMine360" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.Blast.ClusterMine360.ClusterMine360Database">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type name="Conveyor.Blast.ClusterMine360.ClusterMineDBSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type name="Conveyor.Blast.ClusterMine360.ClusterMineDBSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.ClusterMine360.ClusterMineDBSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type name="Conveyor.Blast.ClusterMine360.ClusterMineDBSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Blast.ClusterMine360.GetClusterMine360DB" displayname="Conveyor.Blast.ClusterMine360.GetClusterMine360DB" description="Return the database instance for the ClusterMine360 protein database" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Blast.ClusterMine360.ClusterMine360Database"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.ClusterMine360.GetPKSProduct" displayname="GetPKSProduct" description="obtain annotated product from ClusterMine360 database hit" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Blast.ClusterMine360.ClusterMineDBSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Blast.GHOSTX" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.Blast.GHOSTX.GHOSTXDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.GHOSTX.GHOSTXHit`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastHit`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A wrapped database that can be used with GHOSTX" name="Conveyor.Blast.GHOSTX.WrappedGHOSTXDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.GHOSTX.GHOSTXDatabase`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Blast.GHOSTX.GHOSTX`2" displayname="GHOSTX" description="GHOSTX based homology search" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="query" description="sequence to search homologes for" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="database" description="database to search in" is_input="1">
            <type name="Conveyor.Blast.GHOSTX.GHOSTXDatabase`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="search result" is_input="0">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.GHOSTX.GetWrappedGHOSTXDatabase`1" displayname="GetGHOSTXDatabase" description="Gets the database that is mapped to the input database, or aborts the workflow if no such a database is available." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="systemDatabase" description="Database to lookup mapping for" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="ghostDatabase" description="The GHOSTX database the system database is mapped to." is_input="0">
            <type description="A wrapped database that can be used with GHOSTX" name="Conveyor.Blast.GHOSTX.WrappedGHOSTXDatabase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Blast.RAPSearch2" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.Blast.RAPSearch2.RAPSearch2Database`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A wrapped database that can be used with RAPSearch2" name="Conveyor.Blast.RAPSearch2.WrappedRAPSearch2Database`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.RAPSearch2.RAPSearch2Database`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.RAPSearch2.RAPSearch2Hit`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastHit`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Blast.RAPSearch2.GetWrappedRAPSearch2Database`1" displayname="GetRAPSearch2Database" description="Gets the database that is mapped to the input database, or aborts the workflow if no such a database is available." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="systemDatabase" description="Database to lookup mapping for" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="rapsearchDatabase" description="The RAPSeach database the system database is mapped to." is_input="0">
            <type description="A wrapped database that can be used with RAPSearch2" name="Conveyor.Blast.RAPSearch2.WrappedRAPSearch2Database`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.RAPSearch2.RAPSearch2`2" displayname="RAPSearch2" description="RAPSearch2 based homology search" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="query" description="sequence to search homologes for" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="database" description="database to search in" is_input="1">
            <type name="Conveyor.Blast.RAPSearch2.RAPSearch2Database`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="search result" is_input="0">
            <type name="Conveyor.Blast.BlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.AASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Blast.TeraBlast" version="" description="Conveyor plugins for utilizing ActiveMotif FPGA accellerated Blast" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Blast.TeraBlast.TeraBlastDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.TeraBlast.TeraBlastDB`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                    </type>
                  </typeParameters>
                </restrictedTo>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.TeraBlast.TeraBlastDatabase`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                    </type>
                  </typeParameters>
                </restrictedTo>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1"/>
                    </type>
                  </typeParameters>
                </restrictedTo>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.TeraBlast.TeraBlastResult`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastResult`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.List.List`1">
            <typeParameters>
              <type name="Conveyor.Blast.BlastHit`2">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Blast.TeraBlast.TeraBlastHit`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.BlastHit`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A wrapped database that can be used with TeraBlast" name="Conveyor.Blast.TeraBlast.WrappedTeraBlastDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Blast.TeraBlast.TeraBlastDatabase`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Blast.TeraBlast.TeraBlast`2" displayname="TeraBlast" description="DeCypher TeraBlast(R) based homology search" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="blastType" type="ConfigEnumeration`1" description="blast sub type" optional="0">
            <choice value="blastn" description="dna sequence vs. dna database (blastn)"/>
            <choice value="blastp" description="protein sequence vs. protein database (blastp)"/>
            <choice value="blastx" description="6-frame translation of dna sequence vs. protein database (blastx)"/>
            <choice value="tblastn" description="protein sequence vs. 6-frame translation of dna database"/>
            <choice value="tblastx" description="6-frame translated dna sequence vs. 6-frame translated dna database"/>
          </config_item>
          <config_item name="chunkSize" type="ConfigInteger" description="number of sequences to process in a single blast instance; use 1 for large databases, and larger values for small databases" default="25000" optional="0"/>
          <config_item name="maxAlignments" type="ConfigInteger" description="maximum number of alignments to generate for a single input sequence (&gt;0)" default="1000" optional="0"/>
          <config_item name="useQueryFilter" type="ConfigBoolean" description="Use query filter" optional="1"/>
        </configurations>
        <links>
          <link name="query" description="sequence to search homologes for" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="database" description="database to search in " is_input="1">
            <type name="Conveyor.Blast.TeraBlast.TeraBlastDatabase`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="search result" is_input="0">
            <type name="Conveyor.Blast.TeraBlast.TeraBlastResult`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.TeraBlast.TeraBlastAADB" displayname="Conveyor.Blast.TeraBlast.TeraBlastAADB" description="Gives access to a selectable TeraBlast AA database" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="select DNA TeraBlast base" optional="0"/>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type name="Conveyor.Blast.TeraBlast.TeraBlastDB`1">
              <typeParameters>
                <type name="Conveyor.Blast.AABlastDatabaseSequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.TeraBlast.TeraBlastDNADB" displayname="Conveyor.Blast.TeraBlast.TeraBlastDNADB" description="Gives access to a selectable TeraBlast DNA database" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="select DNA TeraBlast base" optional="0"/>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type name="Conveyor.Blast.TeraBlast.TeraBlastDB`1">
              <typeParameters>
                <type name="Conveyor.Blast.DNABlastDatabaseSequence"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Blast.TeraBlast.GetWrappedTeraBlastDatabase`1" displayname="Conveyor.Blast.TeraBlast.GetWrappedTeraBlastDatabase`1" description="Gets the TeraBlast database that is mapped to the input database, or aborts the workflow if no such a database is available." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="systemDatabase" description="Database to lookup mapping for" is_input="1">
            <type name="Conveyor.Blast.BlastDB`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="teraBlastDatabase" description="The TeraBlast database the system database is mapped to." is_input="0">
            <type description="A wrapped database that can be used with TeraBlast" name="Conveyor.Blast.TeraBlast.WrappedTeraBlastDatabase`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Comparison" version="" description="Generic purpose comparison type for Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Comparison.ComparisonResult">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Comparison.IsEqual" displayname="Comparison.IsEqual" description="returns true if the comparison result indicates that both elements are equal" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Comparison.IsLarger" displayname="Comparison.IsLarger" description="returns true if the comparison result indicates that the first element was larger" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Comparison.IsSmaller" displayname="Comparison.IsSmaller" description="returns true if the comparison result indicates that the first element was larger" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Comparison.Reverse" displayname="Comparison.Reverse" description="reverses the comparison result" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Comparison.ReferenceEquals`1" displayname="Conveyor.Comparison.ReferenceEquals`1" description="returns true if both arguments are the same using the equality check" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Comparison.Equals`1" displayname="Conveyor.Comparison.Equals`1" description="returns true if both arguments refer to the same object" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Core" version="" description="Central library of Conveyor, containing the data and node type definitions." company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Core.Data">
        <superclasses/>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Core.TextOutput" displayname="TextOutput" description="simple output note that prints data objects" section="output">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Abort" displayname="Abort" description="aborts a BioGraph run if a data object reaches the input by throwing an exception that contain the data as string" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="input that triggers aborting the graph" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.ConcatStreams`1" displayname="ConcatStreams" description="Concatenates the data elements from the first and the second stream" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="first" description="first stream to use data from" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="second" description="second stream to use data from" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="output of the merged streams" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Conditional`1" displayname="Conditional" description="processes data based on a configurable switch" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="doProcessing" type="ConfigBoolean" description="enables passing of data to the processing loop" default="True" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="data input" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="data output, either directly passed from input or after processing on the loop" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="procOut" description="output to the processing loop" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="procIn" description="input of the processing loop" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Discard" displayname="Discard" description="discards all data send in" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="data to discard" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.FeedbackProcessing`2" displayname="FeedbackProcessing" description="processes all input elements and passes result back into processing" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="data to be processed" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="result after processing all inputs" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="startValue" description="single input used as start element" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="firstOut" description="loop output value taken from input link" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondOut" description="feedback output value, either taken from start value link or from result of the the former run" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="resultIn" description="processing result that is either passed as input to the next iteration or passed to the output link as end result" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.LimitedPass`1" displayname="LimitedPass" description="limits the number of passed data objects to a given count" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="limit" type="ConfigInteger" description="the number of elements to pass" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="the to be passed input" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="the passed output" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags>
          <tag>debugging</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Core.Merge`1" displayname="Merge" description="merges two streams of data without predefined order" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input1" description="first stream of data to get elements from" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="input2" description="second stream of data to get elements from" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="merged stream" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.ParallelLoop`2" displayname="Conveyor.Core.ParallelLoop`2" description="Parallization of processing" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="numberOfInstances" type="ConfigInteger" description="number of instance to create from loop; 1 for default processing, 0 for CPU saturation" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="main input of node" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="main output of node" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="loopOut" description="output to loop to parallize" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="loopIn" description="input from loop to parallize" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Repeat`1" displayname="Repeat" description="reads one element at the input link and repeats it at the output link" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="the element to repeat" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="repeated copies of the element read on the input link" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Replace`2" displayname="Replace" description="replaces a data object by another object, e.g. to maintain loops" section="processing">
        <typeParameters>
          <type description="type of data to discard" position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type description="type of replacement" position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="discard" description="dummy input to be replaced and discarded" is_input="1">
            <type description="type of data to discard" position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="replacement" description="new data to be used instead" is_input="1">
            <type description="type of replacement" position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="replaced data" is_input="0">
            <type description="type of replacement" position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.UnzipStream`1" displayname="Conveyor.Core.UnzipStream`1" description="unzips a stream of data by passing all odd elements to the first and all even elements to the second output" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="stream to split" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="odd" description="odd elements from the stream (1., 3., 5., ...)" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="even" description="even elements from the stream (2, 4., 6., ...)" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.ZipStreams`1" displayname="Conveyor.Core.ZipStreams`1" description="Zips elements from both streams, alternating selecting elements from the input streams (starting with first stream)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="first" description="first stream of elements" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="second" description="second stream of elements" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="zipped" description="stream after zipping" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Core.Skip`1" displayname="Conveyor.Core.Skip`1" description="skips a configurable number of elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="numberOfElements" type="ConfigInteger" description="number of elements to skip" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Database" version="" description="Plugin supporting generic flat file databases" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Database.Database`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Database.IndexedDatabase`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Database.Database`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Database.GetDatabaseName`1" displayname="Conveyor.Database.GetDatabaseName`1" description="Returns the name of the database" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Database.Database`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Database.GetDatabaseDescription`1" displayname="Conveyor.Database.GetDatabaseDescription`1" description="Returns the description of the database" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Database.Database`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Database.UniProt" version="" description="" company="">
    <datatypes>
      <datatype description="One of the UniProt databases (SwissProt, UniProt/TrEMBL)" name="Conveyor.Database.UniProt.UniProtDatabase">
        <superclasses>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type name="Conveyor.Database.UniProt.UniProtEntry"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Database.IndexedDatabase`1">
            <typeParameters>
              <type name="Conveyor.Database.UniProt.UniProtEntry"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Database.Database`1">
            <typeParameters>
              <type name="Conveyor.Database.UniProt.UniProtEntry"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Database.UniProt.UniProtEntry">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="Definition of the confidence in the existence of a protein as described by a database entry" name="Conveyor.Database.UniProt.ProteinExistence">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Database.UniProt.GetUniProtDatabase" displayname="Conveyor.Database.UniProt.GetUniProtDatabase" description="" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="The database to provide by this node instance" optional="0">
            <choice value="SwissProt" description="SwissProt part of UniProt database"/>
          </config_item>
        </configurations>
        <links>
          <link name="db" description="The selected UniProt database" is_input="0">
            <type description="One of the UniProt databases (SwissProt, UniProt/TrEMBL)" name="Conveyor.Database.UniProt.UniProtDatabase"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Dictionary" version="" description="A dictionary data type for Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Dictionary.AddKeyValue`2" displayname="AddKeyValue" description="adds the given value to the dictionary using the given key or overwrites an existing value, and passes the dictionary to the output" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="dictIn" description="dictionary to add key and value to" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="key" description="key to use for adding or overwriting" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="value" description="value to add to the dictionary" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="dictOut" description="dictionary after adding/overwriting" is_input="0">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.ContainsKey`2" displayname="ContainsKey" description="returns true if the dictionary contains the given key" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.CountObjects`1" displayname="CountObjects" description="Counts the occurence of objects send into this node and creates a dictionary using the objects as key and their number of occurences as value" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="obj" description="objects to count" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="counts" description="dictionary containing objects and their number of occurences" is_input="0">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.CreateDictionary`2" displayname="CreateDictionary" description="creates a dictionary from the key value pairs read on the input endpoints" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="key" description="key of a pair" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="value" description="value of a pair" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="dictionary" description="the dictionary after reading all available key value pair" is_input="0">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.CreateEmptyDictionary`2" displayname="CreateEmptyDictionary" description="creates empty dictionary instances" section="input">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.DeleteKey`2" displayname="DeleteKey" description="removes the key and its associated value from the dictionary" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.GetKeys`2" displayname="GetKeys" description="Returns a list of all keys in a dictionary" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.GetValue`2" displayname="GetValue" description="returns the value associated with the given key, or throws an exception if the key does not exists" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.GetValues`2" displayname="GetValues" description="Returns a list of all values in a dictionary" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A simple dictionary for storing key-value pairs" name="Conveyor.Dictionary.Dictionary`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Dictionary.MatchElements`3" displayname="MatchElements" description="Creates pairs of matching elements by synchronising the keys of elements. First input is consumed and stored until match to second input is found." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstKey" description="key of first element" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="firstElement" description="first element" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondKey" description="key of second element" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondElement" description="second element" is_input="1">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="match" description="pair of matching elements" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.EggNOG.V3" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.EggNOG.V3.Level">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.EggNOG.V3.MainGroup">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="the protein database used by eggNOG" name="Conveyor.EggNOG.V3.EggNOGProteinDatabase">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.EggNOG.V3.SelectLevel" displayname="Conveyor.EggNOG.V3.SelectLevel" description="Selects one of the EggNOG levels" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="level" type="ConfigSelection`2" description="Level of EggNOG to return" optional="0">
            <choice value="aciNOG" description="Acidobacteria"/>
            <choice value="actNOG" description="Actinobacteria"/>
            <choice value="meNOG" description="Animals"/>
            <choice value="aquiNOG" description="Aquificales"/>
            <choice value="arNOG" description="Archaea"/>
            <choice value="bactNOG" description="Bacteria"/>
            <choice value="bctoNOG" description="Bacteroidetes"/>
            <choice value="biNOG" description="Bilateria"/>
            <choice value="chlaNOG" description="Chlamydiae"/>
            <choice value="chlNOG" description="Chlorobi"/>
            <choice value="chloNOG" description="Chloroflexi"/>
            <choice value="chorNOG" description="Chordata"/>
            <choice value="creNOG" description="Crenarchaeota"/>
            <choice value="cyaNOG" description="Cyanobacteria"/>
            <choice value="deiNOG" description="Deinococcusthermus"/>
            <choice value="dicNOG" description="Dictyoglomi"/>
            <choice value="euNOG" description="Eukaryotes"/>
            <choice value="eurNOG" description="Euryarchaeota"/>
            <choice value="firmNOG" description="Firmicutes"/>
            <choice value="fiNOG" description="Fishes"/>
            <choice value="fuNOG" description="Fungi"/>
            <choice value="fusoNOG" description="Fusobacteria"/>
            <choice value="inNOG" description="Insects"/>
            <choice value="NOG" description="LUCA"/>
            <choice value="maNOG" description="Mammals"/>
            <choice value="nemNOG" description="Nematodes"/>
            <choice value="opiNOG" description="Opisthokonts"/>
            <choice value="prNOG" description="Primates"/>
            <choice value="proNOG" description="Proteobacteria"/>
            <choice value="aproNOG" description="Proteobacteria_alpha"/>
            <choice value="bproNOG" description="Proteobacteria_beta"/>
            <choice value="dproNOG" description="Proteobacteria_delta"/>
            <choice value="eproNOG" description="Proteobacteria_epsilon"/>
            <choice value="gproNOG" description="Proteobacteria_gamma"/>
            <choice value="roNOG" description="Rodents"/>
            <choice value="spiNOG" description="Spirochaetes"/>
            <choice value="spriNOG" description="Supraprimates"/>
            <choice value="tenNOG" description="Tenericutes"/>
            <choice value="therNOG" description="Thermotogae"/>
            <choice value="verNOG" description="Verrucomicrobia"/>
            <choice value="veNOG" description="Vertebrates"/>
            <choice value="COG" description="COG"/>
            <choice value="KOG" description="KOG"/>
            <choice value="NOG" description="NOG"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetLevelName" displayname="Conveyor.EggNOG.V3.GetLevelName" description="Returns the name of the given level" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetLevelRoot" displayname="Conveyor.EggNOG.V3.GetLevelRoot" description="Returns the taxonomy root element a level is defined by" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetMainGroup" displayname="Conveyor.EggNOG.V3.GetMainGroup" description="gets the main group a functional category belongs to" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.EggNOG.V3.MainGroup"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetMainGroupName" displayname="Conveyor.EggNOG.V3.GetMainGroupName" description="get the name of the main group" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EggNOG.V3.MainGroup"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetFunctionalCategories" displayname="Conveyor.EggNOG.V3.GetFunctionalCategories" description="gets the functional categories of an ortholog group" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetFunctionalCategoryCode" displayname="Conveyor.EggNOG.V3.GetFunctionalCategoryCode" description="get the code of the functional category" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetFunctionalCategoryName" displayname="Conveyor.EggNOG.V3.GetFunctionalCategoryName" description="gets the name of the functional category" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetFunctonalCategoryByCode" displayname="Conveyor.EggNOG.V3.GetFunctonalCategoryByCode" description="get the functional category with the given code" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="a functional category used by eggNOG" name="Conveyor.EggNOG.V3.FunctionalCategory"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetOrthologGroup" displayname="Conveyor.EggNOG.V3.GetOrthologGroup" description="Get the ortholog group with then given number in the given section" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="number" description="number to search for" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="level" description="level to search number in" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="og" description="ortholog group with given number" is_input="0">
            <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetOrthologGroupDescription" displayname="Conveyor.EggNOG.V3.GetOrthologGroupDescription" description="get the description of an ortholog group" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetOrthologNumber" displayname="Conveyor.EggNOG.V3.GetOrthologNumber" description="get the number of an ortholog group" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetOrthologGroups" displayname="Conveyor.EggNOG.V3.GetOrthologGroups" description="get all ortholog groups for a given section" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="level" description="Level to retrieve groups for" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="groups" description="all ortholog groups of the given level" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetOrthologGroupSection" displayname="Conveyor.EggNOG.V3.GetOrthologGroupSection" description="get the level of an ortholog group" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetDatabaseEntryGroups" displayname="Conveyor.EggNOG.V3.GetDatabaseEntryGroups" description="get a list of all ortholog groups of a given section for an eggNOG database entry" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="entry" description="the entry to get ortholog groups for" is_input="1">
            <type description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence"/>
          </link>
          <link name="level" description="eggNOG level to restrict results to" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="ogs" description="list of ortholog groups for the given entry in the given section" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type description="An ortholog group of a specific eggNOG section" name="Conveyor.EggNOG.V3.OrthologGroup"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetDatabaseEntryTaxon" displayname="Conveyor.EggNOG.V3.GetDatabaseEntryTaxon" description="gets the NCBI taxon for the eggNOG database entry" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="an entry of the eggNOG protein database" name="Conveyor.EggNOG.V3.EggNOGProteinSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetEggNOGProteinDatabase" displayname="Conveyor.EggNOG.V3.GetEggNOGProteinDatabase" description="Return the database instance for the eggNOG protein database" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="the protein database used by eggNOG" name="Conveyor.EggNOG.V3.EggNOGProteinDatabase"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EggNOG.V3.GetLevelNOGName" displayname="Conveyor.EggNOG.V3.GetLevelNOGName" description="Returns the NOG name (e.g. COG, fuNOG) of the given level" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EggNOG.V3.Level"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.EnzymeClassification" version="" description="" company="">
    <datatypes>
      <datatype description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass">
        <superclasses>
          <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
            <typeParameters>
              <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="An entry of the enzyme classification database" name="Conveyor.EnzymeClassification.Enzyme">
        <superclasses>
          <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
          <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
            <typeParameters>
              <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.EnzymeClassification.EnzymeNumber">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.EnzymeClassification.GetDescription" displayname="Conveyor.EnzymeClassification.GetDescription" description="Returns the description of an enzyme class/enzyme" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EnzymeClassification.GetECNumber" displayname="Conveyor.EnzymeClassification.GetECNumber" description="Returns the EC number of a enzyme class/enzyme" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.EnzymeClassification.EnzymeNumber"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EnzymeClassification.GetEnzyme" displayname="Conveyor.EnzymeClassification.GetEnzyme" description="Returns the enzyme with the given enzyme classification number" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EnzymeClassification.EnzymeNumber"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="An entry of the enzyme classification database" name="Conveyor.EnzymeClassification.Enzyme"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EnzymeClassification.GetEnzymeClass" displayname="Conveyor.EnzymeClassification.GetEnzymeClass" description="Returns the enzyme class with the given enzyme classification number" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.EnzymeClassification.EnzymeNumber"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="A collection of enzyme carrying out a similar activity" name="Conveyor.EnzymeClassification.EnzymeClass"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EnzymeClassification.IsEnzymeNumber" displayname="Conveyor.EnzymeClassification.IsEnzymeNumber" description="Checks whether the given string is a valid EC number." section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.EnzymeClassification.ConvertToEnzymeNumber" displayname="Conveyor.EnzymeClassification.ConvertToEnzymeNumber" description="Converts the given string to a EC number." section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.EnzymeClassification.EnzymeNumber"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Geneprediction" version="" description="Gene prediction and related node and data classes for conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Geneprediction.PredictedGene`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Interval.Interval"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Geneprediction.SimplePredictedGene`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Geneprediction.PredictedGene`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.Interval.Interval"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Geneprediction.SimplePredictedrRNA`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.Geneprediction.PredictedGene`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Interval.Interval"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Geneprediction.Critica`1" displayname="GenePrediction.Critica" description="executes the critica gene prediction software and returns a list of predicted genes" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="geneticCode" type="ConfigInteger" description="genetic code to use for gene prediction, default to 11 (bacterial code)" default="11" optional="0"/>
          <config_item name="useFPGA" type="ConfigBoolean" description="use FPGA-based blast for homology steps" default="True" optional="1"/>
        </configurations>
        <links>
          <link name="contig" description="input sequence to predict genes on" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="genes" description="list of genes predicted by Critica" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Geneprediction.SimplePredictedGene`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.Glimmer3`1" displayname="GenePrediction.Glimmer3" description="executes the CeBiTec Glimmer 3 wrapper to predict genes on the given contig" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="scoreThreshold" type="ConfigDouble" description="score threshold value to discard gene predictions, defaults to 4.0" default="4.0" optional="0"/>
        </configurations>
        <links>
          <link name="contig" description="input sequence to predict genes on" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="genes" description="list of genes predicted by Glimmer3" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Geneprediction.SimplePredictedGene`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.Prodigal`1" displayname="Prodigal" description="executes Prodigal to predict genes on the given contig" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="maskNs" type="ConfigBoolean" description="mask runs of Ns" optional="1"/>
          <config_item name="geneticCode" type="ConfigInteger" description="genetic code to use during gene prediction (default: 11)" default="11" optional="0"/>
          <config_item name="useMeta" type="ConfigBoolean" description="use meta model (support for small contigs)" optional="1"/>
        </configurations>
        <links>
          <link name="contig" description="input sequence to predict genes on" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="genes" description="list of genes predicted by Prodigal" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Geneprediction.SimplePredictedGene`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.RNAMMER`1" displayname="RNAMMER" description="executes the rnammer to predict ribosomal RNA genes" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="domain" type="ConfigEnumeration`1" description="domain model to use" optional="0">
            <choice value="BACTERIAL" description="bacterial model"/>
            <choice value="ARCHAEL" description="archael model"/>
            <choice value="EUKARYOTIC" description="eukaryotic model"/>
          </config_item>
        </configurations>
        <links>
          <link name="contig" description="input sequence to predict genes on" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="rrnas" description="list of rRNAs predicted by rnammer" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Geneprediction.SimplePredictedrRNA`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetLength`1" displayname="Conveyor.Geneprediction.GetLength`1" description="Returns the length of the predicted gene (usually stop - start)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetSourceSequence`1" displayname="Conveyor.Geneprediction.GetSourceSequence`1" description="Returns the sequence this gene was predicted for" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetStart`1" displayname="Conveyor.Geneprediction.GetStart`1" description="Returns the zero-based start position of this predicted gene" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetStop`1" displayname="Conveyor.Geneprediction.GetStop`1" description="Returns the zero-based stop position of this predicted gene (first base outside the gene)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetSequence`1" displayname="Conveyor.Geneprediction.GetSequence`1" description="Returns the plain DNA sequence string of the predicted gene" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Geneprediction.GetTranslation`1" displayname="Conveyor.Geneprediction.GetTranslation`1" description="Translates the predicted gene using the default genetic code and returns the plain AA string" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Geneprediction.PredictedGene`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.HMMER3" version="" description="Conveyor plugin for HMMER3" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3DomainHit">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="The result of a hmmscan run with the given query sequence" name="Conveyor.HMMER3.HMMER3Result`5">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.List.List`1">
            <typeParameters>
              <type description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3ScanDomainHit`5">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="2" name="V">
                    <restrictedTo position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                  <type position="3" name="W">
                    <restrictedTo name="Conveyor.Alignment.Alignment`1">
                      <typeParameters>
                        <type position="2" name="V">
                          <restrictedTo position="1" name="U">
                            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                          </restrictedTo>
                        </type>
                      </typeParameters>
                    </restrictedTo>
                  </type>
                  <type position="4" name="X">
                    <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                      <typeParameters>
                        <type position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </type>
                        <type position="2" name="V">
                          <restrictedTo position="1" name="U">
                            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                          </restrictedTo>
                        </type>
                        <type position="3" name="W">
                          <restrictedTo name="Conveyor.Alignment.Alignment`1">
                            <typeParameters>
                              <type position="2" name="V">
                                <restrictedTo position="1" name="U">
                                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                                </restrictedTo>
                              </type>
                            </typeParameters>
                          </restrictedTo>
                        </type>
                      </typeParameters>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3ScanDomainHit`5">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3DomainHit"/>
          <type name="Conveyor.BioinformaticsTypes.Homology"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.HMMER3.IHMMDB`4">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo position="0" name="T">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="a HMM built from amino acid sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3AA">
        <superclasses>
          <type name="Conveyor.HMMER3.HMMv3Base`2">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
            </typeParameters>
          </type>
          <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A collection of HMMs" name="Conveyor.HMMER3.HMMv3AADB">
        <superclasses>
          <type name="Conveyor.HMMER3.HMMv3DBBase`3">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              <type description="a HMM built from amino acid sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3AA"/>
            </typeParameters>
          </type>
          <type name="Conveyor.HMMER3.IHMMDB`4">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.AASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type name="Conveyor.BioinformaticsTypes.SimpleAASequence"/>
                </typeParameters>
              </type>
              <type description="a HMM built from amino acid sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3AA"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="a HMM built from nucleiotide sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3DNA">
        <superclasses>
          <type name="Conveyor.HMMER3.HMMv3Base`2">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A collection of nucleotide HMMs" name="Conveyor.HMMER3.HMMv3DNADB">
        <superclasses>
          <type name="Conveyor.HMMER3.HMMv3DBBase`3">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              <type description="a HMM built from nucleiotide sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3DNA"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.HMMER3.IHMMDB`4">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
                </typeParameters>
              </type>
              <type description="a HMM built from nucleiotide sequences used with the HMMER3 application suite" name="Conveyor.HMMER3.HMMv3DNA"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.HMMER3.HMMv3Base`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </restrictedTo>
              </type>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.HMMER3.HMMv3DBBase`3">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.HMMER3.HMMv3Base`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.HMMER3.IHMMDB`4">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </restrictedTo>
              </type>
              <type name="Conveyor.Alignment.AnnotatableAlignment`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </type>
              <type position="2" name="V">
                <restrictedTo name="Conveyor.HMMER3.HMMv3Base`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo position="0" name="T">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </restrictedTo>
                    </type>
                  </typeParameters>
                </restrictedTo>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.HMMER3.GetHMMFromHMMERHit`5" displayname="Conveyor.HMMER3.GetHMMFromHMMERHit`5" description="Gets the HMM from a HMMER3 hit" section="processing">
        <typeParameters>
          <type description="type of query sequence" position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="base type of database sequences" position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type description="type of database alignment sequences" position="2" name="V">
            <restrictedTo description="base type of database sequences" position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type description="type of database alignment" position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type description="type of database alignment sequences" position="2" name="V">
                  <restrictedTo description="base type of database sequences" position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type description="type of hmm stored in database" position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type description="base type of database sequences" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database alignment sequences" position="2" name="V">
                  <restrictedTo description="base type of database sequences" position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type description="type of database alignment" position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type description="type of database alignment sequences" position="2" name="V">
                        <restrictedTo description="base type of database sequences" position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3ScanDomainHit`5">
              <typeParameters>
                <type description="type of query sequence" position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="base type of database sequences" position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type description="type of database alignment sequences" position="2" name="V">
                  <restrictedTo description="base type of database sequences" position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type description="type of database alignment" position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type description="type of database alignment sequences" position="2" name="V">
                        <restrictedTo description="base type of database sequences" position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type description="type of hmm stored in database" position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type description="base type of database sequences" position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type description="type of database alignment sequences" position="2" name="V">
                        <restrictedTo description="base type of database sequences" position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type description="type of database alignment" position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type description="type of database alignment sequences" position="2" name="V">
                              <restrictedTo description="base type of database sequences" position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="type of hmm stored in database" position="4" name="X">
              <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                <typeParameters>
                  <type description="base type of database sequences" position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type description="type of database alignment sequences" position="2" name="V">
                    <restrictedTo description="base type of database sequences" position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                  <type description="type of database alignment" position="3" name="W">
                    <restrictedTo name="Conveyor.Alignment.Alignment`1">
                      <typeParameters>
                        <type description="type of database alignment sequences" position="2" name="V">
                          <restrictedTo description="base type of database sequences" position="1" name="U">
                            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                          </restrictedTo>
                        </type>
                      </typeParameters>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.GetQueryFromHMMERHit`5" displayname="Conveyor.HMMER3.GetQueryFromHMMERHit`5" description="Gets the original query sequence from a HMMER3 hit" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3ScanDomainHit`5">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="2" name="V">
                              <restrictedTo position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.GetQueryFromHMMERResult`5" displayname="Conveyor.HMMER3.GetQueryFromHMMERResult`5" description="Gets the original query sequence from a HMMER3 result" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="The result of a hmmscan run with the given query sequence" name="Conveyor.HMMER3.HMMER3Result`5">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="2" name="V">
                              <restrictedTo position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.HMMScanv3`5" displayname="Conveyor.HMMER3.HMMScanv3`5" description="Searches for (protein) domains absed on a HMM database using HMMER3" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="database" description="HMM database for search domains in" is_input="1">
            <type name="Conveyor.HMMER3.IHMMDB`4">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="2" name="V">
                              <restrictedTo position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="seq" description="Sequence for search domains in" is_input="1">
            <type position="0" name="T">
              <restrictedTo position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </restrictedTo>
            </type>
          </link>
          <link name="result" description="hmmscan result" is_input="0">
            <type description="The result of a hmmscan run with the given query sequence" name="Conveyor.HMMER3.HMMER3Result`5">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="2" name="V">
                              <restrictedTo position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.HMMSeedAlignment`4" displayname="HMMSeedAlignment" description="Converts a HMM to an alignment via accession" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo position="0" name="T">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="hmm" description="hmm to extract alignment from" is_input="1">
            <type position="3" name="W">
              <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </type>
                  <type position="1" name="U">
                    <restrictedTo position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                  <type position="2" name="V">
                    <restrictedTo name="Conveyor.Alignment.Alignment`1">
                      <typeParameters>
                        <type position="1" name="U">
                          <restrictedTo position="0" name="T">
                            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                          </restrictedTo>
                        </type>
                      </typeParameters>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="extracted seed alignment" is_input="0">
            <type position="2" name="V">
              <restrictedTo name="Conveyor.Alignment.Alignment`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </restrictedTo>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.HMMAADatabase" displayname="Conveyor.HMMER3.HMMAADatabase" description="Provides access to a HMM database on the system" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="HMM databases available" optional="0">
            <choice value="Pfam27-A" description="Pfam27-A"/>
          </config_item>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of HMMs" name="Conveyor.HMMER3.HMMv3AADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.HMMDNADatabase" displayname="Conveyor.HMMER3.HMMDNADatabase" description="Provides access to a HMM database on the system" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="HMM databases available" optional="0"/>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of nucleotide HMMs" name="Conveyor.HMMER3.HMMv3DNADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.LocalHMMAADatabase" displayname="Conveyor.HMMER3.LocalHMMAADatabase" description="Provides access to a local HMM database file on the system" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="hmmFile" type="ConfigString" description="the file name of the HMM database file" optional="0"/>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of HMMs" name="Conveyor.HMMER3.HMMv3AADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.LocalHMMDNADatabase" displayname="Conveyor.HMMER3.LocalHMMDNADatabase" description="Provides access to a local HMM database file on the system" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="hmmFile" type="ConfigString" description="the file name of the HMM database file" optional="0"/>
        </configurations>
        <links>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of nucleotide HMMs" name="Conveyor.HMMER3.HMMv3DNADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.FilterHMMERHits`5" displayname="FilterHMMERHits" description="returns a list of all HMMER hits of a result with an evalue better than a given threshold" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="2" name="V">
            <restrictedTo position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="3" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="4" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="evalueCutoff" type="ConfigDouble" description="evalue cut off" optional="1"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="The result of a hmmscan run with the given query sequence" name="Conveyor.HMMER3.HMMER3Result`5">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="2" name="V">
                  <restrictedTo position="1" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="3" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="4" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="2" name="V">
                        <restrictedTo position="1" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="3" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="2" name="V">
                              <restrictedTo position="1" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type description="A hit vs. a HMM domain" name="Conveyor.HMMER3.HMMER3ScanDomainHit`5">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type position="2" name="V">
                      <restrictedTo position="1" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </restrictedTo>
                    </type>
                    <type position="3" name="W">
                      <restrictedTo name="Conveyor.Alignment.Alignment`1">
                        <typeParameters>
                          <type position="2" name="V">
                            <restrictedTo position="1" name="U">
                              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                            </restrictedTo>
                          </type>
                        </typeParameters>
                      </restrictedTo>
                    </type>
                    <type position="4" name="X">
                      <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                        <typeParameters>
                          <type position="1" name="U">
                            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                          </type>
                          <type position="2" name="V">
                            <restrictedTo position="1" name="U">
                              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                            </restrictedTo>
                          </type>
                          <type position="3" name="W">
                            <restrictedTo name="Conveyor.Alignment.Alignment`1">
                              <typeParameters>
                                <type position="2" name="V">
                                  <restrictedTo position="1" name="U">
                                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                                  </restrictedTo>
                                </type>
                              </typeParameters>
                            </restrictedTo>
                          </type>
                        </typeParameters>
                      </restrictedTo>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.HMMER3.GetHMMDescription`4" displayname="GetHMMDescription" description="Get description for a HMM" section="processing">
        <typeParameters>
          <type position="0" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="V">
            <restrictedTo position="0" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="W">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="V">
                  <restrictedTo position="0" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="3" name="X">
            <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="V">
                  <restrictedTo position="0" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="V">
                        <restrictedTo position="0" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="database" description="HMM database" is_input="1">
            <type name="Conveyor.HMMER3.IHMMDB`4">
              <typeParameters>
                <type position="0" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="V">
                  <restrictedTo position="0" name="U">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="W">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="V">
                        <restrictedTo position="0" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
                <type position="3" name="X">
                  <restrictedTo description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
                    <typeParameters>
                      <type position="0" name="U">
                        <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                      </type>
                      <type position="1" name="V">
                        <restrictedTo position="0" name="U">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                      <type position="2" name="W">
                        <restrictedTo name="Conveyor.Alignment.Alignment`1">
                          <typeParameters>
                            <type position="1" name="V">
                              <restrictedTo position="0" name="U">
                                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                              </restrictedTo>
                            </type>
                          </typeParameters>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="accessionIn" description="HMM accession" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="result" description="HMM description" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IHMM`3.get_Name" displayname="IHMM`3.get_Name" description="no description available" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo position="0" name="T">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IHMM`3.get_Accession" displayname="IHMM`3.get_Accession" description="no description available" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo position="0" name="T">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IHMM`3.get_Description" displayname="IHMM`3.get_Description" description="no description available" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.Alignment.Alignment`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="Interface for classes representing HMMs to be used with HMMER3" name="Conveyor.HMMER3.IHMM`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                  </restrictedTo>
                </type>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.Alignment.Alignment`1">
                    <typeParameters>
                      <type position="1" name="U">
                        <restrictedTo position="0" name="T">
                          <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                        </restrictedTo>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Interval" version="" description="Plugin for managing intervals and providing operations on lists of intervals" company="">
    <datatypes>
      <datatype name="Conveyor.Interval.Overlap">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Interval.Interval">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Interval.SimpleInterval">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Interval.Interval"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Interval.CreateOverlap`1" displayname="CreateOverlap" description="Merges the list of intervals into a single overlap instance" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Interval.Interval"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Interval.Interval"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Interval.CheckOverlap" displayname="CheckOverlap" description="checks whether the given interval overlaps with one of the intervals in the overlap collection" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Interval.Interval"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Interval.AddInterval`1" displayname="AddInterval" description="Creates a new overlap containing the additional overlap given as second argument" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Interval.Interval"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Interval.Interval"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Interval.AddIntervals`1" displayname="AddIntervals" description="Creates a new overlap containing the intervals from the given overlap and the list of overlaps" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Interval.Interval"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Interval.Interval"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Interval.Overlap"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Kraken" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.Kraken.KrakenResult`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Kraken.Kraken`1" displayname="Kraken" description="Kraken: ultrafast metagenomic sequence classification using exact alignments" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="inputSequence" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classified" description="classification result" is_input="0">
            <type name="Conveyor.Kraken.KrakenResult`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Kraken.FilterKrakenResult`1" displayname="Kraken.FilterResult" description="filter Kraken results" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="input" is_input="1">
            <type name="Conveyor.Kraken.KrakenResult`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="filtered" description="output" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.List" version="" description="Generic list for Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.List.List`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.List.AppendElement`1" displayname="AppendElement" description="adds an element to the end of a list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.CastList`2" displayname="CastList" description="casts a list of elements to a list of derived elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo position="0" name="T">
                    <restrictedTo name="Conveyor.Core.Data"/>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.CollectN`1" displayname="CollectN" description="creates lists with a defined number of elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="numberOfElements" type="ConfigInteger" description="number of elements to put into a list" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="elements to bundle to lists" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="list" description="list with the requested number of elements" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Collector`1" displayname="Collector" description="collects data objects and returns them as list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="Data elements to be collected." is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="Collection of all data elements passed to this node." is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.CombineElement`2" displayname="CombineElement" description="creates a list of pairs by using  all elements of a given list as the first element and the given element as the second one" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="inputList" description="the list to process" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="outputList" description="the resulting list of pairs" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Pair.Pair`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.Core.Data"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.Core.Data"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="element" description="the element to combine the list with" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Compare`1" displayname="List.Compare" description="compares two lists by pairwise checking their elements from equality" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.FilterList`1" displayname="FilterList" description="removes all elements from a list not matching a criteria" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="listIn" description="the list to process" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="listOut" description="the list with non matching elements removed" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="checkOut" description="a single element of the list to check" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="checkIn" description="the result of a check" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.GetElement`1" displayname="Conveyor.List.GetElement`1" description="returns the element from the list at the given position, or terminates processing if the index is out of range" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.GetEmptyList`1" displayname="GetEmptyList" description="generates empty lists" section="input">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.HasElements`1" displayname="HasElements" description="returns true if the given list contains elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Iterator`1" displayname="Iterator" description="reads list from the input and returns their elements one by one" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="list to iterate over" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="elements from the list, one by one" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.ListCount`1" displayname="ListCount" description="gets the number of elements in a list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags>
          <tag>list processing</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.List.Map`2" displayname="Map" description="converts a list of elements to another list of elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="listIn" description="a list to process" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="elementOut" description="an element from the current list to be processed" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="elementIn" description="the element after processing" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="listOut" description="the complete processed list" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.NewList`1" displayname="Conveyor.List.NewList`1" description="creates a new list using the input elements as first and single list element" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.PrependElement`1" displayname="PrependElement" description="adds an element in front of a list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Select`1" displayname="Select" description="selects an element from list by comparing the elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="listIn" description="list to process" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="selected" description="selected element" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="firstOut" description="first element of comparison" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondOut" description="second element of comparison" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="result of comparison, true selects first element, false selects second element" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Sort`1" displayname="Sort" description="sorts the elements of a list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="unsorted" description="list to sort" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="sorted" description="sorted list" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="firstCompare" description="first element to compare" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondCompare" description="second element to compare" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="compareResult" description="result of comparison, expressing the order of the first and the second element in the pair" is_input="1">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.SROL`2" displayname="SROL" description="structural recursion on lists" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="list to be processed" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="result after processing all inputs" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="startValue" description="start element for each list iteration" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="firstOut" description="loop value taken from input list" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondOut" description="feedback output value, either taken from start value link or from result of the the former run" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="resultIn" description="processing result that is either passed as input to the next iteration or passed to the output link as end result" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.GetFirst`1" displayname="GetFirstElement" description="returns the first element from the list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="listIn" description="the list" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="the first element" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.FlattenList`1" displayname="FlattenList" description="turn list of lists into list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="listIn" description="list of lists" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.List.List`1">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.Core.Data"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="list" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.ContainsElement`1" displayname="ContainsElement" description="Checks whether the list given as first argument contains the second argument" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.AppendList`1" displayname="AppendList" description="creates a new list with all elements from the first and the second list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.List.Unique`1" displayname="Unique" description="Filters non unique elements from a list" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="list to filter" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="list after filtering out duplicate elements" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Logic" version="" description="Definition of a logic (boolean) data type and nodes operating on it." company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Logic.Boolean">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Logic.And" displayname="Logic.And" description="logical and of two boolean values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.BoolGenerator" displayname="BoolGenerator" description="generator that produces boolean truee values" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigBoolean" description="boolean value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.Branch`1" displayname="Branch" description="Branches the control flow depending on an external condition" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="data elements to branch" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="conditionOut" description="start of the condition loop that defines which branch a data element has to take" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="conditionIn" description="result of the condition loop" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="trueOut" description="output of elements with a condition result of true" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="falseOut" description="output of elements with a condition result of false" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.IfThenElse`2" displayname="IfThenElse" description="commonly known two branched flow control node" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="data to pass to then or else branch" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="returned data of then or else branch" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="conditionOut" description="data passed to condition check" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="conditionResult" description="result of condition check" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="thenOut" description="data passed to then branch" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="thenIn" description="result of then branch processing" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="elseOut" description="data passed to else branch" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="elseIn" description="result of else branch processing" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.Not" displayname="Logic.Not" description="logical inverse of the input value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.Or" displayname="Logic.Or" description="logical or of two boolean values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.PassCheck`1" displayname="PassCheck" description="passed stream elements depending on boolean input" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="Data element to filter." is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="pass" description="Flag to indicate whether a data element should pass the filter." is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="output" description="Data elements that have passed the filter." is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.PassFilter`1" displayname="PassFilter" description="forwards objects that passes a check loop" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="Data to check for filter criteria." is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="check_in" description="Indicator whether a data element should pass the filter." is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="check_out" description="Data element sent to filter criteria loop" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="Elements that passed the filter." is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.Xor" displayname="Logic.Xor" description="logical xor of two boolean values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Logic.FlowThrottle`1" displayname="FlowThrottle" description="Controls flow of data by waiting for a trigger before passing the next data element" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="processAhead" type="ConfigInteger" description="Number of elements to keep in processing (0 to disable trigger control)" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="Element flow to throttle" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="Elements under control of the trigger" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="trigger" description="Trigger for passing the next element" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Math" version="" description="Definition of numeric data types within Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="unsigned 8 bit integer" name="Conveyor.Math.Byte">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Math.Double">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Math.Integer">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="signed 64 bit integer" name="Conveyor.Math.Long">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="signed 8 bit integer" name="Conveyor.Math.SByte">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="unsigned 64 bit integer" name="Conveyor.Math.ULong">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Math.ByteOps.Add" displayname="Conveyor.Math.ByteOps.Add" description="returns the sum of both byte values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Between" displayname="Conveyor.Math.ByteOps.Between" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigByte" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigByte" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.ByteGenerator" displayname="Conveyor.Math.LongOps.ByteGenerator" description="generator that produces long value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigByte" description="integer value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Compare" displayname="Conveyor.Math.ByteOps.Compare" description="compares two byte values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Div" displayname="Conveyor.Math.ByteOps.Div" description="returns the integral part of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Equals" displayname="Conveyor.Math.ByteOps.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="compareValue" type="ConfigByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Larger" displayname="Conveyor.Math.ByteOps.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Lower" displayname="Conveyor.Math.ByteOps.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Max" displayname="Conveyor.Math.ByteOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Min" displayname="Conveyor.Math.ByteOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Mod" displayname="Conveyor.Math.ByteOps.Mod" description="returns the integral remainder of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Mul" displayname="Conveyor.Math.ByteOps.Mul" description="returns the product of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ByteOps.Sub" displayname="Conveyor.Math.ByteOps.Sub" description="returns the difference of the two byte values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Add" displayname="Math.Double.Add" description="returns the sum of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Between" displayname="Math.Double.Between" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigDouble" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigDouble" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Compare" displayname="Math.Double.Compare" description="compares two double values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Div" displayname="Math.Double.Div" description="returns the quotient of the both operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Generator" displayname="Math.Double.Generator" description="generator that produces floating point values" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigDouble" description="double value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Equals" displayname="Math.Double.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigDouble" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.IsInf" displayname="Math.Double.IsInf" description="returns true if the double value is positive or negative infinity" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.IsNaN" displayname="Math.Double.IsNaN" description="returns true if the value is NaN (not a number)" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Larger" displayname="Math.Double.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigDouble" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Lower" displayname="Math.Double.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigDouble" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Max" displayname="Conveyor.Math.DoubleOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Min" displayname="Conveyor.Math.DoubleOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Mul" displayname="Math.Double.Mul" description="returns the product of the two factors" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Random" displayname="Math.Double.Random" description="generates random dboule numbers within a given range" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigDouble" description="lower bound of the range" default="0.0" optional="0"/>
          <config_item name="upperBound" type="ConfigDouble" description="upper bound of the range" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.DoubleOps.Sub" displayname="Math.Double.Sub" description="returns the difference of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Double"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Absolute" displayname="Math.Integer.Absolute" description="returns the absolute value of the integer" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Add" displayname="Math.Integer.Add" description="returns the sum of both integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.BetweenInt" displayname="Math.Integer.Between" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigInteger" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigInteger" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Compare" displayname="Math.Integer.Compare" description="compares two integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Div" displayname="Math.Integer.Div" description="returns the integral part of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Equals" displayname="Math.Integer.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="compareValue" type="ConfigInteger" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.IntegerGenerator" displayname="Math.Integer.Generator" description="generator that produces integer value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigInteger" description="integer value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Larger" displayname="Math.Integer.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigInteger" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Lower" displayname="Math.Integer.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigInteger" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Max" displayname="Conveyor.Math.IntegerOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Min" displayname="Conveyor.Math.IntegerOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Mod" displayname="Math.Integer.Mod" description="returns the integral remainder of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Mul" displayname="Math.Integer.Mul" description="returns the product of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Neg" displayname="Math.Integer.Neg" description="negates the given value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Random" displayname="Math.Integer.Random" description="generates random integer numbers within a given range" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigInteger" description="lower bound of the range" default="0" optional="0"/>
          <config_item name="upperBound" type="ConfigInteger" description="upper bound of the range" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.IntegerOps.Sub" displayname="Math.Integer.Sub" description="returns the difference of the two integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Absolute" displayname="Conveyor.Math.LongOps.Absolute" description="returns the absolute value of the integer" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Add" displayname="Conveyor.Math.LongOps.Add" description="returns the sum of both integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.BetweenInt" displayname="Conveyor.Math.LongOps.BetweenInt" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigLong" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigLong" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Compare" displayname="Conveyor.Math.LongOps.Compare" description="compares two long values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Div" displayname="Conveyor.Math.LongOps.Div" description="returns the integral part of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Equals" displayname="Conveyor.Math.LongOps.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="compareValue" type="ConfigLong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Larger" displayname="Conveyor.Math.LongOps.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigLong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.LongGenerator" displayname="Conveyor.Math.LongOps.LongGenerator" description="generator that produces long value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigLong" description="integer value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Lower" displayname="Conveyor.Math.LongOps.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigLong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Max" displayname="Conveyor.Math.LongOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Min" displayname="Conveyor.Math.LongOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Mod" displayname="Conveyor.Math.LongOps.Mod" description="returns the integral remainder of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Mul" displayname="Conveyor.Math.LongOps.Mul" description="returns the product of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Neg" displayname="Conveyor.Math.LongOps.Neg" description="negates the given value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.LongOps.Sub" displayname="Conveyor.Math.LongOps.Sub" description="returns the difference of the two long values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Absolute" displayname="Conveyor.Math.SByteOps.Absolute" description="returns the absolute value of the signed byte" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Add" displayname="Conveyor.Math.SByteOps.Add" description="returns the sum of both integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Between" displayname="Conveyor.Math.SByteOps.Between" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigSByte" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigSByte" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Compare" displayname="Conveyor.Math.SByteOps.Compare" description="compares two signed byte values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Div" displayname="Conveyor.Math.SByteOps.Div" description="returns the integral part of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Equals" displayname="Conveyor.Math.SByteOps.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="compareValue" type="ConfigSByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Larger" displayname="Conveyor.Math.SByteOps.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigSByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Lower" displayname="Conveyor.Math.SByteOps.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigSByte" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Max" displayname="Conveyor.Math.SByteOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Min" displayname="Conveyor.Math.SByteOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Mod" displayname="Conveyor.Math.SByteOps.Mod" description="returns the integral remainder of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Mul" displayname="Conveyor.Math.SByteOps.Mul" description="returns the product of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Neg" displayname="Conveyor.Math.SByteOps.Neg" description="negates the given value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.SByteGenerator" displayname="Conveyor.Math.SByteOps.SByteGenerator" description="generator that produces signed byte value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigSByte" description="signed byte value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.SByteOps.Sub" displayname="Conveyor.Math.SByteOps.Sub" description="returns the difference of the two long values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Add" displayname="Conveyor.Math.ULongOps.Add" description="returns the sum of both integer values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Between" displayname="Conveyor.Math.ULongOps.Between" description="checks whether the value in between the given bounds" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="lowerBound" type="ConfigULong" description="lower bound" optional="0"/>
          <config_item name="upperBound" type="ConfigULong" description="upper bound" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.ByteToULong" displayname="Conveyor.Math.ULongOps.ByteToULong" description="converts an unsigned byte value to an unsigned 64 bit value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 8 bit integer" name="Conveyor.Math.Byte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Compare" displayname="Conveyor.Math.ULongOps.Compare" description="compares two long values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Div" displayname="Conveyor.Math.ULongOps.Div" description="returns the integral part of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Equals" displayname="Conveyor.Math.ULongOps.Equals" description="checks whether the input is the same as the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="compareValue" type="ConfigULong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.IntToULong" displayname="Conveyor.Math.ULongOps.IntToULong" description="converts a signed 32 bit value to an unsigned 64 bit value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Larger" displayname="Conveyor.Math.ULongOps.Larger" description="checks whether the input is larger than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigULong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.LongToULong" displayname="Conveyor.Math.ULongOps.LongToULong" description="converts a signed 64 bit value to an unsigned 64 bit value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Lower" displayname="Conveyor.Math.ULongOps.Lower" description="checks whether the input is lower than the configured value" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="threshold" type="ConfigULong" description="value to compare to" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Max" displayname="Conveyor.Math.ULongOps.Max" description="returns the larger of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Min" displayname="Conveyor.Math.ULongOps.Min" description="returns the smaller of the two values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Mod" displayname="Conveyor.Math.ULongOps.Mod" description="returns the integral remainder of the quotient of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Mul" displayname="Conveyor.Math.ULongOps.Mul" description="returns the product of the two operands" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.SByteToULong" displayname="Conveyor.Math.ULongOps.SByteToULong" description="converts a signed byte to an unsigned 64 bit value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="signed 8 bit integer" name="Conveyor.Math.SByte"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.Sub" displayname="Conveyor.Math.ULongOps.Sub" description="returns the difference of the two long values" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Math.ULongOps.ULongGenerator" displayname="Conveyor.Math.ULongOps.ULongGenerator" description="generator that produces long value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigULong" description="integer value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MetaBin" version="" description="" company="">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.MetaBin.MetaBin`1" displayname="MetaBin" description="Comprehensive Taxonomic Assignments of Metagenomic Sequences" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="inputSequence" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classified" description="classified sequence with most specific assigned taxon" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MetaCV" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.MetaCV.MetaCVResult`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.MetaCV.MetaCV`1" displayname="MetaCV" description="composition-based classification for metagenomic sequences" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="inputSequence" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classified" description="classified sequence with most specific assigned taxon" is_input="0">
            <type name="Conveyor.MetaCV.MetaCVResult`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MetaCV.FilterMetaCVResult`1" displayname="MetaCV.FilterResult" description="filter MetaCV results based on score" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="minScore" type="ConfigInteger" description="correlation score threshold" default="10" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="input" is_input="1">
            <type name="Conveyor.MetaCV.MetaCVResult`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="filtered" description="output" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MetaPhlAn" version="" description="" company="">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.MetaPhlAn.MetaPhlAn`1" displayname="MetaPhlAn" description="Metagenomic Phylogenetic Analysis" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="alnMethod" type="ConfigEnumeration`1" description="alignment method" optional="0">
            <choice value="BLAST" description="BLAST"/>
            <choice value="BOWTIE" description="BowTie 2"/>
          </config_item>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="inputSequence" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classified" description="classified sequence with most specific assigned taxon" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MetaPhyler" version="" description="MetaPhyler plugin for Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="the DNA database used by MetaPhyler" name="Conveyor.MetaPhyler.MetaPhylerDatabase">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type description="an entry of the MetaPhyler database" name="Conveyor.MetaPhyler.MetaPhylerSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type description="an entry of the MetaPhyler database" name="Conveyor.MetaPhyler.MetaPhylerSequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="an entry of the MetaPhyler database" name="Conveyor.MetaPhyler.MetaPhylerSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type description="an entry of the MetaPhyler database" name="Conveyor.MetaPhyler.MetaPhylerSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.MetaPhyler.GetMetaPhylerDatabase" displayname="Conveyor.MetaPhyler.GetMetaPhylerDatabase" description="Return the database instance for the MetaPhyler database" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="the DNA database used by MetaPhyler" name="Conveyor.MetaPhyler.MetaPhylerDatabase"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MetaPhyler.MetaPhyler`1" displayname="Conveyor.MetaPhyler.MetaPhyler`1" description="Return the highest taxonomy name" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="blastHits" description="Blast hits to analyse" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Blast.BlastHit`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                    <type description="an entry of the MetaPhyler database" name="Conveyor.MetaPhyler.MetaPhylerSequence"/>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="taxon" description="Taxon derived from the blast hits" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MGX" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.MGX.MGXAttribute">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXAttributeType">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXHierarchicalAttribute">
        <superclasses>
          <type name="Conveyor.MGX.MGXAttribute"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXJob">
        <superclasses>
          <type name="Conveyor.MGX.MGXJobI"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
            <typeParameters>
              <type name="Conveyor.MGX.MGXTranslatedAASequence`1">
                <typeParameters>
                  <type name="Conveyor.MGX.MGXSequence"/>
                </typeParameters>
              </type>
              <type name="Conveyor.MGX.MGXSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXTranslatedAASequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.BioinformaticsTypes.BackTranslatable`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXJobI">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXReference">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.MGX.MGXQSequence">
        <superclasses>
          <type name="Conveyor.MGX.MGXSequence"/>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.SixFrameTranslatable`2">
            <typeParameters>
              <type name="Conveyor.MGX.MGXTranslatedAASequence`1">
                <typeParameters>
                  <type name="Conveyor.MGX.MGXSequence"/>
                </typeParameters>
              </type>
              <type name="Conveyor.MGX.MGXSequence"/>
            </typeParameters>
          </type>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.SequenceBase`1">
            <typeParameters>
              <type name="Conveyor.BioinformaticsTypes.SimpleDNASequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.MGX.CountN" displayname="CountN" description="counts number of N characters within a nucleotide sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="Nucleotide sequence" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </link>
          <link name="output" description="number of N characters" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.Schnueffelstueck`1" displayname="Schnueffelstueck" description="logger for data elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="input" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="output" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.AnnotateAttribute" displayname="AnnotateAttribute" description="annotates sequences within MGX projects" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="seqIn" description="sequence to be annotated" is_input="1">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
          <link name="startIn" description="start position of annotated subregion within sequence" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="stopIn" description="stop position of annotated subregion" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="attributeIn" description="attribute to be annotated" is_input="1">
            <type name="Conveyor.MGX.MGXAttribute"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.CoveredSubregion`1" displayname="CoveredSubregion" description="computes the longest subsequence within the query covered by a set of homology hits" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="homology results" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Homology"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="coveredRegionout" description="the sequences" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
                <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.CreateHierarchicalMGXAttribute`1" displayname="CreateHierarchicalMGXAttribute" description="create a new hierarchical MGX attribute" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="nodeIn" description="inital element input" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="generated MGX hierarchical attribute" is_input="0">
            <type name="Conveyor.MGX.MGXHierarchicalAttribute"/>
          </link>
          <link name="current" description="loop output to create MGX attribute" is_input="0">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="typeIn" description="MGX attribute type input" is_input="1">
            <type name="Conveyor.MGX.MGXAttributeType"/>
          </link>
          <link name="dataIn" description="MGX attribute data value input" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="nodeOut" description="parent-generating node output" is_input="0">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="parentIn" description="parent-generating node input" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.CreateMGXAttribute" displayname="CreateMGXAttribute" description="create a new MGX attribute" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="typeIn" description="type" is_input="1">
            <type name="Conveyor.MGX.MGXAttributeType"/>
          </link>
          <link name="valueIn" description="value" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="output" description="MGX attribute" is_input="0">
            <type name="Conveyor.MGX.MGXAttribute"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.CreateMGXAttributeType" displayname="CreateMGXAttributeType" description="create a new MGX attribute type" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="attrType" type="ConfigEnumeration`1" description="value types for this attribute" optional="0">
            <choice value="NUMERICAL" description="numerical"/>
            <choice value="DISCRETE" description="discrete"/>
          </config_item>
          <config_item name="attrStruct" type="ConfigEnumeration`1" description="structure of this attribute" optional="0">
            <choice value="BASIC" description="basic"/>
            <choice value="HIERARCHICAL" description="hierarchical"/>
          </config_item>
        </configurations>
        <links>
          <link name="name" description="attribute name" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="jobIn" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
          <link name="output" description="MGX attribute type" is_input="0">
            <type name="Conveyor.MGX.MGXAttributeType"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.FilterBlastIdentity`2" displayname="FilterBlastIdentity" description="filter blast hits based on relative identity in relation to best hit" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="threshold" type="ConfigDouble" description="identity fraction threshold to keep, e.g. 0.8" optional="0"/>
        </configurations>
        <links>
          <link name="listIn" description="blast hits" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Blast.BlastHit`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="filtered" description="filtered blast hits" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Blast.BlastHit`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.FormatString" displayname="FormatString" description="formats input elements according to a format string" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="fmt" type="ConfigString" description="format string" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="element input" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="output" description="formatted element" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GCContent" displayname="GCContent" description="returns GC content for a nucleotide sequence" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="Nucleotide sequence" is_input="1">
            <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </link>
          <link name="output" description="GC content" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetMGXJob" displayname="GetMGXJob" description="provides project access to MGX projects" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="username" type="ConfigString" description="user name" optional="0"/>
          <config_item name="password" type="ConfigString" description="password" optional="0"/>
          <config_item name="host" type="ConfigString" description="database server host" optional="0"/>
          <config_item name="database" type="ConfigString" description="database to connect to" optional="0"/>
          <config_item name="job_id" type="ConfigLong" description="job id" optional="0"/>
          <config_item name="projectDir" type="ConfigString" description="project-specific persistent directory" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="job" is_input="0">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.HasAttribute" displayname="HasAttribute" description="checks if a sequence is annotated with a certain attribute" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="attribute" type="ConfigString" description="attribute name" optional="0"/>
        </configurations>
        <links>
          <link name="seqIn" description="sequence to check" is_input="1">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
          <link name="checkOut" description="result" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetIgnoreFlag" displayname="GetIgnoreFlag" description="retrieve ignore flag value for MGX sequences" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="seqIn" description="sequence to be checked" is_input="1">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
          <link name="checkOut" description="value of the ignore flag" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.SetIgnoreFlag" displayname="SetIgnoreFlag" description="sets ignore flag on MGX sequences" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="seqIn" description="sequence to be ignored" is_input="1">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.MGXSetJobState" displayname="MGXSetJobState" description="assign a certain state to a MGX job" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="targetstate" type="ConfigEnumeration`1" description="Target state to set" optional="0">
            <choice value="CREATED" description="Created"/>
            <choice value="VERIFIED" description="Verified"/>
            <choice value="SUBMITTED" description="Submitted"/>
            <choice value="PENDING" description="Pending"/>
            <choice value="RUNNING" description="Running"/>
            <choice value="FINISHED" description="Finished"/>
            <choice value="FAILED" description="Failed"/>
            <choice value="ABORTED" description="Aborted"/>
            <choice value="IN_DELETION" description="In deletion"/>
          </config_item>
        </configurations>
        <links>
          <link name="jobIn" description="MGX job input" is_input="1">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
          <link name="jobOut" description="the job" is_input="0">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.MarkDiscard" displayname="MarkDiscard" description="set discard flag for a MGX sequence to exclude it from future analysis" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="seqIn" description="sequence to be marked with discard flag" is_input="1">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetMajorRankedParent" displayname="NCBIGetMajorRankedTaxon" description="ascend NCBI taxonomy until a major rank is encountered" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="input" is_input="1">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
          <link name="output" description="output" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.NodeToLineage`1" displayname="NodeToLineage" description="returns a list of nodes representing the path from the root to the input node" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="nodeIn" description="node" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="lineageOut" description="lineage including the node" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                    <typeParameters>
                      <type position="0" name="T">
                        <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.ReadCSFFile" displayname="ReadCSFFile" description="fetches DNA sequences for a MGX job" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJobI"/>
          </link>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.UntranslatePosition`2" displayname="UntranslatePosition" description="six-frame-translate a nucleotide sequence" section="processing">
        <typeParameters>
          <type position="0" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
              <typeParameters>
                <type position="1" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="1" name="V">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="translated aa sequence" is_input="1">
            <type position="0" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.TranslatedAASequence`1">
                <typeParameters>
                  <type position="1" name="V">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="posIn" description="position on translated sequence (1-based)" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="position on nucleotide sequence (1-based)" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetMGXReference" displayname="GetMGXReference" description="retrieve MGX-based reference sequences" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="refId" type="ConfigMGXReference" description="id of reference sequence in MGX project" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.MGX.MGXReference"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.CreateMapping" displayname="CreateMapping" description="writes reference alignment information to SAM file within MGX projects" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="referenceIn" description="reference sequences" is_input="1">
            <type name="Conveyor.MGX.MGXReference"/>
          </link>
          <link name="mappingIn" description="mappings" is_input="1">
            <type name="Conveyor.ReadMapping.CIGARMappedRead`2">
              <typeParameters>
                <type name="Conveyor.MGX.MGXSequence"/>
                <type name="Conveyor.MGX.MGXReference"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.MGXAAHMMDatabase" displayname="Conveyor.MGX.MGXAAHMMDatabase" description="" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="hmmFile" type="ConfigMGXFile" description="HMM file" optional="0"/>
        </configurations>
        <links>
          <link name="jobIn" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of HMMs" name="Conveyor.HMMER3.HMMv3AADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.MGXDNAHMMDatabase" displayname="Conveyor.MGX.MGXDNAHMMDatabase" description="" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="hmmFile" type="ConfigMGXFile" description="HMM file" optional="0"/>
        </configurations>
        <links>
          <link name="jobIn" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJob"/>
          </link>
          <link name="db" description="the selected database" is_input="0">
            <type description="A collection of nucleotide HMMs" name="Conveyor.HMMER3.HMMv3DNADB"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.ReadCSQFile" displayname="ReadCSQFile" description="fetches DNA sequences with qualities for a MGX job" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJobI"/>
          </link>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.MGX.MGXQSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.MinusOne" displayname="MinusOne" description="subtract 1 from input value" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="input" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="output" description="output" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetQSequences" displayname="GetQSequences" description="fetches DNA sequences with qualities for a MGX job" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJobI"/>
          </link>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.MGX.MGXQSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MGX.GetSequences" displayname="GetSequences" description="fetches DNA sequences without qualities for a MGX job" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="MGX job" is_input="1">
            <type name="Conveyor.MGX.MGXJobI"/>
          </link>
          <link name="sequenceOut" description="the sequences" is_input="0">
            <type name="Conveyor.MGX.MGXSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Mothur" version="" description="" company="">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.Mothur.Mothur_ClassifyReads`1" displayname="Conveyor.Mothur.Mothur_ClassifyReads`1" description="classify reads with mothur" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="database" type="ConfigSelection`2" description="classification algorithm" optional="0">
            <choice value="SILVA" description="mothurs version of SILVA database"/>
            <choice value="RDP" description="mothurs version of RDP database"/>
            <choice value="Greengenes" description="mothurs version of Greengenes database"/>
          </config_item>
          <config_item name="threshold" type="ConfigDouble" description="Threshold for the bootstrapping value (only for wang)" default="70" optional="0"/>
          <config_item name="iter" type="ConfigInteger" description="Times of iteration for calculation of bootstrapping value (only for wang)" default="100" optional="0"/>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="reads" description="the reads to classify" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classifiedTaxons" description="List of (Bergey) taxons reported by mothur classifier" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.MVir" version="" description="Plugin for accessing the virulence factor database MVir" company="">
    <datatypes>
      <datatype description="the protein database used by MVir" name="MVir.MVirDatabase">
        <superclasses>
          <type name="Conveyor.Blast.BlastDBFile`1">
            <typeParameters>
              <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Blast.BlastDB`1">
            <typeParameters>
              <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="an entry of the MVir protein database" name="MVir.MVirSequence">
        <superclasses>
          <type description="Base class for ASN1 database entries" name="Conveyor.Blast.BlastDatabaseSequenceBase`1">
            <typeParameters>
              <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.AASequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="Every entry has a defined Status." name="MVir.Status">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="MVir.VirulenceFactorType">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="MVir.GetMVirDatabase" displayname="MVir.GetMVirDatabase" description="Return the database instance for the MVir protein database" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="the protein database used by MVir" name="MVir.MVirDatabase"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="MVir.GetShortDescription" displayname="MVir.GetShortDescription" description="" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="MVir.GetStatus" displayname="MVir.GetStatus" description="" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="Every entry has a defined Status." name="MVir.Status"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="MVir.GetVirulenceFactorType" displayname="MVir.GetVirulenceFactorType" description="" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="an entry of the MVir protein database" name="MVir.MVirSequence"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="MVir.VirulenceFactorType"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MVir.SelectVirulenceFactorType" displayname="SelectVirulenceFactorType" description="MVirDB virulence factor selection" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="type" type="ConfigSelection`2" description="virulence factor type" optional="0">
            <choice value="antibiotic resistance" description="antibiotic resistance"/>
            <choice value="chemical toxin" description="chemical toxin"/>
            <choice value="differential gene regulation" description="differential gene regulation"/>
            <choice value="host range factor" description="host range factor"/>
            <choice value="pathogenicity island" description="pathogenicity island"/>
            <choice value="protein toxin" description="protein toxin"/>
            <choice value="transcription factor" description="transcription factor"/>
            <choice value="unknown" description="unknown"/>
            <choice value="virulence protein" description="virulence protein"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="MVir.VirulenceFactorType"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.MVir.SelectStatus" displayname="SelectStatus" description="MVirDB status selection" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="status" type="ConfigSelection`2" description="MVirDB status" optional="0">
            <choice value="associated factor" description="associated factor"/>
            <choice value="putative virulence factor" description="putative virulence factor"/>
            <choice value="unknown" description="unknown"/>
            <choice value="virulence factor" description="virulence factor"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="Every entry has a defined Status." name="MVir.Status"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Pair" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.Pair.Pair`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Pair.CreatePair`2" displayname="CreatePair" description="Creates a Pair from two input data elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Pair.FirstElement`2" displayname="FirstElement" description="Extracts the first element of a pair" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Pair.PairSplit`2" displayname="PairSplit" description="splits the pair in both elements" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="pair" description="pair to process" is_input="1">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="first" description="first element of pair" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="second" description="second element of pair" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Pair.SecondElement`2" displayname="SecondElement" description="Extracts the second element of a pair" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Pair.Pair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.Core.Data"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.QualitySequence" version="" description="Interfaces and processing nodes for sequences with attached quality information" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="A quality sequence created from a plain dna sequence" name="Conveyor.QualitySequence.ArtificalDNAQSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="a sequence with quality values build from two other quality sequences" name="Conveyor.QualitySequence.ConcatenatedQSequence`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="A sequence composed of two sub sequence" name="Conveyor.BioinformaticsTypes.ConcatenatedSequence`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="a quality sequence created by inserting one q-sequence into another" name="Conveyor.QualitySequence.InsertedQSequence`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="A DNA sequence created by inserting one sequence into another at a given position" name="Conveyor.BioinformaticsTypes.InsertedSequence`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="Reverse complement of a DNA quality sequence" name="Conveyor.QualitySequence.ReverseComplementedQSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="Reverse complement of a DNA sequence" name="Conveyor.BioinformaticsTypes.ReverseComplementedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype description="the reversed sequence of a given quality sequence" name="Conveyor.QualitySequence.ReversedQSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="Reversed sequence of a given DNA sequence" name="Conveyor.BioinformaticsTypes.ReversedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.QualitySequence.SimpleDNAQSequence">
        <superclasses>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype description="part of a quality sequence" name="Conveyor.QualitySequence.SplicedQSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="DNA sequence with a part spliced out" name="Conveyor.BioinformaticsTypes.SplicedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.BioinformaticsTypes.ISubSequenceable`1">
            <typeParameters>
              <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
          <type name="Conveyor.BioinformaticsTypes.ReadOnlyDerivedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.QualitySequence.AverageQuality`1" displayname="Conveyor.QualitySequence.AverageQuality`1" description="calculates the average sequence quality" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Math.Double"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.ClipQSequence`1" displayname="Conveyor.QualitySequence.ClipQSequence`1" description="Strips low quality stretches from the end of a quality sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="qualityThreshold" type="ConfigSByte" description="quality value to filter (&lt;=)" optional="0"/>
          <config_item name="minLowQualityStretch" type="ConfigULong" description="min length of low quality stretches to clip" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="sequence to clip" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="output" description="clipped sequence" is_input="0">
            <type description="part of a quality sequence" name="Conveyor.QualitySequence.SplicedQSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.ConcatenateQSequences`2" displayname="Conveyor.QualitySequence.ConcatenateQSequences`2" description="Concatenates two sequences with quality values" section="processing">
        <typeParameters>
          <type description="type of first quality sequence" position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type description="type of second quality sequence, may differ from first type" position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="name" description="name of the concatenated sequence" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="first" description="first sequence" is_input="1">
            <type description="type of first quality sequence" position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="second" description="second sequence" is_input="1">
            <type description="type of second quality sequence, may differ from first type" position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="concatenated" description="result of concatenation" is_input="0">
            <type description="a sequence with quality values build from two other quality sequences" name="Conveyor.QualitySequence.ConcatenatedQSequence`2">
              <typeParameters>
                <type description="type of first quality sequence" position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type description="type of second quality sequence, may differ from first type" position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.CreateFromDNASequence`1" displayname="Conveyor.QualitySequence.CreateFromDNASequence`1" description="creates a quality sequence from the given DNA sequence, using the configured value as quality value for all bases" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="qualityValue" type="ConfigSByte" description="Quality value to use for all bases" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="A quality sequence created from a plain dna sequence" name="Conveyor.QualitySequence.ArtificalDNAQSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.GetQualityValue" displayname="GetQualityValue" description="Returns the quality value at the position given as second input to this node" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.InsertQSequence`2" displayname="Conveyor.QualitySequence.InsertQSequence`2" description="creates a quality sequence by inserting the insert sequence into the template sequence at the given position" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to insert into" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="insert" description="sequence to be inserted" is_input="1">
            <type position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="position" description="position to insert sequence at" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="result" description="result of the insert" is_input="0">
            <type description="a quality sequence created by inserting one q-sequence into another" name="Conveyor.QualitySequence.InsertedQSequence`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.ReverseComplementQSequence`1" displayname="Conveyor.QualitySequence.ReverseComplementQSequence`1" description="Creates a new DNA quality sequence using the reversed complemented input sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="Reverse complement of a DNA quality sequence" name="Conveyor.QualitySequence.ReverseComplementedQSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.ReverseQSequence`1" displayname="Conveyor.QualitySequence.ReverseQSequence`1" description="creates a reverse quality sequence from the input" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="the reversed sequence of a given quality sequence" name="Conveyor.QualitySequence.ReversedQSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.QualitySequence.SpliceQSequence`1" displayname="Conveyor.QualitySequence.SpliceQSequence`1" description="Returns a DNA quality sequence with a given parts spliced out" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="sequence to process" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="from" description="start of spliced range" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="to" description="end of spliced range" is_input="1">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
          <link name="splicedSequence" description="sequence after splicing" is_input="0">
            <type description="part of a quality sequence" name="Conveyor.QualitySequence.SplicedQSequence`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.RDPClassifier" version="" description="Nodes handling identification of RNA sequences using RDP classifier" company="CeBiTec, Bielefeld University">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.RDPClassifier.RDPClassifier`1" displayname="RDPClassifier" description="Classifies one DNA read and returns a list of taxons and their confidence." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="threshold" type="ConfigDouble" description="Threshold for the node selection in the lineage" default="0.7" optional="0"/>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="inputSequence" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="classifiedTaxons" description="List of Bergey taxons and confidence reported by RDP classifier" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Pair.Pair`2">
                  <typeParameters>
                    <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
                    <type name="Conveyor.Math.Double"/>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.ReadMapping" version="" description="Conveyor Base plugin for read mapping applications" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.ReadMapping.CIGARMappedRead`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.ReadMapping.ICIGARProvider"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.ReadMapping.ICIGARProvider">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.ReadMapping.PSLMappedRead`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.ReadMapping.CIGARMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.ReadMapping.ICIGARProvider"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.ReadMapping.GetMappingStart`2" displayname="Conveyor.ReadMapping.GetMappingStart`2" description="Gets the start position of the mapping in the reference sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.ReadMapping.GetMappingStop`2" displayname="Conveyor.ReadMapping.GetMappingStop`2" description="Gets the stop position of the mapping in the reference sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.ReadMapping.WriteSAM`3" displayname="WriteSAM" description="writes reference alignment information to SAM file" section="output">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.ReadMapping.CIGARMappedRead`2">
              <typeParameters>
                <type position="2" name="V">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
          <type position="2" name="V">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="useUnmapped" type="ConfigBoolean" description="include unmapped reads in output" optional="0"/>
        </configurations>
        <links>
          <link name="referenceIn" description="reference sequences" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="mappingIn" description="mappings" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.ReadMapping.CIGARMappedRead`2">
                <typeParameters>
                  <type position="2" name="V">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                  <type position="0" name="T">
                    <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IMappedRead`2.GetReference" displayname="IMappedRead`2.GetReference" description="get the reference sequence the read is mapped to" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IMappedRead`2.GetRead" displayname="IMappedRead`2.GetRead" description="gets the original read sequence" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IMappedRead`2.IsReverse" displayname="IMappedRead`2.IsReverse" description="true if the reverse complement of the original read was mapped" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="IMappedRead`2.GetAlignment" displayname="IMappedRead`2.GetAlignment" description="gets a pairwise alignment for read and reference" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Alignment.Pairwise.PairwiseDNAAlignment`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.ReadMapping.Applications.Bowtie" version="" description="" company="">
    <datatypes>
      <datatype name="Conveyor.ReadMapping.Applications.Bowtie.BowtieIndex`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.ReadMapping.Applications.Bowtie.BowtieMappedRead`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.ReadMapping.CIGARMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.ReadMapping.ICIGARProvider"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.ReadMapping.Applications.Bowtie.CreateBowtieIndex`1" displayname="CreateBowtieIndex" description="create index file for Bowtie2" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="sequence" description="the sequences to store in the index" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="index" description="the Bowtie index proxy object" is_input="0">
            <type name="Conveyor.ReadMapping.Applications.Bowtie.BowtieIndex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.ReadMapping.Applications.Bowtie.Bowtie`2" displayname="Bowtie" description="maps the given single ended reads to the given reference using Bowtie2" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="useLocal" type="ConfigBoolean" description="use local instead of global alignment" default="True" optional="0"/>
          <config_item name="seedLength" type="ConfigInteger" description="seed length (&gt;3, &lt;32)" default="10" optional="0"/>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="the reads to map" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="references" description="the references to map to" is_input="1">
            <type name="Conveyor.ReadMapping.Applications.Bowtie.BowtieIndex`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="mappings" description="the mappings of a read" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.ReadMapping.Applications.Bowtie.BowtieMappedRead`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.ReadMapping.Applications.BWA" version="" description="Conveyor ReadMapping plugin using BWA" company="">
    <datatypes>
      <datatype name="Conveyor.ReadMapping.Applications.BWA.BWAIndex`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.ReadMapping.Applications.BWA.BWAMappedRead`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.ReadMapping.CIGARMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.ReadMapping.ICIGARProvider"/>
          <type description="A single read mapped to a reference sequence" name="Conveyor.ReadMapping.IMappedRead`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
              </type>
            </typeParameters>
          </type>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.ReadMapping.Applications.BWA.BWA_SingleEnded`2" displayname="Conveyor.ReadMapping.Applications.BWA.BWA_SingleEnded`2" description="maps the given single ended reads to the given reference using BWA" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="errorRate" type="ConfigDouble" description="missing prob under 0.02 err rate" optional="1"/>
          <config_item name="maxDifferences" type="ConfigInteger" description="maximum number of differences" optional="1"/>
          <config_item name="maxBestHits" type="ConfigInteger" description="maximum number of equally best hits to report" optional="1"/>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="the reads to map" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="references" description="the references to map to" is_input="1">
            <type name="Conveyor.ReadMapping.Applications.BWA.BWAIndex`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="mappings" description="the mappings of a read" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.ReadMapping.Applications.BWA.BWAMappedRead`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.ReadMapping.Applications.BWA.CreateBWAIndex`1" displayname="Conveyor.ReadMapping.Applications.BWA.CreateBWAIndex`1" description="" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="useBWTSW" type="ConfigBoolean" description="use the bwtsw method to build the index (needed for large genomes)" default="False" optional="0"/>
        </configurations>
        <links>
          <link name="sequence" description="the sequences to store in the index" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="index" description="the BWA index proxy object" is_input="0">
            <type name="Conveyor.ReadMapping.Applications.BWA.BWAIndex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.ReadMapping.Applications.BWA.BWA_SW`2" displayname="Conveyor.ReadMapping.Applications.BWA.BWA_SW`2" description="BWA using Smith-Waterman based algorithm for long read sequences" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="the reads to map" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="references" description="the references to map to" is_input="1">
            <type name="Conveyor.ReadMapping.Applications.BWA.BWAIndex`1">
              <typeParameters>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="mappings" description="the mappings of a read" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.ReadMapping.Applications.BWA.BWAMappedRead`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.ReadMapping.Applications.FR-HIT" version="" description="" company="">
    <datatypes/>
    <nodetypes>
      <nodetype classname="Conveyor.ReadMapping.Applications.FRHIT.FR_HIT`2" displayname="Conveyor.ReadMapping.Applications.FRHIT.FR_HIT`2" description="" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="identityThreshold" type="ConfigInteger" description="sequence identity threshold (in percent)" default="75" optional="0"/>
          <config_item name="chunkSize" type="ConfigULong" description="size of a input data chunk" default="1" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="DNA read" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="references" description="DNA reference sequences" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="mappings" description="the mappings of a read" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.ReadMapping.PSLMappedRead`2">
                  <typeParameters>
                    <type position="0" name="T">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                    <type position="1" name="U">
                      <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
                    </type>
                  </typeParameters>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.SequencePair" version="" description="Interfaces and processing types for pairs of sequences, e.g. paired end reads from a sequencer" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="simple implementation of sequence pairs" name="Conveyor.SequencePair.SimpleSequencePair`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
              <type position="1" name="U">
                <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.SequencePair.CreateSequencePair`2" displayname="CreateSequencePair" description="creates a sequence pair from the given sequence, using the given orientation" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="first" description="first sequence of pair" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="second" description="second sequence of pair" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="orientation" description="orientation of sequences" is_input="1">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
          <link name="pair" description="composed sequence pair" is_input="0">
            <type description="simple implementation of sequence pairs" name="Conveyor.SequencePair.SimpleSequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SequencePair.IsSameOrientation" displayname="IsSameOrientation" description="Returns true if both orientations are known and are the same." section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SequencePair.IsUnknownOrientation" displayname="IsUnknownOrientation" description="Checks whether the given orientation is an unknown orientation" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SequencePair.OrientationGenerator" displayname="OrientationGenerator" description="Generates Orientation values for CreateSequencePair and similar node types" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="orientation" type="ConfigEnumeration`1" description="Orientation to use" optional="0">
            <choice value="SAME" description="Same strand"/>
            <choice value="DIFFERENT" description="Different strands"/>
            <choice value="UNKNOWN" description="Unknown orientation"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="SequencePair`2.GetFirst" displayname="SequencePair`2.GetFirst" description="Returns the first sequence of the pair" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="SequencePair`2.GetSecond" displayname="SequencePair`2.GetSecond" description="Returns the second sequence of the pair" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="SequencePair`2.GetOrientation" displayname="SequencePair`2.GetOrientation" description="Returns the orientation of the sequences within the pair" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="orientation of a sequence pair's sequences" name="Conveyor.SequencePair.Orientation"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="SequencePair`2.GetDistance" displayname="SequencePair`2.GetDistance" description="Returns the distance between the sequence (including both sequences' length), or -1 if the distance is unknown" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="signed 64 bit integer" name="Conveyor.Math.Long"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.SolexaProcessing" version="" description="CeBiTec specific tools for processing Solexa sequencer data" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype description="A quality sequence being part of an alignment of two quality sequences" name="Conveyor.SolexaProcessing.AlignedDNAQSequence`1">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Alignment.Pairwise.AlignedSequence`1">
            <typeParameters>
              <type position="0" name="T">
                <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </type>
            </typeParameters>
          </type>
          <type name="Conveyor.BioinformaticsTypes.DNASequence"/>
          <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          <type name="Conveyor.BioinformaticsTypes.Sequence"/>
          <type name="Conveyor.Core.Data"/>
          <type name="Conveyor.Annotation.Annotatable"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.SolexaProcessing.SequenceOverlap`2">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <superclasses>
          <type description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
            <typeParameters>
              <type description="A quality sequence being part of an alignment of two quality sequences" name="Conveyor.SolexaProcessing.AlignedDNAQSequence`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                  </type>
                </typeParameters>
              </type>
              <type description="A quality sequence being part of an alignment of two quality sequences" name="Conveyor.SolexaProcessing.AlignedDNAQSequence`1">
                <typeParameters>
                  <type position="1" name="U">
                    <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                  </type>
                </typeParameters>
              </type>
              <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Alignment.Alignment`1">
            <typeParameters>
              <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.SolexaProcessing.CountDistinctElements`1" displayname="Conveyor.SolexaProcessing.CountDistinctElements`1" description="counts the occurence of distinct elements and returns a statistic" section="output">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="elements to count" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.CountElements" displayname="Conveyor.SolexaProcessing.CountElements" description="reports the number of elements send to this node" section="output">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="elements to count" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.CreateConsensus`2" displayname="CreateConsensus" description="creates the consensus sequence of an overlapping sequence pair, including quality value processing" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="misMatchResolution" type="ConfigEnumeration`1" description="Resolution of mismatching bases" optional="0">
            <choice value="FIRST" description="use base from first sequence"/>
            <choice value="SECOND" description="use base from second sequence"/>
            <choice value="IUPAC" description="use IUPAC code for ambigiuous bases"/>
            <choice value="N" description="use 'N'"/>
          </config_item>
        </configurations>
        <links>
          <link name="alignment" description="pairwise alignment to process" is_input="1">
            <type description="An alignment containing two sequences" name="Conveyor.Alignment.Pairwise.PairwiseAlignment`3">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
              </typeParameters>
            </type>
          </link>
          <link name="consensus" description="The calculated consensus sequence" is_input="0">
            <type name="Conveyor.QualitySequence.SimpleDNAQSequence"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.FuzzyMatchSequence`2" displayname="Conveyor.SolexaProcessing.FuzzyMatchSequence`2" description="Matches two sequences, allowing a number of mismatches" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="maxMismatches" type="ConfigInteger" description="number of mismatches allowed" optional="0"/>
        </configurations>
        <links>
          <link name="sequence" description="sequence to search in" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="pattern" description="sequence to search for" is_input="1">
            <type position="1" name="U">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="position" description="start position of the first match, or -1 if no match was found" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.FuzzyMatchString`1" displayname="Conveyor.SolexaProcessing.FuzzyMatchString`1" description="Matches a sequence vs. a given string, allowing a number of mismatches" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="maxMismatches" type="ConfigInteger" description="number of mismatches allowed" optional="0"/>
        </configurations>
        <links>
          <link name="sequence" description="sequence to search in" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.Sequence"/>
            </type>
          </link>
          <link name="pattern" description="string to search for" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="position" description="start position of the first match, or -1 if no match was found" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.GetCustomLinkerPosition" displayname="Conveyor.SolexaProcessing.GetCustomLinkerPosition" description="Calculates the position of a given linker in a Solexa read" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="maxMismatches" type="ConfigInteger" description="number of mismatches allowed" optional="0"/>
          <config_item name="linker" type="ConfigString" description="linker sequence to search for" optional="0"/>
          <config_item name="searchReverse" type="ConfigBoolean" description="also search for reverse complement" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="read to analyse" is_input="1">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
          <link name="position" description="position of the linker, or -1 if no linker is found" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.GetLongestHomopolymerStretchSize`1" displayname="Conveyor.SolexaProcessing.GetLongestHomopolymerStretchSize`1" description="returns the length of the longest homopolymer found in the sequence (ignoring 'N's)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.BioinformaticsTypes.DNASequence"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.GetNumberOfOverlappingBases`2" displayname="Conveyor.SolexaProcessing.GetNumberOfOverlappingBases`2" description="Returns the number of overlapping bases" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.SolexaProcessing.SequenceOverlap`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.GetOverlapSequences`2" displayname="Conveyor.SolexaProcessing.GetOverlapSequences`2" description="Returns the sequence pair involved in the overlap" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.SolexaProcessing.SequenceOverlap`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="A pair of sequences, e.g. a paired end read from a next generation sequencer" name="Conveyor.SequencePair.SequencePair`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.GetPELinkerPosition" displayname="Conveyor.SolexaProcessing.GetPELinkerPosition" description="Calculates the position of a PE linker in the Solexa read" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="maxMismatches" type="ConfigInteger" description="number of mismatches allowed" optional="0"/>
        </configurations>
        <links>
          <link name="read" description="read to analyse" is_input="1">
            <type name="Conveyor.BioIO.Solexa.SolexaRead"/>
          </link>
          <link name="position" description="position of the linker, or -1 if no linker is found" is_input="0">
            <type name="Conveyor.Math.Integer"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.SolexaProcessing.OverlapPairedEndSequences`2" displayname="OverlapPairedEndSequences" description="calculates the overlap of CeBiTec style Solexa paired end reads (perfect matching)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
          <type position="1" name="U">
            <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="minBases" type="ConfigULong" description="the minimal number of bases to consider the pair overlapping" optional="0"/>
          <config_item name="maxMismatches" type="ConfigULong" description="number of mismatches allowed" optional="0"/>
          <config_item name="gapValue" type="ConfigSByte" description="quality value for gaps at start and end of aligned sequences" default="0" optional="0"/>
        </configurations>
        <links>
          <link name="firstSequence" description="first sequence to overlap" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="secondSequence" description="second sequence to overlap" is_input="1">
            <type position="1" name="U">
              <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
            </type>
          </link>
          <link name="overlap" description="the calculated overlap for further processing" is_input="0">
            <type name="Conveyor.SolexaProcessing.SequenceOverlap`2">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
                <type position="1" name="U">
                  <restrictedTo description="A set of position based quality information for sequences, e.g. quality values generated by a sequencer or a base calling application" name="Conveyor.QualitySequence.IQualitySequence"/>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Table" version="" description="" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Table.TableHeader">
        <superclasses>
          <type name="Conveyor.Table.TableRow"/>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Table.TableRow">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Table.AddField" displayname="AddField" description="adds the content to a table row" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="tableHeader" type="ConfigString" description="header of this column" default="" optional="0"/>
        </configurations>
        <links>
          <link name="rowIn" description="row to add data to" is_input="1">
            <type name="Conveyor.Table.TableRow"/>
          </link>
          <link name="contentIn" description="content to be added" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="rowOut" description="row after adding data" is_input="0">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Table.AddRow" displayname="AddRow" description="adds a row to an existing one" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="rowIn" description="row to append row to" is_input="1">
            <type name="Conveyor.Table.TableRow"/>
          </link>
          <link name="appendeeRow" description="row to be added" is_input="1">
            <type name="Conveyor.Table.TableRow"/>
          </link>
          <link name="rowOut" description="row after adding" is_input="0">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Table.EmptyRow" displayname="EmptyRow" description="creates new, empty rows" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="firstRowIsHeader" type="ConfigBoolean" description="flag to indicate that first row send by this node is a table header" default="False" optional="1"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Table.NewRow" displayname="NewRow" description="creates a new row and put the content in it" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="tableHeader" type="ConfigString" description="table header of this column" default="" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Core.Data"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Table.TableCSVWriter" displayname="TableCSVWriter" description="converts table rows to a CSV table" section="output">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="row to be added" is_input="1">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Table.TableTSVWriter" displayname="TableTSVWriter" description="converts table rows to a TSV table" section="output">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="row to be added" is_input="1">
            <type name="Conveyor.Table.TableRow"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Taxonomy" version="" description="Parsers and datatypes for NCBI taxonomy" company="">
    <datatypes>
      <datatype name="Conveyor.Taxonomy.NCBI.Taxon">
        <superclasses>
          <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
            <typeParameters>
              <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype name="Conveyor.Taxonomy.NCBI.Rank">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetNCBITaxon" displayname="Conveyor.Taxonomy.NCBI.GetNCBITaxon" description="Returns the NCBI taxon with the given ID" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetNCBITaxonomy" displayname="Conveyor.Taxonomy.NCBI.GetNCBITaxonomy" description="Returns the root taxon of the NCBI taxonomy" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetTaxonName" displayname="Conveyor.Taxonomy.NCBI.GetTaxonName" description="Returns the canonical scientific name of the taxon" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetTaxonRank" displayname="Conveyor.Taxonomy.NCBI.GetTaxonRank" description="Returns the NCBI rank of the given taxon" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Taxonomy.NCBI.Taxon"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Rank"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetRankName" displayname="Conveyor.Taxonomy.NCBI.GetRankName" description="Returns the name of the taxonomic rank" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Taxonomy.NCBI.Rank"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.NCBI.GetNCBIRank" displayname="Conveyor.Taxonomy.NCBI.GetNCBIRank" description="generates data elements for the configured rank" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="rank" type="ConfigSelection`2" description="the rank to generate" optional="0">
            <choice value="NO RANK" description="NO RANK"/>
            <choice value="ROOT" description="ROOT"/>
            <choice value="SUPERKINGDOM" description="SUPERKINGDOM"/>
            <choice value="KINGDOM" description="KINGDOM"/>
            <choice value="SUBKINGDOM" description="SUBKINGDOM"/>
            <choice value="SUPERPHYLUM" description="SUPERPHYLUM"/>
            <choice value="PHYLUM" description="PHYLUM"/>
            <choice value="SUBPHYLUM" description="SUBPHYLUM"/>
            <choice value="SUPERCLASS" description="SUPERCLASS"/>
            <choice value="CLASS" description="CLASS"/>
            <choice value="INFRACLASS" description="INFRACLASS"/>
            <choice value="SUBCLASS" description="SUBCLASS"/>
            <choice value="SUPERORDER" description="SUPERORDER"/>
            <choice value="ORDER" description="ORDER"/>
            <choice value="SUBORDER" description="SUBORDER"/>
            <choice value="INFRAORDER" description="INFRAORDER"/>
            <choice value="PARVORDER" description="PARVORDER"/>
            <choice value="SUPERFAMILY" description="SUPERFAMILY"/>
            <choice value="FAMILY" description="FAMILY"/>
            <choice value="SUBFAMILY" description="SUBFAMILY"/>
            <choice value="TRIBE" description="TRIBE"/>
            <choice value="SUBTRIBE" description="SUBTRIBE"/>
            <choice value="GENUS" description="GENUS"/>
            <choice value="SUBGENUS" description="SUBGENUS"/>
            <choice value="SPECIES" description="SPECIES"/>
            <choice value="SUBSPECIES" description="SUBSPECIES"/>
            <choice value="SPECIES GROUP" description="SPECIES GROUP"/>
            <choice value="SPECIES SUBGROUP" description="SPECIES SUBGROUP"/>
            <choice value="VARIETAS" description="VARIETAS"/>
            <choice value="FORMA" description="FORMA"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.NCBI.Rank"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Taxonomy.Bergey" version="" description="Access to the Bergey taxonomy (as part of RDP Classifier's training set)" company="CeBiTec, Bielefeld university">
    <datatypes>
      <datatype name="Conveyor.Taxonomy.Bergey.Rank">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
      <datatype description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon">
        <superclasses>
          <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
            <typeParameters>
              <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
            </typeParameters>
          </type>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetBergeyTaxonomy" displayname="Conveyor.Taxonomy.Bergey.GetBergeyTaxonomy" description="Returns the root taxon of the Bergey taxonomy" section="input">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="output" description="" is_input="0">
            <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetBergeyTaxon" displayname="Conveyor.Taxonomy.Bergey.GetBergeyTaxon" description="Returns the Bergey taxon with the given ID" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Math.Integer"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetTaxonName" displayname="Conveyor.Taxonomy.Bergey.GetTaxonName" description="Returns the name of the Bergey taxon" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetTaxonRank" displayname="Conveyor.Taxonomy.Bergey.GetTaxonRank" description="Returns the Bergey taxon rank of the given taxon" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="a taxon in the bergey taxonomy" name="Conveyor.Taxonomy.Bergey.Taxon"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.Bergey.Rank"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetRankName" displayname="Conveyor.Taxonomy.Bergey.GetRankName" description="Returns the name of the taxonomic rank" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Taxonomy.Bergey.Rank"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Taxonomy.Bergey.GetBergeyRank" displayname="Conveyor.Taxonomy.Bergey.GetBergeyRank" description="generate a configured bergey rank value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="rank" type="ConfigSelection`2" description="the rank to generate" optional="0">
            <choice value="rootrank" description="rootrank"/>
            <choice value="domain" description="domain"/>
            <choice value="phylum" description="phylum"/>
            <choice value="class" description="class"/>
            <choice value="subclass" description="subclass"/>
            <choice value="order" description="order"/>
            <choice value="suborder" description="suborder"/>
            <choice value="family" description="family"/>
            <choice value="genus" description="genus"/>
            <choice value="species" description="species"/>
          </config_item>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Taxonomy.Bergey.Rank"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Text" version="" description="String and string manipulation for Conveyor" company="CeBiTec, Bielefeld University">
    <datatypes>
      <datatype name="Conveyor.Text.String">
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Text.Concat" displayname="Concat" description="concatenates two string with an optional delimiter" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="delimiter" type="ConfigString" description="optional delimiter" optional="0"/>
        </configurations>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.JoinElements" displayname="JoinElements" description="concatenates the string representation of the elements" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="delimiter" type="ConfigString" description="delimiter for elements" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Text.String"/>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags>
          <tag>String</tag>
        </tags>
      </nodetype>
      <nodetype classname="Conveyor.Text.Length" displayname="Conveyor.Text.Length" description="returns the length of the input string" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.LexicalCompare" displayname="LexicalCompare" description="compares two strings lexically" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Comparison.ComparisonResult"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.LineReader" displayname="LineReader" description="reads single lines from a given file" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="inputFile" type="ConfigFile" description="file to process" optional="0"/>
          <config_item name="filterEmptyLines" type="ConfigBoolean" description="flag to indicate whether empty lines should be filtered" default="True" optional="0"/>
        </configurations>
        <links>
          <link name="line" description="a single line read from the file" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.LineSplitter" displayname="LineSplitter" description="trims a string and splits it at a given regular string" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="delimiter" type="ConfigString" description="string to use a delimiter" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Text.String"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.RegExpCut" displayname="RegExpCut" description="use a regular expression to process a string and remove matching parts" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="regularExpression" type="ConfigString" description=".NET regular expression to use" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.RegExpMatch" displayname="RegExpMatch" description="applies a regular expression to a string and returns a list of matches" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="regExp" type="ConfigString" description="regular expression to match" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type name="Conveyor.Text.String"/>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.StringGenerator" displayname="StringGenerator" description="generator that produces a string value" section="input">
        <typeParameters/>
        <configurations>
          <config_item name="value" type="ConfigString" description="string value to generate" optional="0"/>
        </configurations>
        <links>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.StringMatch" displayname="StringMatch" description="returns a bool indicating whether a configured substring is part of the input" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="substring" type="ConfigString" description="substring to search" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.StringReplace" displayname="StringReplace" description="replaces every occurrence of a given string with a given substitution" section="processing">
        <typeParameters/>
        <configurations>
          <config_item name="match" type="ConfigString" description="the string to replace" optional="0"/>
          <config_item name="replacement" type="ConfigString" description="the string to use as replacement" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.SubstringMatch" displayname="SubstringMatch" description="returns true if hte input string contains the sub string" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="firstArgument" description="the first argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="secondArgument" description="the second argument of the operation" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="result" description="the result of the operation" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.ToString`1" displayname="Conveyor.Text.ToString`1" description="Converts an object into its implementation dependent string representation" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.ToStringFormat`1" displayname="Conveyor.Text.ToStringFormat`1" description="Converts an object into format string based string representation" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
          </type>
        </typeParameters>
        <configurations>
          <config_item name="formatString" type="ConfigString" description="the C# style format string, e.g. {0}" optional="0"/>
        </configurations>
        <links>
          <link name="input" description="data to format" is_input="1">
            <type position="0" name="T">
              <restrictedTo name="Conveyor.Core.Data"/>
            </type>
          </link>
          <link name="result" description="the formatted object" is_input="0">
            <type name="Conveyor.Text.String"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Text.IsEmpty" displayname="Conveyor.Text.IsEmpty" description="" section="processing">
        <typeParameters/>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type name="Conveyor.Text.String"/>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
  <plugin name="Conveyor.Tree" version="" description="Generic tree implementation for Conveyor plugins" company="">
    <datatypes>
      <datatype description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
        <typeParameters>
          <type description="type of parent and child tree vertex" position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
          </type>
        </typeParameters>
        <superclasses>
          <type name="Conveyor.Core.Data"/>
        </superclasses>
      </datatype>
    </datatypes>
    <nodetypes>
      <nodetype classname="Conveyor.Tree.GetChildren`1" displayname="Conveyor.Tree.GetChildren`1" description="Returns a list containing the child vertices of the given vertex" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                    <typeParameters>
                      <type position="0" name="T">
                        <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.GetDepth`1" displayname="Conveyor.Tree.GetDepth`1" description="Returns the depth of a vertex (0 for root vertex, &gt; 0 for nested vertices)" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type description="unsigned 64 bit integer" name="Conveyor.Math.ULong"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.GetLCA`1" displayname="Conveyor.Tree.GetLCA`1" description="Get the lowest common ancestors to the given tree vertices" section="processing">
        <typeParameters>
          <type position="0" name="U">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="U">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="vertices" description="list of vertices to calculate LCA of" is_input="1">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="U">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                    <typeParameters>
                      <type position="0" name="U">
                        <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="lca" description="LCA of list of vertices" is_input="0">
            <type position="0" name="U">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="U">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.GetRoot`1" displayname="Conveyor.Tree.GetRoot`1" description="Returns the root of the given tree vertex" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.IsLeafVertex`1" displayname="Conveyor.Tree.IsLeafVertex`1" description="Returns true if the vertex is a leaf vertex" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.IsRootVertex`1" displayname="Conveyor.Tree.IsRootVertex`1" description="Returns true if the given tree vertex is the root vertex of a tree" section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo name="Conveyor.Core.Data"/>
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo name="Conveyor.Core.Data"/>
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.Logic.Boolean"/>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.GetRootPath`1" displayname="Conveyor.Tree.GetRootPath`1" description="Returns a list of vertices containing the path from the root vertex to the given vertex." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type name="Conveyor.List.List`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                    <typeParameters>
                      <type position="0" name="T">
                        <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                      </type>
                    </typeParameters>
                  </restrictedTo>
                </type>
              </typeParameters>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
      <nodetype classname="Conveyor.Tree.GetParent`1" displayname="Conveyor.Tree.GetParent`1" description="Returns the parent node of an input node." section="processing">
        <typeParameters>
          <type position="0" name="T">
            <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
              <typeParameters>
                <type position="0" name="T">
                  <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                </type>
              </typeParameters>
            </restrictedTo>
          </type>
        </typeParameters>
        <configurations/>
        <links>
          <link name="input" description="" is_input="1">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
          <link name="output" description="" is_input="0">
            <type position="0" name="T">
              <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1">
                <typeParameters>
                  <type position="0" name="T">
                    <restrictedTo description="Common base class of leaves and branches" name="Conveyor.Tree.ITreeVertex`1"/>
                  </type>
                </typeParameters>
              </restrictedTo>
            </type>
          </link>
        </links>
        <tags/>
      </nodetype>
    </nodetypes>
  </plugin>
</plugins>
