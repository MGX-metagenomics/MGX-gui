package de.cebitec.mgx.gui.goldstandard.ui;

import de.cebitec.mgx.api.misc.Visualizable;
import de.cebitec.mgx.api.model.AttributeTypeI;
import de.cebitec.mgx.gui.goldstandard.ui.charts.EvaluationViewerI;
import de.cebitec.mgx.gui.swingutils.BaseModel;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.SortedSet;
import java.util.TreeSet;
import org.openide.util.Lookup;

/**
 *
 * @author plumenk
 */
public class EvaluationControlPanel extends javax.swing.JPanel implements PropertyChangeListener, ActionListener {

    private EvaluationTopComponent topComponent;
    //
    private EvaluationViewerI currentViewer;
    //
    private AttributeTypeListModel attrListModel = new AttributeTypeListModel();
    private VisualizationTypeListModel vizListModel = new VisualizationTypeListModel();

    /**
     * Creates new form ControlPanel
     */
    public EvaluationControlPanel() {
        initComponents();
        updateButton.addActionListener(this);
    }

    public final void setTopComponent(EvaluationTopComponent tc) {
        this.topComponent = tc;
    }

    public final synchronized void updateViewerList() {
        vizListModel.update();
        currentViewer = vizListModel.getSelectedItem();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attributeTypeList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        visualizationTypeList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        customPane = new javax.swing.JScrollPane();

        setMaximumSize(new java.awt.Dimension(300, 32767));
        setPreferredSize(new java.awt.Dimension(300, 504));

        attributeTypeList.setModel(attrListModel);
        attributeTypeList.setActionCommand("");
        attributeTypeList.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText("Attribute:");

        visualizationTypeList.setModel(vizListModel);
        visualizationTypeList.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("Visualization type:");

        updateButton.setText("Update");
        updateButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customPane)
                    .addComponent(attributeTypeList, 0, 276, Short.MAX_VALUE)
                    .addComponent(visualizationTypeList, 0, 276, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 189, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attributeTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizationTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customPane, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox attributeTypeList;
    private javax.swing.JScrollPane customPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox visualizationTypeList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

//        switch (evt.getPropertyName()) {
//            default:
//                System.err.println("ControlPanel received unknown event " + evt);
//        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void actionPerformed(ActionEvent e) {
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            topComponent.setVisualization(currentViewer);
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    public final void dispose() {
        if (currentViewer != null) {
            currentViewer.dispose();
        }
    }
    
    private final class AttributeTypeListModel extends BaseModel<AttributeTypeI> implements ItemListener {

        @Override
        public void update() {
//            final List<AttributeTypeI> previousContent = new ArrayList<>(content.size());
//            previousContent.addAll(content);
//            // disable all downstream elements, including self
//            content.clear();
//            attributeTypeList.setEnabled(false);
//            visualizationTypeList.setEnabled(false);
//            updateButton.setEnabled(false);
//
//            SwingWorker<SortedSet<AttributeTypeI>, Void> worker = new SwingWorker<SortedSet<AttributeTypeI>, Void>() {
//                @Override
//                protected SortedSet<AttributeTypeI> doInBackground() throws Exception {
//                    SortedSet<AttributeTypeI> types = new TreeSet<>();
//                    for (VisualizationGroupI vg : vgmgr.getActiveVisualizationGroups()) {
//                        Iterator<AttributeTypeI> atIter = vg.getAttributeTypes();
//                        while (atIter.hasNext()) {
//                            types.add(atIter.next());
//                        }
//                    }
//                    return types;
//                }
//
//                @Override
//                protected void done() {
//                    SortedSet<AttributeTypeI> types = null;
//                    try {
//                        types = get();
//                    } catch (InterruptedException | ExecutionException ex) {
//                        Exceptions.printStackTrace(ex);
//                    }
//                    content.addAll(types);
//
//                    if (attrListModel.getSize() > 0) {
//                        // if previously selected attribute type still exists, restore selection
//                        if (currentAttributeType != null && content.contains(currentAttributeType)) {
//                            setSelectedItem(currentAttributeType);
//                            AttributeTypeListModel.this.itemStateChanged(new ItemEvent(attributeTypeList,
//                                    ItemEvent.ITEM_STATE_CHANGED,
//                                    getSelectedItem(),
//                                    ItemEvent.SELECTED));
//                        } else {
//                            attributeTypeList.setSelectedIndex(0);
//                        }
//
//                        attributeTypeList.setEnabled(true);
//                    }
//                    if (contentDiffers(previousContent, content)) {
//                        fireContentsChanged();
//                    }
//                    super.done();
//                }
//
//                private boolean contentDiffers(List<AttributeTypeI> l1, List<AttributeTypeI> l2) {
//                    if (l1.size() != l2.size()) {
//                        return true;
//                    }
//                    for (AttributeTypeI at : l1) {
//                        if (!l2.contains(at)) {
//                            return true;
//                        }
//                    }
//                    for (AttributeTypeI at : l2) {
//                        if (!l1.contains(at)) {
//                            return true;
//                        }
//                    }
//                    return false;
//                }
//            };
//            worker.execute();
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
//            if (e.getStateChange() != ItemEvent.SELECTED) {
//                return;
//            }
//
//            currentAttributeType = getSelectedItem();
//            if (currentAttributeType == null) {
//                return;
//            }
//
//            if (currentViewer != null) {
//                currentViewer.setAttributeType(currentAttributeType);
//            }
//
//            // disable all downstream elements, excluding self
//            visualizationTypeList.setEnabled(false);
//            updateButton.setEnabled(false);
//
//            if (vgmgr.selectAttributeType(currentAttributeType.getName())) {
//                // fetch distribution (and hierarchy) in background
//                ResultCollector rc = new ResultCollector(vgmgr, currentAttributeType, currentDistributions, currentHierarchies, ControlPanel.this);
//                rc.execute();
//            } else {
//                // unresolved conflicts remain
//                //assert false;
//            }
        }
    }

    private final class VisualizationTypeListModel extends BaseModel<EvaluationViewerI<Visualizable>> implements ItemListener {

        @Override
        @SuppressWarnings("unchecked")
        public synchronized void update() {
            // disable all downstream elements
            content.clear();
            visualizationTypeList.setEnabled(false);
            updateButton.setEnabled(false);

            SortedSet<EvaluationViewerI<Visualizable>> viewers = new TreeSet<>();
            for (EvaluationViewerI viewer : Lookup.getDefault().<EvaluationViewerI>lookupAll(EvaluationViewerI.class)) {
                viewers.add(viewer);
            }

            content.addAll(viewers);

            if (vizListModel.getSize() > 0) {
                // if previously selected element still exists, restore selection
                if (currentViewer != null && content.contains(currentViewer)) {
                    setSelectedItem(currentViewer);
                    itemStateChanged(new ItemEvent(visualizationTypeList,
                            ItemEvent.ITEM_STATE_CHANGED,
                            getSelectedItem(),
                            ItemEvent.SELECTED));
                } else {
                    visualizationTypeList.setSelectedIndex(0);
                }

                visualizationTypeList.setEnabled(true);
                updateButton.setEnabled(true);
            }
            fireContentsChanged();
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() != ItemEvent.SELECTED) {
                return;
            }

            if (currentViewer != null) {
                currentViewer.dispose();
            }

            currentViewer = vizListModel.getSelectedItem();

            customPane.setViewportView(currentViewer.getCustomizer());
            customPane.getVerticalScrollBar().setUnitIncrement(16);
        }
    }
}
